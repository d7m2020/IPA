{"version":3,"sources":["ng://netways-lib/lib/services/bridge.service.ts","null","ng://netways-lib/lib/services/datepicker-calendar.service.ts","ng://netways-lib/lib/services/export.service.ts","ng://netways-lib/lib/services/http-requests.service.ts","ng://netways-lib/lib/services/local-storage.service.ts","ng://netways-lib/lib/services/language.service.ts","ng://netways-lib/lib/services/utilities.service.ts","ng://netways-lib/lib/models/all-fields.ts","ng://netways-lib/lib/models/configuration.ts","ng://netways-lib/lib/models/default-location.ts","ng://netways-lib/lib/models/endpoints.ts","ng://netways-lib/lib/models/enums.ts","ng://netways-lib/lib/models/field.ts","ng://netways-lib/lib/models/field-data.ts","ng://netways-lib/lib/models/field-validation.ts","ng://netways-lib/lib/models/input-error.ts","ng://netways-lib/lib/models/map-marker.ts","ng://netways-lib/lib/models/marker-settings.ts","ng://netways-lib/lib/models/market-settings-default.ts","ng://netways-lib/lib/models/master-detail-details.ts","ng://netways-lib/lib/models/notifications.ts","ng://netways-lib/lib/models/section.ts","ng://netways-lib/lib/models/settings.ts","ng://netways-lib/lib/models/response-event-args.ts","ng://netways-lib/lib/components/controls/time-control/w-clock/w-clock.component.ts","ng://netways-lib/lib/components/controls/time-control/w-time-dialog/w-time-dialog.component.ts","ng://netways-lib/lib/components/controls/time-control/w-mat-timepicker/w-mat-timepicker.component.ts","ng://netways-lib/lib/components/controls/time-control/w-time/w-time.component.ts","ng://netways-lib/lib/components/field-templates/field/field.component.ts","ng://netways-lib/lib/components/field-templates/boundable-field/boundable-field.component.ts","ng://netways-lib/lib/components/field-templates/checkbox-field/checkbox-field.component.ts","ng://netways-lib/lib/components/field-templates/chips-field/chips-field.component.ts","ng://netways-lib/lib/components/field-templates/datetime-field/datetime-field.component.ts","ng://netways-lib/lib/components/field-templates/datetime-hijri-field/datetime-hijri-field.component.ts","ng://netways-lib/lib/components/field-templates/editor-field/editor-field.component.ts","ng://netways-lib/lib/components/field-templates/file-upload-field/file-upload-field.component.ts","ng://netways-lib/lib/components/field-templates/image-cropper-field/image-cropper-field.component.ts","ng://netways-lib/lib/components/field-templates/info-field/info-field.component.ts","ng://netways-lib/lib/components/field-templates/input-field/input-field.component.ts","ng://netways-lib/lib/components/field-templates/location-field/location-field.component.ts","ng://netways-lib/lib/components/field-templates/mask-field/mask-field.component.ts","ng://netways-lib/lib/components/form-part-templates/default-master-detail-form/default-master-detail-form.component.ts","ng://netways-lib/lib/components/field-templates/master-detail-field/master-detail-field.component.ts","ng://netways-lib/lib/components/field-templates/multi-select-field/multi-select-field.component.ts","ng://netways-lib/lib/components/field-templates/radiobutton-field/radiobutton-field.component.ts","ng://netways-lib/lib/components/field-templates/rating-field/rating-field.component.ts","ng://netways-lib/lib/components/field-templates/select-field/select-field.component.ts","ng://netways-lib/lib/components/field-templates/time-field/time-field.component.ts","ng://netways-lib/lib/components/field-templates/recaptcha-field/recaptcha-field.component.ts","ng://netways-lib/lib/components/form-part-templates/next-previous-section/next-previous-section.component.ts","ng://netways-lib/lib/components/form-part-templates/tabs-section/tabs-section.component.ts","ng://netways-lib/lib/components/form-part-templates/validation-summary/validation-summary.component.ts","ng://netways-lib/lib/components/form-part-templates/progress-indicator/progress-indicator.component.ts","ng://netways-lib/lib/components/dynamic-form/dynamic-form.component.ts","ng://netways-lib/lib/netways-lib.module.ts"],"names":["BridgeService","Injectable","args","providedIn","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","__values","o","m","i","I18N_VALUES","weekdays","months","tslib_1.__extends","IslamicI18n","getWeekdayShortName","weekday","getMonthShortName","month","getMonthFullName","getDayAriaLabel","date","day","year","NgbDatepickerI18n","ExportService","exportAsExcel","json","fileName","rtl","skipHeader","worksheet","XLSX.utils","json_to_sheet","workbook","book_new","Workbook","Views","RTL","book_append_sheet","XLSX.writeFile","Date","getTime","exportAsPdf","html","size","margins","html2canvas","canvas","dataUri","toDataURL","docDefinition","pageSize","pageMargins","content","image","pdfMake","createPdf","getBlob","file","_this","promptFileSave","buffer","fileType","fileExtension","data","Blob","type","FileSaver.saveAs","HttpRequestsService","httpClient","get","endpointUrl","httpHeaders","HttpHeaders","headers","post","request","put","HttpClient","LocalStorageService","doesKeyExist","key","localStorage","getItem","save","JSON","stringify","setItem","load","parse","loadOrDefault","defaultValue","LanguageService","translate","onLangChange","subscribe","event","setLanguage","lang","translations","language","use","savedLanguage","getLanguage","TranslateService","functionToken","spaceRegex","queryStringRegex","UtilitiesService","bridgeService","httpRequestsService","localStorageService","languageService","evaluateFunctionOrDefault","functionString","indexOf","jsFunctionName","jsFunctionParameters","replace","functionTokens","split","shift","jsFunction","fieldEvalFunctions","loadFile","isLocal","toPromise","mergeRecursive","object1","object2","item","replaceTokens","input","route","additionalParameters","params","replaceTokensFromParameters","getQueryStringParameters","configuration","settings","baseEndPointUrls","parameters","paramValue","match","urlParameters","query","window","location","search","substring","exec","decodeURIComponent","AllFields","Configuration","DefaultLocation","Endpoints","Field","FieldData","FieldValidation","InputError","message","Marker","latitude","longitude","draggable","infoHtml","MarkerSettings","MarkerSettingsDefault","MasterDetailDetails","Notifications","Section","id","name","legend","isActive","Settings","ResponseEventArgs","isSuccess","response","payload","HOURS","MINUTES","EventEmitter","WClockComponent","ngOnChanges","setupUI","steps","currentView","CLOCK_TYPE","userTime","format","selectedTimePart","hour","minute","getPointerStyle","divider","degrees","-webkit-transform","Math","round","-ms-transform","transform","getTimeValueClass","index","STEP_DEG","classes","changeTimeValue","viewChange","emit","userTimeChange","Component","selector","styles","template","Input","Output","WTimeDialogComponent","dialogRef","VIEW_HOURS","time","color","revert","close","submit","UserTimeData","decorators","Inject","MAT_DIALOG_DATA","MatDialogRef","WMatTimePickerComponent","dialog","translatePipe","ngOnInit","meriden","defineProperty","String","showPicker","$event","open","afterClosed","undefined","emituserTimeChange","providers","TranslatePipe","MatDialog","WTimeComponent","revertLabel","submitLabel","formatHour","formatMinute","setCurrentView","setMeridien","reverted","submitted","FieldComponent","handleDefaultSettings","updateValue","newValue","field","validate","clearValue","control","reset","clearValidationErrors","getValue","appendFormData","append","triggerDynamicEvent","eventType","eventArguments","source","eventTriggers","event_1","parentEventHandlerFunction","parentComponent","handler","concat","isFieldHidden","hidden","sectionMode","SectionModes","None","sections","sectionId","currentSection","isValidationShown","isPristine","validationErrors","isValidationAsteriskShown","isFormInDisplayMode","validation","required","min","isSubmit","preValidate","shouldValidate","validateForRequired","validateRequiredCondition","validateForPattern","validatePatternCondition","validateForRange","validateRangeCondition","updateValidationSummary","addValidationError","ValidationErrorClass","_a","tslib_1.__values","mergedFields","_b","requiredText","pattern","RegExp","test","patternText","valueLength","max","rangeText","formMode","FormModes","Display","ViewChild","NgModel","BoundableFieldComponent","translateService","utilitiesService","_super","dataBindOptions","optionsEndpoint","endpoint","endpoints","lookups","bindOptions","options","exception","console","error","ActivatedRoute","Optional","CheckboxFieldComponent","ChipsFieldComponent","DatetimeFieldComponent","datePipe","ngAfterViewInit","setCalendarOptions","formDataDateFormat","calendarElement","calendarOptions","locale","DatePipe","DatetimeHijriFieldComponent","minDate","minDateValue","maxDate","maxDateValue","dateValue","toggleCalendar","calendar","toggle","provide","NgbCalendar","useClass","NgbCalendarIslamicUmalqura","EditorFieldComponent","showToolbar","FileUploadFieldComponent","fileUploadControl","clear","removeFile","files","maxFileSizeInBytes","msgs","find","summary","invalidFileSizeText","invalidFileTypeText","FileUpload","Image","ImageCropperFieldComponent","initializeCropper","imageFile","setAttribute","src","setTimeout","cropper","setImage","setValue","croppedImageElement","nativeElement","currentSrc","setCropperImage","selectedFile","fileReader","FileReader","onloadend","loadEvent","target","readAsDataURL","cropperSettings","CropperSettings","noFileInput","width","croppedWidth","height","croppedHeight","canvasWidth","canvasHeight","minWidth","minHeight","rounded","ImageCropperComponent","LocationFieldComponent","mapsAPILoader","ngZone","defaultLocation","navigator","geolocation","getCurrentPosition","position","coords","addMarkersFromLocation","addMarkers","lat","lng","activateSearchInput","searchElement","autocomplete","google","maps","places","Autocomplete","addListener","run","place","getPlace","geometry","zoom","markerSettings","defaultNewMarker","marker","updateMarkerPosition","MapsAPILoader","NgZone","MaskFieldComponent","updateMask","mask","inputMask","_mask","initMask","inputViewChild","blur","focus","updateMaskValue","writeValue","InputMask","DefaultMasterDetailFormComponent","addChild","current","triggeringField","MasterDetailFieldComponent","openDialog","log","MultiSelectFieldComponent","RatingFieldComponent","readonly","iconCancelClass","iconOnClass","iconOffClass","SelectFieldComponent","TimeFieldComponent","setTime","setTimePickerFieldValue","RecaptchaFieldComponent","isValid","setCaptchaLanguge","recaptchaElement","captchaIFrame","elementRef","querySelector","getAttribute","NextPreviousSectionComponent","incrementSection","increment","newSectionId","s","TabsSectionComponent","switchSection","section","ValidationSummaryComponent","changeDetectorRef","showSummaryAlert","validationSummaryMode","ValidationSummaryModes","Alert","detectChanges","swal","validationSummaryElement","innerHTML","SwalTypes","Warning","confirmButtonText","buttons","Ok","ChangeDetectorRef","ProgressIndicatorComponent","DynamicFormComponent","bindForm","clearForm","form","fieldComponents","formCleared","saveForm","recaptchaFieldComponents","toArray","isFormValid","showProgressIndicator","values_1","getRequestBody","beforeFormSaved","afterFormSaved","notifications","showResultMessage","title","saveSuccessMessageTitle","saveSuccessMessageDetails","Success","saveErrorMessageTitle","saveErrorMessageDetails","Error","submitForm","validateForm","values_2","beforeFormSubmitted","afterFormSubmitted","submitSuccessMessageTitle","submitSuccessMessageDetails","submitErrorMessageTitle","submitErrorMessageDetails","validationSummaryComponent","fieldComponent","validateFormFieldComponent","postMode","PostModes","FormData","getFormData","getFormValues","values","getComponent","fc","isButtonHidden","button","hideButtons","setFormData","formData","fields","responseField","loadConfiguration","_e","dateFields","filter","fieldType","FieldTypes","DateTime","dateFields_1","dateFields_1_1","handleDefaultDateTimeSettings","inputFieldComponents","selectFieldComponents","datetimeFieldComponents","datetimeHijriFieldComponents","checkboxFieldComponents","radiobuttonFieldComponents","multiSelectFieldComponents","chipsFieldComponents","editorFieldComponents","maskFieldComponents","timeFieldComponents","locationFieldComponents","fileUploadFieldComponents","imageCropperFieldComponents","ratingFieldComponents","bindFormData","configurationSourceUrl","sourceFormSchemas","sourceFormSchemaUrl","sourceFormSchema","allFieldsSource","fieldName","allFields","this_1","sourceField","mergedField","warn","defaultDate","defaultDateValue","yearRange","getFullYear","formDataBound","getErrorMessageTitle","getErrorMessageDetails","fieldValidationErrors","encapsulation","ViewEncapsulation","ViewChildren","InputFieldComponent","RadiobuttonFieldComponent","NetwaysLibModule","NgModule","declarations","InfoFieldComponent","imports","CommonModule","BrowserModule","FormsModule","BrowserAnimationsModule","FlexLayoutModule","InputTextModule","CalendarModule","CheckboxModule","RadioButtonModule","FileUploadModule","EditorModule","InputMaskModule","ChipsModule","DropdownModule","MultiSelectModule","MatDialogModule","MatToolbarModule","MatInputModule","MatSnackBarModule","MatButtonModule","MatButtonToggleModule","MatFormFieldModule","MatIconModule","MatSelectModule","ImageCropperModule","RatingModule","RecaptchaCommonModule","RecaptchaModule","forRoot","NgbModule","TranslateModule","loader","TranslateLoader","useFactory","HttpLoaderFactory","deps","AgmCoreModule","apiKey","libraries","region","entryComponents","exports","http","TranslateHttpLoader"],"mappings":"ypEAAA,IAAAA,EAAA,WAeE,SAAAA,gCAXDC,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,sJAJ1B,GCgBIC,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAG5B,SAAAO,EAA0BR,EAAGC,GAEzB,SAAAQ,IAAgBC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GAGnF,SAAAK,EAoC0BC,EAASC,EAAYC,EAAGC,GAC9C,OAAO,IAAKD,IAAMA,EAAIE,UAAU,SAAUC,EAASC,GAC/C,SAAAC,EAAmBC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,IAAW,MAAOG,GAAKL,EAAOK,IACpF,SAAAC,EAAkBJ,GAAS,IAAMC,EAAKN,EAAiB,SAAEK,IAAW,MAAOG,GAAKL,EAAOK,IACvF,SAAAF,EAAcI,GAAUA,EAAOC,KAAOT,EAAQQ,EAAOL,OAAS,IAAIN,EAAE,SAAUG,GAAWA,EAAQQ,EAAOL,SAAWO,KAAKR,EAAWK,GACnIH,GAAMN,EAAYA,EAAUa,MAAMhB,EAASC,GAAc,KAAKS,UAItE,SAAAO,EAA4BjB,EAASkB,GACjC,IAAsGC,EAAGC,EAAGC,EAAGC,EAA3GC,EAAI,CAAEC,MAAO,EAAGC,KAAM,WAAa,GAAW,EAAPJ,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,IAAOK,KAAM,GAAIC,IAAK,IAChG,OAAOL,EAAI,CAAEZ,KAAMkB,EAAK,GAAIC,QAASD,EAAK,GAAIE,SAAUF,EAAK,IAAwB,mBAAXG,SAA0BT,EAAES,OAAOC,UAAY,WAAa,OAAOrC,OAAU2B,EACvJ,SAAAM,EAAcK,GAAK,OAAO,SAAUC,GAAK,OACzC,SAAAzB,EAAc0B,GACV,GAAIhB,EAAG,MAAM,IAAIiB,UAAU,mCAC3B,KAAOb,GAAG,IACN,GAAIJ,EAAI,EAAGC,IAAMC,EAAY,EAARc,EAAG,GAASf,EAAU,UAAIe,EAAG,GAAKf,EAAS,YAAOC,EAAID,EAAU,YAAMC,EAAEgB,KAAKjB,GAAI,GAAKA,EAAEV,SAAWW,EAAIA,EAAEgB,KAAKjB,EAAGe,EAAG,KAAKrB,KAAM,OAAOO,EAE3J,OADID,EAAI,EAAGC,IAAGc,EAAK,CAAS,EAARA,EAAG,GAAQd,EAAEb,QACzB2B,EAAG,IACP,KAAK,EAAG,KAAK,EAAGd,EAAIc,EAAI,MACxB,KAAK,EAAc,OAAXZ,EAAEC,QAAgB,CAAEhB,MAAO2B,EAAG,GAAIrB,MAAM,GAChD,KAAK,EAAGS,EAAEC,QAASJ,EAAIe,EAAG,GAAIA,EAAK,CAAC,GAAI,SACxC,KAAK,EAAGA,EAAKZ,EAAEI,IAAIW,MAAOf,EAAEG,KAAKY,MAAO,SACxC,QACI,KAAkBjB,EAAe,GAA3BA,EAAIE,EAAEG,MAAYa,QAAclB,EAAEA,EAAEkB,OAAS,MAAkB,IAAVJ,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAEZ,EAAI,EAAG,SACjG,GAAc,IAAVY,EAAG,MAAcd,GAAMc,EAAG,GAAKd,EAAE,IAAMc,EAAG,GAAKd,EAAE,IAAM,CAAEE,EAAEC,MAAQW,EAAG,GAAI,MAC9E,GAAc,IAAVA,EAAG,IAAYZ,EAAEC,MAAQH,EAAE,GAAI,CAAEE,EAAEC,MAAQH,EAAE,GAAIA,EAAIc,EAAI,MAC7D,GAAId,GAAKE,EAAEC,MAAQH,EAAE,GAAI,CAAEE,EAAEC,MAAQH,EAAE,GAAIE,EAAEI,IAAIa,KAAKL,GAAK,MACvDd,EAAE,IAAIE,EAAEI,IAAIW,MAChBf,EAAEG,KAAKY,MAAO,SAEtBH,EAAKjB,EAAKmB,KAAKrC,EAASuB,GAC1B,MAAOZ,GAAKwB,EAAK,CAAC,EAAGxB,GAAIS,EAAI,UAAeD,EAAIE,EAAI,EACtD,GAAY,EAARc,EAAG,GAAQ,MAAMA,EAAG,GAAI,MAAO,CAAE3B,MAAO2B,EAAG,GAAKA,EAAG,QAAK,EAAQrB,MAAM,GArB9BL,CAAK,CAACwB,EAAGC,MAyB7D,SAAAO,EAIyBC,GACrB,IAAIC,EAAsB,mBAAXZ,QAAyBW,EAAEX,OAAOC,UAAWY,EAAI,EAChE,OAAID,EAAUA,EAAEN,KAAKK,GACd,CACHhC,KAAM,WAEF,OADIgC,GAAKE,GAAKF,EAAEH,SAAQG,OAAI,GACrB,CAAElC,MAAOkC,GAAKA,EAAEE,KAAM9B,MAAO4B,KC7GhD,IAAMG,EAAc,CAClBC,SAAU,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC/CC,OAAQ,CAAC,OAAQ,MAAO,aAAc,aAAc,eAAgB,eAAgB,MAAO,QAAS,QAAS,OAC3G,YAAa,8FAIgBC,EAAAA,EAAAA,GAKxBC,EAAApD,UAAAqD,6BAAoBC,GACzB,OAAON,EAAYC,SAASK,EAAU,IAOjCF,EAAApD,UAAAuD,2BAAkBC,GACvB,OAAOR,EAAYE,OAAOM,EAAQ,IAO7BJ,EAAApD,UAAAyD,0BAAiBD,GACtB,OAAO1D,KAAKyD,kBAAkBC,IAOzBJ,EAAApD,UAAA0D,yBAAgBC,GACrB,OAAUA,EAAKC,IAAG,IAAID,EAAKH,MAAK,IAAIG,EAAKE,0BA/B5C7E,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,iHACO4E,EAAAA,gCCE/B,SAAAC,YAQOA,EAAA/D,UAAAgE,uBAAcC,EAAaC,EAAkBC,EAAqBC,QAArB,IAAAD,IAAAA,GAAA,QAAqB,IAAAC,IAAAA,GAAA,GAEvE,IAAMC,EAA4BC,EAAAA,MAAWC,cAAcN,EAAM,CAAEG,WAAYA,IAEzEI,EAA0BF,EAAAA,MAAWG,WAEtCD,EAASE,WACZF,EAASE,SAAW,IAGjBF,EAASE,SAASC,QACrBH,EAASE,SAASC,MAAQ,IAGvBH,EAASE,SAASC,MAAM,KAC3BH,EAASE,SAASC,MAAM,GAAK,IAG/BH,EAASE,SAASC,MAAM,GAAGC,IAAMT,EAGjCG,EAAAA,MAAWO,kBAAkBL,EAAUH,EAAW,QAGlDS,EAAAA,UAAeN,EAAUN,EAAW,KAAM,IAAIa,MAAOC,UAxClC,UAiDdjB,EAAA/D,UAAAiF,qBAAYC,EAAchB,EAAkBiB,EAAkBC,mBAAlB,IAAAD,IAAAA,EAAA,WAAkB,IAAAC,IAAAA,EAAA,CAA0B,EAAG,IAC5FF,GACFG,YAAYH,GAAMhE,KAAK,SAAAoE,GACrB,IAAMC,EAAUD,EAAOE,YAEjBC,EAAgB,CACpBC,SAAUP,EACVQ,YAAaP,EACbQ,QAAS,CACP,CACEC,MAAON,KAKbO,QAAQC,UAAUN,GAAeO,QAAQ,SAACC,GACxCC,EAAKC,eAAeF,EAhEd,kBAgE6B/B,EA/DxB,aA2EZH,EAAA/D,UAAAmG,wBAAeC,EAAaC,EAAkBnC,EAAkBoC,GACrE,IAAMC,EAAa,IAAIC,KAAK,CAACJ,GAAS,CACpCK,KAAMJ,IAGRK,EAAAA,OAAiBH,EAAMrC,EAAW,KAAM,IAAIa,MAAOC,UAAYsB,wBA5ElEtH,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,yJCV1ByH,EAAA,WAME,SAAAA,EAAsBC,GAAA9G,KAAA8G,WAAAA,SAMfD,EAAA3G,UAAA6G,aAAIC,GACT,IAAMC,EAAc,IAAIC,EAAAA,YAExB,OAAOlH,KAAK8G,WAAWC,IAASC,EAAa,CAAEG,QAASF,KAQnDJ,EAAA3G,UAAAkH,cAAKJ,EAAqBK,GAC/B,IAAMJ,EAAc,IAAIC,EAAAA,YAExB,OAAOlH,KAAK8G,WAAWM,KAAUJ,EAAaK,EAAS,CAAEF,QAASF,KAQ7DJ,EAAA3G,UAAAoH,aAAIN,EAAqBK,GAC9B,IAAMJ,EAAc,IAAIC,EAAAA,YAExB,OAAOlH,KAAK8G,WAAWQ,IAASN,EAAaK,EAAS,CAAEF,QAASF,yBAjCpE/H,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,oDAHjBmI,EAAAA,2IADT,GCAAC,EAAA,WAIE,SAAAA,YAMOA,EAAAtH,UAAAuH,sBAAaC,GAClB,OAAoC,MAA7BC,aAAaC,QAAQF,IAOvBF,EAAAtH,UAAA2H,cAAKH,EAAajB,GACvBA,EAAOqB,KAAKC,UAAUtB,GAEtBkB,aAAaK,QAAQN,EAAKjB,IAOrBe,EAAAtH,UAAA+H,cAAKP,GACV,IAAMjB,EAAOkB,aAAaC,QAAQF,GAElC,OAAOI,KAAKI,MAAMzB,IASbe,EAAAtH,UAAAiI,uBAAcT,EAAaU,GAChC,IAAIvH,EAAQb,KAAKiI,KAAKP,GAMtB,OAJK7G,IACHA,EAAQuH,GAGHvH,uBA7CV3B,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,sJAF1B,GCAAiJ,EAAA,WAaE,SAAAA,EACSC,EACAX,GAFT,IAAAvB,EAAApG,KACSA,KAAAsI,UAAAA,EACAtI,KAAA2H,aAAAA,qBAPc3H,KAAK2H,aAAaQ,cAAc,WAAY,MASjEnI,KAAKsI,UAAUC,aAAaC,UAAU,SAACC,GACrCrC,EAAKsC,YAAYD,EAAME,MAEvBvC,EAAKwC,aAAeH,EAAMG,sBAOvBP,EAAAnI,UAAAwI,qBAAYG,GACjB7I,KAAKsI,UAAUQ,IAAID,GAEnB7I,KAAK+I,cAAgBF,EAErB7I,KAAK2H,aAAaE,KAAK,WAAYgB,IAI9BR,EAAAnI,UAAA8I,uBACL,OAAOhJ,KAAK2H,aAAaQ,cAAc,WAAY,2BAhCtDjJ,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,oDAHjB6J,EAAAA,wBACAzB,oJAHT,GCQM0B,EAAwB,YAGxBC,EAAa,MAGbC,EAAmB,kCAIvB,SAAAC,EACUC,EACAC,EACAC,EACAC,GAHAzJ,KAAAsJ,cAAAA,EACAtJ,KAAAuJ,oBAAAA,EACAvJ,KAAAwJ,oBAAAA,EACAxJ,KAAAyJ,gBAAAA,SASHJ,EAAAnJ,UAAAwJ,mCAA0BC,EAAwBvB,GACvD,GAA6C,GAAzCuB,EAAeC,QAAQV,GAAqB,CAG9C,IAAIW,OAAc,EAAEC,EAAuB,KAE3C,GAAmC,IAJnCH,EAAiBA,EAAeI,QAAQb,EAAe,KAIpCU,QAAQ,KAAW,CACpC,IAAMI,EAAiBL,EAAeM,MAAM,KAE5CJ,EAAiBG,EAAe,GAEhCA,EAAeE,QAEfJ,EAAuBE,OAEvBH,EAAiBF,EAGnB,IAAMQ,EAAaC,mBAAmBP,GAEtC,OAAIM,EACKA,EAAWL,EAAsBA,GAEjC1B,EAGT,OAAOA,GASEiB,EAAAnJ,UAAAmK,kBAAS3C,0EAWpB,OAVIvB,EAAO,KAEPnG,KAAKwJ,oBAAoB/B,aAAaC,IACxCvB,EAAOnG,KAAKwJ,oBAAoBvB,KAAKP,IAEhC4C,SAAU,EAEfnE,EAAOnG,KAAKuJ,oBAAoBxC,IAAIW,GAAK6C,YAG3C,CAAA,EAAOpE,QAQFkD,EAAAnJ,UAAAsK,wBAAeC,EAAcC,GAClC,IAAK,IAAMC,KAAQD,EACjB,GAAIA,EAAQ7K,eAAe8K,GACzB,IAEMD,EAAQC,GAAM1K,cAAgBT,OAChCiL,EAAQE,GAAQ3K,KAAKwK,eAAeC,EAAQE,GAAOD,EAAQC,IAE3DF,EAAQE,GAAQD,EAAQC,GAE1B,MAAO3J,GAEPyJ,EAAQE,GAAQD,EAAQC,GAK9B,OAAOF,GASFpB,EAAAnJ,UAAA0K,uBAAcC,EAAeC,EAAYC,GAe9C,OAdAF,EAAQA,EAAMd,QAAQ,kBAAmB/J,KAAKyJ,gBAAgBV,eAE1D+B,GAASA,EAAME,SACjBH,EAAQ7K,KAAKiL,4BAA4BJ,EAAOC,EAAME,OAAOnK,QAG/DgK,EAAQ7K,KAAKiL,4BAA4BJ,EAAO7K,KAAKkL,4BAErDL,EAAQ7K,KAAKiL,4BAA4BJ,EAAO7K,KAAKsJ,cAAc6B,cAAcC,SAASC,kBAEtFN,IACFF,EAAQ7K,KAAKiL,4BAA4BJ,EAAOE,IAG3CF,GAQDxB,EAAAnJ,UAAA+K,qCAA4BJ,EAAeS,GACjD,IAAK,IAAM5D,KAAO4D,EAChB,GAAIA,EAAWzL,eAAe6H,GAAM,CAElC,IAAM6D,EAAaD,EAAW5D,GAE9BmD,EAAQA,EAAMd,QAAQ,IAAMrC,EAAM,IAAK6D,GAI3C,OAAOV,GAMDxB,EAAAnJ,UAAAgL,oCAON,IANA,IAIIM,EAJEC,EAAgB,GAEhBC,EAAQC,OAAOC,SAASC,OAAOC,UAAU,GAIxCN,EAAQpC,EAAiB2C,KAAKL,IACnCD,EAAczL,KAAKgM,mBAAmBR,EAAM,KAAOxL,KAAKgM,mBAAmBR,EAAM,IAGnF,OAAOC,GAODpC,EAAAnJ,UAAA8L,4BAAmBnB,GACzB,OAAOmB,mBAAmBnB,EAAMd,QAAQZ,EAAY,2BAzJvDjK,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,oDAZjBH,SAHA4H,SACAW,SACAa,8JCDT4D,kBCAAC,8BAiBqB,GCnBrBC,kBCAAC,0DCGsB,gBACI,iBACH,qDAIA,eACC,eACD,sDAIA,cACA,sBACQ,kEAIJ,sBACA,6DAIe,kBACF,kBACE,iBACH,kBACI,0DAIpB,cACA,kBACI,2BACK,8BACF,uBACL,oBACE,oBACF,uBACK,yBACH,wBACE,qBACL,iBACC,qBACG,mBACL,kBACI,0BACI,wBACN,wBACM,oBCjD/BC,mBCHAC,mBCAAC,mBCAAC,GAKE,SAAAA,GAAY7F,EAAc8F,GACxBzM,KAAK2G,KAAOA,EAEZ3G,KAAKyM,QAAUA,GCRnBC,GAWE,SAAAA,GAAYC,EAAkBC,EAAmBC,EAAoBC,GACnE9M,KAAK2M,SAAWA,EAEhB3M,KAAK4M,UAAYA,EAEjB5M,KAAK6M,UAAYA,EAEjB7M,KAAK8M,SAAWA,GChBpBC,mBCFAC,mBCAAC,mBCAAC,mBCAAC,GAWE,SAAAA,GAAYC,EAAYC,EAAcC,EAAgBC,GACpDvN,KAAKoN,GAAKA,EAEVpN,KAAKqN,KAAOA,EAEZrN,KAAKsN,OAASA,EAEdtN,KAAKuN,SAAWA,GClBpBC,mBCAAC,GAOE,SAAAA,GAAYC,EAAoBC,EAAeC,GAC7C5N,KAAK0N,UAAYA,EAEjB1N,KAAK2N,SAAWA,EAEhB3N,KAAK4N,QAAUA,OCRjBC,MAAA,EACAC,QAAA,SADAD,OAAK,cACLC,SAAO,6DAoDgD,IAAIC,EAAAA,6BAG7B,IAAIA,EAAAA,wBAInB,IAAIpO,aAInBqO,EAAA9N,UAAA+N,YAAA,WACEjO,KAAKkO,WAGAF,EAAA9N,UAAAgO,mBAGL,OAFAlO,KAAKmO,MAAQ,IAAIxO,MAETK,KAAKoO,aACX,KAAKC,GAAWR,MACd,IAAK,IAAI5K,EAAI,EAAGA,GAAKjD,KAAKsO,SAASC,OAAQtL,IACzCjD,KAAKmO,MAAMtL,KAAKI,GAChBjD,KAAKwO,iBAAmBxO,KAAKsO,SAASG,MAAQ,EAE1CzO,KAAKwO,iBAAmBxO,KAAKsO,SAASC,SAExCvO,KAAKwO,kBAAoBxO,KAAKsO,SAASC,QAG3C,MACF,KAAKF,GAAWP,QACd,IAAS7K,EAAI,EAAGA,GAAK,GAAIA,GAAK,EAE5BjD,KAAKmO,MAAMtL,KAAKI,GAElBjD,KAAKmO,MAAMtL,KAAK,GAChB7C,KAAKwO,iBAAmBxO,KAAKsO,SAASI,QAAU,IAKtDV,EAAA9N,UAAAyO,gBAAA,WACE,IAAIC,EAAU,EACd,OAAQ5O,KAAKoO,aACX,KAAKC,GAAWR,MACde,EAAU5O,KAAKsO,SAASC,OACxB,MACF,KAAKF,GAAWP,QACdc,EAAU,GAId,IAAIC,EAAU,EAad,MANc,CACZC,oBAAqB,WANrBD,EADE7O,KAAKoO,cAAgBC,GAAWR,MACxBkB,KAAKC,MAAMhP,KAAKsO,SAASG,MAAQ,IAAMG,IAAY,IAEnDG,KAAKC,MAAMhP,KAAKsO,SAASI,QAAU,IAAME,IAAY,KAIpB,OAC3CK,gBAAiB,UAAYJ,EAAU,OACvCK,UAAa,UAAYL,EAAU,SAMhCb,EAAA9N,UAAAiP,2BAAkBrO,EAAcsO,GACjCpP,KAAKoO,cAAgBC,GAAWR,MAClC7N,KAAKqP,SAAW,IAAMrP,KAAKsO,SAASC,OAEpCvO,KAAKqP,SAAW,GAGlB,IAAIC,EAAU,2BAA8BtP,KAAKqP,UAAYD,EAAQ,GAOrE,OALIpP,KAAKwO,mBAAqB1N,IAE5BwO,GAAW,gBAGNA,GAGFtB,EAAA9N,UAAAqP,yBAAgBzO,GACjBd,KAAKoO,cAAgBC,GAAWR,OAClC7N,KAAKsO,SAASG,KAAO3N,EAGrBd,KAAKwP,WAAWC,KAAKpB,GAAWP,WAEhC9N,KAAKsO,SAASI,OAAS5N,EAGvBd,KAAKwP,WAAWC,KAAKpB,GAAWR,QAGlC7N,KAAK0P,eAAeD,KAAKzP,KAAKsO,+BA1IjCqB,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,YACVC,OAAQ,CAAC,uuEACTC,SAAU,8/BAoCTC,EAAAA,8BACAC,EAAAA,4BAEAD,EAAAA,0BACAC,EAAAA,sBAEAD,EAAAA,cC9DHE,GAAA,WAmBE,SAAAA,EACmCxJ,EACzByJ,GADyBlQ,KAAAyG,KAAAA,EACzBzG,KAAAkQ,UAAAA,kBAPW7B,GAAWR,wBACTQ,GAAWP,yBACA9N,KAAKmQ,WAMrCnQ,KAAKsO,SAAW7H,EAAK2J,KACrBpQ,KAAKqQ,MAAQ5J,EAAK4J,aAGpBJ,EAAA/P,UAAAoQ,OAAA,WACEtQ,KAAKkQ,UAAUK,OAAO,IAGxBN,EAAA/P,UAAAsQ,OAAA,WACExQ,KAAKkQ,UAAUK,MAAMvQ,KAAKsO,+BA1B7BqB,EAAAA,UAASxQ,KAAA,CAAC,CACT0Q,OAAQ,CAAC,wEACTC,SAAU,0NAa+BW,GAAYC,WAAA,CAAA,CAAA/J,KAAlDgK,EAAAA,OAAMxR,KAAA,CAACyR,EAAAA,0BAnBHC,EAAAA,kBADT,GAmCAJ,mBCnCAK,GAAA,WAsDE,SAAAA,EACUC,EACAC,GADAhR,KAAA+Q,OAAAA,EACA/Q,KAAAgR,cAAAA,sBApBsC,IAAIjD,EAAAA,oBAuBpD+C,EAAA5Q,UAAA+Q,SAAA,WACE,IAAKjR,KAAKsO,SAAU,CAElB,IAAM8B,EAAY,CAClB3B,KAAY,EACZC,OAAc,EACdH,OAAc,GACd2C,QAAe,MAEflR,KAAKsO,SAAW8B,IAIpB5Q,OAAA2R,eAAIL,EAAA5Q,UAAA,OAAI,KAAR,WACE,IAAKF,KAAKsO,SACR,MAAO,GAGT,IAAI4C,EAAU,GAAGlR,KAAKsO,SAAS4C,QAE/BA,EAAUlR,KAAKgR,cAAc9B,UAAUgC,GAEV,KAAzBlR,KAAKsO,SAASC,SAChB2C,EAAU,IAGZ,IAAIzC,EAAO,GAAGzO,KAAKsO,SAASG,KAK5B,OAJ2B,KAAvBzO,KAAKsO,SAASG,OAChBA,EAAO,MAGoB,IAAzBzO,KAAKsO,SAASI,OACND,EAAI,OAAOyC,EAEZlR,KAAKsO,SAASI,OAAS,GAGtBD,EAAI,KADH,IAAM2C,OAAOpR,KAAKsO,SAASI,SAClB,IAAIwC,EAGdzC,EAAI,IAAIzO,KAAKsO,SAASI,OAAM,IAAIwC,mCAI9CJ,EAAA5Q,UAAAmR,WAAA,SAAWC,GAAX,IAAAlL,EAAApG,KAwBE,OAvBkBA,KAAK+Q,OAAOQ,KAAKtB,GAAsB,CACvDxJ,KAAM,CACJ2J,KAAM,CACJ3B,KAAMzO,KAAKsO,SAASG,KACpBC,OAAQ1O,KAAKsO,SAASI,OACtBwC,QAASlR,KAAKsO,SAAS4C,QACvB3C,OAAQvO,KAAKsO,SAASC,QAExB8B,MAAOrQ,KAAKqQ,SAINmB,cACPhJ,UAAU,SAACtH,GAENA,IAAWuQ,YAEQ,IAAZvQ,IACTkF,EAAKkI,SAAWpN,EAEhBkF,EAAKsL,yBAGJ,GAGDZ,EAAA5Q,UAAAwR,8BAEN1R,KAAK0P,eAAeD,KAAKzP,KAAKsO,+BA9HjCqB,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,qBACVC,OAAQ,CAAC,kOACTC,SAAU,6fAqBV6B,UAAW,CAACC,EAAAA,4DA7BLC,EAAAA,iBAGAD,EAAAA,mDA8BN7B,EAAAA,8BAEAC,EAAAA,sBAEAD,EAAAA,wBAEAA,EAAAA,wBAEAA,EAAAA,0BAEAA,EAAAA,uBAEAA,EAAAA,gCAEAA,EAAAA,uBAEAA,EAAAA,yBAEAA,EAAAA,WApDH,GCAA+B,GAAA,WAgFE,SAAAA,EAAoBd,GAAAhR,KAAAgR,cAAAA,sBAd4B,IAAIjD,EAAAA,2BAKX,IAAIA,EAAAA,4BACF,IAAIA,EAAAA,6BAI3BM,GAAWR,wBACTQ,GAAWP,yBACA9N,KAAKmQ,kBAItC2B,EAAA5R,UAAA+Q,SAAA,WACOjR,KAAKsO,WACRtO,KAAKsO,SAAW,CACdG,KAAM,EACNC,OAAQ,EACRwC,QAAS,KACT3C,OAAQ,KAIPvO,KAAK+R,cACR/R,KAAK+R,YAAc/R,KAAKgR,cAAc9B,UAAU,mBAG7ClP,KAAKgS,cACRhS,KAAKgS,YAAchS,KAAKgR,cAAc9B,UAAU,gBAIpD4C,EAAA5R,UAAA+R,WAAA,WACE,GAA6B,KAAzBjS,KAAKsO,SAASC,OAAe,CAC/B,GAA2B,KAAvBvO,KAAKsO,SAASG,KAChB,MAAO,KACF,GAAIzO,KAAKsO,SAASG,KAAO,GAC9B,MAAO,IAAM2C,OAAOpR,KAAKsO,SAASG,MAItC,OAAO2C,OAAOpR,KAAKsO,SAASG,OAG9BqD,EAAA5R,UAAAgS,aAAA,WACE,OAA6B,IAAzBlS,KAAKsO,SAASI,OACT,KACE1O,KAAKsO,SAASI,OAAS,GACzB,IAAM0C,OAAOpR,KAAKsO,SAASI,QAE3B0C,OAAOpR,KAAKsO,SAASI,SAIhCoD,EAAA5R,UAAAiS,eAAA,SAAexL,GACb3G,KAAKoO,YAAczH,GAGrBmL,EAAA5R,UAAAkS,YAAA,SAAYpP,GACVhD,KAAKsO,SAAS4C,QAAUlO,GAG1B8O,EAAA5R,UAAAoQ,OAAA,WACEtQ,KAAKqS,SAAS5C,QAGhBqC,EAAA5R,UAAAsQ,OAAA,WACExQ,KAAKsS,UAAU7C,KAAKzP,KAAKsO,WAG3BwD,EAAA5R,UAAAwR,mBAAA,SAAmBjJ,GACjBzI,KAAK0P,eAAeD,KAAKzP,KAAKsO,+BAxIjCqB,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,WACVE,SAAU,q3DAuDVD,OAAQ,CAAC,00EACT8B,UAAW,CAACC,EAAAA,4DA5DLA,EAAAA,mDA+DN7B,EAAAA,8BACAC,EAAAA,4BAEAD,EAAAA,2BACAA,EAAAA,wBAEAC,EAAAA,0BACAA,EAAAA,sBAEAD,EAAAA,WA1EH,iBCiCE,SAAAwC,EACSjJ,GAAAtJ,KAAAsJ,cAAAA,4BAZ6B,2BAGD,yBAGF,SAU5BiJ,EAAArS,UAAAsS,mCAOAD,EAAArS,UAAAuS,qBAAYC,GACjB1S,KAAK2S,MAAMlM,KAAK5F,MAAQ6R,EAAS7R,MAEjCb,KAAK4S,YAIAL,EAAArS,UAAA2S,sBACD7S,KAAK2S,MAAMlM,OACbzG,KAAK2S,MAAMlM,KAAK5F,MAAQ,KAEpBb,KAAK8S,SACP9S,KAAK8S,QAAQC,QAGf/S,KAAKgT,0BAKFT,EAAArS,UAAA+S,oBACL,OAAOjT,KAAK2S,MAAMlM,KAAK5F,OAOlB0R,EAAArS,UAAAgT,wBAAezM,GAKpB,OAJIzG,KAAK2S,MAAMlM,MAAQzG,KAAK2S,MAAMlM,KAAK5F,OACrC4F,EAAK0M,OAAOnT,KAAK2S,MAAMtF,KAAMrN,KAAK2S,MAAMlM,KAAK5F,OAGxC4F,GAQF8L,EAAArS,UAAAkT,6BAAoBC,EAAmBC,EAAqBC,GACjE,GAAIA,EAAOC,cAAe,CACxB,IAAMC,EAAQF,EAAOC,cAAcH,GAE7BK,EAA6B1T,KAAKsJ,cAAcqK,gBAAgBF,EAAMG,SAE5E,GAAIF,EAA4B,CAC9B,IAAIpI,EAAa,CAACgI,GAEdG,EAAMnI,YAAwC,EAA1BmI,EAAMnI,WAAW1I,SACvC0I,EAAaA,EAAWuI,OAAOJ,EAAMnI,aAGvCoI,EAA2B1T,KAAKsJ,cAAcqK,gBAAiBJ,EAAQjI,MAQtEiH,EAAArS,UAAA4T,yBACL,OAAO9T,KAAK2S,MAAMoB,QACf/T,KAAKsJ,cAAc6B,cAAcC,SAAS4I,cAAgBC,GAAaC,MACnB,EAAnDlU,KAAKsJ,cAAc6B,cAAcgJ,SAASvR,QAC1C5C,KAAK2S,MAAMyB,YAAcpU,KAAKsJ,cAAc6B,cAAckJ,eAAejH,IAMxEmF,EAAArS,UAAAoU,6BACL,OAAQtU,KAAKuU,YAAcvU,KAAK2S,MAAM6B,kBAAyD,EAArCxU,KAAK2S,MAAM6B,iBAAiB5R,QAMjF2P,EAAArS,UAAAuU,qCACL,OAAQzU,KAAK0U,uBAAyB1U,KAAK2S,MAAMgC,aAAe3U,KAAK2S,MAAMgC,WAAWC,UAAwC,EAA5B5U,KAAK2S,MAAMgC,WAAWE,MAQnHtC,EAAArS,UAAA0S,kBAASU,EAAsBwB,GAyBpC,OAxBA9U,KAAK+U,YAAYD,GAEb9U,KAAKgV,mBACHhV,KAAK2S,MAAMoB,OACb/T,KAAKgT,wBAEAhT,KAAK0U,wBACJ1U,KAAKiV,qBACPjV,KAAKkV,4BAGHlV,KAAKmV,oBACPnV,KAAKoV,2BAGHpV,KAAKqV,kBACPrV,KAAKsV,0BAKXtV,KAAKuV,2BAGAvV,KAAK2S,MAAM6B,kBAObjC,EAAArS,UAAAsV,4BAAmB/I,EAAiB9F,QAAA,IAAAA,IAAAA,EAAe4L,EAAekD,sBAClEzV,KAAK2S,MAAM6B,mBACdxU,KAAK2S,MAAM6B,iBAAmB,IAAI7U,OAGpCK,KAAK2S,MAAM6B,iBAAiB3R,KAAK,IAAI2J,GAAW7F,EAAM8F,KAIjD8F,EAAArS,UAAA8S,iCACLhT,KAAK2S,MAAM6B,iBAAmB,IAAI7U,OAM1B4S,EAAArS,UAAA8U,eAAV,WACE,OAAOhV,KAAK2S,MAAMgC,cAAgB3U,KAAK2S,MAAM6B,kBAA2D,IAAvCxU,KAAK2S,MAAM6B,iBAAiB5R,SAOrF2P,EAAArS,UAAA6U,YAAV,SAAsBD,GAGpB,OAFA9U,KAAKuU,YAAa,EAEdO,GACE9U,KAAK2S,MAAM6B,kBAAyD,EAArCxU,KAAK2S,MAAM6B,iBAAiB5R,SAQ/D5C,KAAK2S,MAAM6B,iBAAmB,IAAI7U,OAPzBK,KAAK2S,MAAM6B,kBAcdjC,EAAArS,UAAAqV,wBAAV,WACEvV,KAAKsJ,cAAc6B,cAAcqJ,iBAAmB,IAAI7U,UAExD,IAAoB,IAAA+V,EAAAC,EAAA3V,KAAKsJ,cAAc6B,cAAcyK,cAAYC,EAAAH,EAAA3U,QAAA8U,EAAA1U,KAAA0U,EAAAH,EAAA3U,OAAA,CAA5D,IAAM4R,EAAKkD,EAAAhV,MACV8R,EAAM6B,mBACRxU,KAAKsJ,cAAc6B,cAAcqJ,iBAAmBxU,KAAKsJ,cACtD6B,cAAcqJ,iBAAiBX,OAAOlB,EAAM6B,iIAQ3CjC,EAAArS,UAAAgV,0BAAV,WAOE,OANIlV,KAAK2S,MAAMgC,WAAWC,WACnB5U,KAAK2S,MAAMlM,MAASzG,KAAK2S,MAAMlM,KAAK5F,OAA0C,IAAjCb,KAAK2S,MAAMlM,KAAK5F,MAAM+B,QACtE5C,KAAK2S,MAAM6B,iBAAiB3R,KAAK,IAAI2J,GAAW+F,EAAekD,qBAAsBzV,KAAK2S,MAAMgC,WAAWmB,gBAIxG9V,KAAK2S,MAAM6B,kBAMVjC,EAAArS,UAAAkV,yBAAV,WACMpV,KAAK2S,MAAMgC,WAAWoB,SAAW/V,KAAK2S,MAAMlM,MAAQzG,KAAK2S,MAAMlM,KAAK5F,OAAwC,EAA/Bb,KAAK2S,MAAMlM,KAAK5F,MAAM+B,SACvF,IAAIoT,OAAOhW,KAAK2S,MAAMgC,WAAWoB,SACpCE,KAAKjW,KAAK2S,MAAMlM,KAAK5F,QAC9Bb,KAAK2S,MAAM6B,iBAAiB3R,KAAK,IAAI2J,GAAW+F,EAAekD,qBAAsBzV,KAAK2S,MAAMgC,WAAWuB,eAI/G,OAAOlW,KAAK2S,MAAM6B,kBAMVjC,EAAArS,UAAAoV,uBAAV,WACE,IAAMa,EAAcnW,KAAK2S,MAAMlM,MAAQzG,KAAK2S,MAAMlM,KAAK5F,MAAQb,KAAK2S,MAAMlM,KAAK5F,MAAM+B,OAAS,EAO9F,OALK5C,KAAK2S,MAAMgC,WAAWE,KAAOsB,EAAcnW,KAAK2S,MAAMgC,WAAWE,KACnE7U,KAAK2S,MAAMgC,WAAWyB,KAAOD,EAAcnW,KAAK2S,MAAMgC,WAAWyB,MAClEpW,KAAK2S,MAAM6B,iBAAiB3R,KAAK,IAAI2J,GAAW+F,EAAekD,qBAAsBzV,KAAK2S,MAAMgC,WAAW0B,YAGtGrW,KAAK2S,MAAM6B,kBAMVjC,EAAArS,UAAAwU,oBAAV,WACE,OAAO1U,KAAKsJ,cAAc6B,cAAcC,SAASkL,WAAaC,EAAUC,gCA3P1B,iDANjD7G,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,YACVE,SAAU,gDAPH7Q,oCAcN8Q,EAAAA,MAAK5Q,KAAA,CAAC,0BAGNsX,EAAAA,UAAStX,KAAA,CAACuX,EAAAA,gCCNX,SAAAC,EACSrN,EACCC,EACAqN,EACAC,EACY/L,GALtB,IAAA1E,EAOE0Q,EAAApU,KAAA1C,KAAMsJ,IAActJ,YANboG,EAAAkD,cAAAA,EACClD,EAAAmD,oBAAAA,EACAnD,EAAAwQ,iBAAAA,EACAxQ,EAAAyQ,iBAAAA,EACYzQ,EAAA0E,MAAAA,WANqBzH,EAAAA,EAAAA,GAYpCsT,EAAAzW,UAAAsS,4CACAxS,KAAK0U,wBACR1U,KAAK+W,kBAEL/W,KAAK4W,iBAAiBrO,aAAaC,UAAU,SAACC,GAC5CrC,EAAK2Q,sBAMDJ,EAAAzW,UAAA6W,gBAAV,WACE,GAAI/W,KAAK2S,MAAMlM,MAAQzG,KAAK2S,MAAMlM,KAAKuQ,gBAAiB,CACtD,IAAMC,EAAWjX,KAAK6W,iBAAiBjM,cACrC5K,KAAKsJ,cAAc6B,cAAc+L,UAAUC,QAAQnX,KAAK2S,MAAMlM,KAAKuQ,iBACnEhX,KAAK8K,MACL9K,KAAKsJ,cAAcyB,sBAGrB/K,KAAKoX,YAAYH,KAOXN,EAAAzW,UAAAkX,YAAV,SAAsBH,GAAtB,IAAA7Q,EAAApG,KACEA,KAAKuJ,oBAAoBxC,IAAIkQ,GAAUzO,UAAU,SAAAmF,GAC/CvH,EAAKuM,MAAMlM,KAAK4Q,QAAU1J,GACzB,SAAA2J,GACDC,QAAQC,MAAM,gBAAiBF,0BA9CpC3H,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,sBACVE,SAAU,gDANH7Q,SAEA4H,SAJAoC,EAAAA,wBAGAI,SAFAoO,EAAAA,eAAc/G,WAAA,CAAA,CAAA/J,KAelB+Q,EAAAA,iBANwCnF,yGCkDR,WAFOlP,EAAAA,EAAAA,GAKnCsU,EAAAzX,UAAA2S,sBACD7S,KAAK2S,MAAMlM,OACbzG,KAAK2S,MAAMlM,KAAK5F,MAAQ,GAExBb,KAAK8S,QAAQC,QAEb/S,KAAKgT,0BAQF2E,EAAAzX,UAAAgT,wBAAezM,GACpB,GAAIzG,KAAK2S,MAAMlM,MAAQzG,KAAK2S,MAAMlM,KAAK5F,MACrC,IAAK,IAAIoC,EAAI,EAAGA,EAAIjD,KAAK2S,MAAMlM,KAAK5F,MAAM+B,OAAQK,IAAK,CACrD,IAAMpC,EAAQb,KAAK2S,MAAMlM,KAAK5F,MAAMoC,GAEpCwD,EAAK0M,OAAOnT,KAAK2S,MAAMtF,KAAO,IAAMpK,EAAI,IAAKpC,GAIjD,OAAO4F,uBArFVkJ,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,qBACVE,SAAU,85DAqDVD,OAAQ,CAAC,8GAEiC8G,yGCDP,WAFItT,EAAAA,EAAAA,GAQhCuU,EAAA1X,UAAAgT,wBAAezM,GACpB,GAAIzG,KAAK2S,MAAMlM,MAAQzG,KAAK2S,MAAMlM,KAAK5F,MACrC,IAAK,IAAIoC,EAAI,EAAGA,EAAIjD,KAAK2S,MAAMlM,KAAK5F,MAAM+B,OAAQK,IAAK,CACrD,IAAMpC,EAAQb,KAAK2S,MAAMlM,KAAK5F,MAAMoC,GAEpCwD,EAAK0M,OAAOnT,KAAK2S,MAAMtF,KAAO,IAAMpK,EAAI,IAAKpC,GAIjD,OAAO4F,uBAvEVkJ,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,kBACVE,SAAU,0wDAkDVD,OAAQ,CAAC,oKAE8B0C,mBCiBvC,SAAAsF,EACSvO,EACCsN,EACAnN,EACAqO,GAJV,IAAA1R,EAME0Q,EAAApU,KAAA1C,KAAMsJ,IAActJ,YALboG,EAAAkD,cAAAA,EACClD,EAAAwQ,iBAAAA,EACAxQ,EAAAqD,gBAAAA,EACArD,EAAA0R,SAAAA,yBAN4B,WALIzU,EAAAA,EAAAA,GAgB1CwU,EAAA3X,UAAA6X,gBAAA,WAAA,IAAA3R,EAAApG,KACEA,KAAKgY,qBAELhY,KAAK4W,iBAAiBrO,aAAaC,UAAU,SAACmF,GAC5CvH,EAAK4R,wBAQFH,EAAA3X,UAAAgT,wBAAezM,GAKpB,OAJIzG,KAAK2S,MAAMlM,MAAQzG,KAAK2S,MAAMlM,KAAK5F,OACrC4F,EAAK0M,OAAOnT,KAAK2S,MAAMtF,KAAMrN,KAAK8X,SAAS5I,UAAUlP,KAAK2S,MAAMlM,KAAK5F,MAAOb,KAAK2S,MAAMsF,qBAGlFxR,GAIFoR,EAAA3X,UAAAsS,mCAKCqF,EAAA3X,UAAA8X,8BACN,GAAIhY,KAAKkY,iBAAmBlY,KAAKyJ,gBAAgBb,aAAc,CAC7D,IAAMuP,EAAkBnY,KAAKyJ,gBAAgBb,aAAauP,gBAEtDA,IACFnY,KAAKkY,gBAAgBE,OAASD,yBA3GrCxI,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,qBACVE,SAAU,kqEAwDVD,OAAQ,CAAC,qrBA/DF5Q,SAEAgK,EAAAA,wBADAZ,SAEAgQ,EAAAA,qDAgEN5B,EAAAA,UAAStX,KAAA,CAAC,kBAF+BoT,mBCgB1C,SAAA+F,EACShP,EACCuN,GAFV,IAAAzQ,EAIE0Q,EAAApU,KAAA1C,KAAMsJ,IAActJ,YAHboG,EAAAkD,cAAAA,EACClD,EAAAyQ,iBAAAA,yBAJ4B,WAJSxT,EAAAA,EAAAA,GAcxCiV,EAAApY,UAAAsS,iCACDxS,KAAK2S,MAAM4F,UACbvY,KAAK2S,MAAM6F,aAAexY,KAAK6W,iBAAiBnN,0BAA0B1J,KAAK2S,MAAM4F,QAAS,IAAItT,KAAKjF,KAAK2S,MAAM4F,WAGhHvY,KAAK2S,MAAM8F,UACbzY,KAAK2S,MAAM+F,aAAe1Y,KAAK6W,iBAAiBnN,0BAA0B1J,KAAK2S,MAAM8F,QAAS,IAAIxT,KAAKjF,KAAK2S,MAAM8F,WAGhHzY,KAAK2S,MAAMlM,KAAKkS,YAClB3Y,KAAK2S,MAAMlM,KAAK5F,MAAQb,KAAK6W,iBAAiBnN,0BAC5C1J,KAAK2S,MAAMlM,KAAKkS,UAChB,IAAI1T,KAAKjF,KAAK2S,MAAMlM,KAAKkS,cASxBL,EAAApY,UAAAgT,wBAAezM,GASpB,OARIzG,KAAK2S,MAAMlM,MAAQzG,KAAK2S,MAAMlM,KAAK5F,QACrC4F,EAAK0M,OAAOnT,KAAK2S,MAAMtF,KAAO,QAASrN,KAAK2S,MAAMlM,KAAK5F,MAAMkD,MAE7D0C,EAAK0M,OAAOnT,KAAK2S,MAAMtF,KAAO,SAAUrN,KAAK2S,MAAMlM,KAAK5F,MAAM6C,OAE9D+C,EAAK0M,OAAOnT,KAAK2S,MAAMtF,KAAO,OAAQrN,KAAK2S,MAAMlM,KAAK5F,MAAMiD,MAGvD2C,GAIF6R,EAAApY,UAAA0Y,0BACL5Y,KAAK6Y,SAASC,8BAtHjBnJ,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,2BACVE,SAAU,+pEA6DVD,OAAQ,CAAC,4zCACT8B,UAAW,CACT,CAAEoH,QAASC,EAAAA,YAAaC,SAAUC,EAAAA,4BAClC,CAAEH,QAAS/U,EAAAA,kBAAmBiV,SAAU3V,iDArEnCrE,SACAoK,uCAwENoN,EAAAA,UAAStX,KAAA,CAAC,eADoCoT,4GCvBT,WAFElP,EAAAA,EAAAA,GAKjC8V,EAAAjZ,UAAA+S,oBACL,OAAIjT,KAAK2S,MAAMyG,YACNpZ,KAAK2S,MAAMlM,KAAK5F,MAEhBb,KAAK2S,MAAMlM,KAAK5F,MAAMkJ,QAAQ,WAAY,yBA1DtD4F,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,mBACVE,SAAU,yqDA6CVD,OAAQ,CAAC,8VAE+B0C,sFCoCIlP,EAAAA,EAAAA,GAKrCgW,EAAAnZ,UAAA2S,sBACD7S,KAAKsZ,mBACPtZ,KAAKsZ,kBAAkBC,QAKzB,IAFA,IAAM3W,EAAS5C,KAAK2S,MAAMlM,KAAK5F,MAAM+B,OAE5BK,EAAI,EAAGA,EAAIL,EAAQK,IAC1BjD,KAAKwZ,WAAWxZ,KAAK2S,MAAMlM,KAAK5F,MAAMoC,IAGxCjD,KAAKgT,yBAOAqG,EAAAnZ,UAAAgT,wBAAezM,GACpB,GAAIzG,KAAKsZ,kBAAkBG,UACzB,IAAmB,IAAA/D,EAAAC,EAAA3V,KAAKsZ,kBAAkBG,OAAK5D,EAAAH,EAAA3U,QAAA8U,EAAA1U,KAAA0U,EAAAH,EAAA3U,OAAA,CAA1C,IAAMoF,EAAI0P,EAAAhV,MACb4F,EAAK0M,OAAOnT,KAAK2S,MAAMtF,KAAMlH,wGAIjC,OAAOM,WAQF4S,EAAAnZ,UAAA0S,kBAASU,EAAsBwB,GAGpC,GAFA9U,KAAK+U,YAAYD,GAEb9U,KAAKgV,iBAAkB,CACzB,IAAImB,EAAc,EAclB,GAbInW,KAAKsZ,oBACPnD,EAAiC,aAAnB7C,EAAgCtT,KAAKsZ,kBAAkBG,MAAM7W,OAAS,EAAI5C,KAAKsZ,kBAAkBG,MAAM7W,QAGnH5C,KAAK2S,MAAMlM,KAAK5F,QAClBsV,GAAenW,KAAK2S,MAAMlM,KAAK5F,MAAM+B,SAGlC5C,KAAK2S,MAAMgC,WAAWE,KAAOsB,EAAcnW,KAAK2S,MAAMgC,WAAWE,KACnE7U,KAAK2S,MAAMgC,WAAWyB,KAAOD,EAAcnW,KAAK2S,MAAMgC,WAAWyB,MAClEpW,KAAK2S,MAAM6B,iBAAiB3R,KAAK,IAAI2J,GAAW+F,GAAekD,qBAAsBzV,KAAK2S,MAAMgC,WAAW0B,YAG9D,EAA3CrW,KAAK2S,MAAMgC,WAAW+E,oBAA0B1Z,KAAKsZ,mBAAqBtZ,KAAKsZ,kBAAkBK,KACpE3Z,KAAKsZ,kBAAkBK,KAAKC,KAAK,SAAA5W,GAAK,MAAc,oBAAdA,EAAE6W,WAGrE7Z,KAAK2S,MAAM6B,iBAAiB3R,KAAK,IAAI2J,GAAW+F,GAAekD,qBAAsBzV,KAAK2S,MAAMgC,WAAWmF,sBAG9E9Z,KAAKsZ,kBAAkBK,KAAKC,KAAK,SAAA5W,GAAK,MAAc,oBAAdA,EAAE6W,WAGrE7Z,KAAK2S,MAAM6B,iBAAiB3R,KAAK,IAAI2J,GAAW+F,GAAekD,qBAAsBzV,KAAK2S,MAAMgC,WAAWoF,sBAI/G/Z,KAAKuV,0BAGP,OAAOvV,KAAK2S,MAAM6B,kBAMb6E,EAAAnZ,UAAAsZ,oBAAWrT,GAChBnG,KAAK2S,MAAMlM,KAAK5F,MAAM8B,IAAIwD,wBAnK7BwJ,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,wBACVE,SAAU,+/FA+EVD,OAAQ,CAAC,u0BAIR4G,EAAAA,UAAStX,KAAA,CAAC6a,EAAAA,kBAFiCzH,iGCQpB,IAAI0H,6BAGU,WAjBQ5W,EAAAA,EAAAA,GAmB9C6W,EAAAha,UAAA+Q,SAAA,WACEjR,KAAKma,qBAMAD,EAAAha,UAAAuS,qBAAYC,cACjB1S,KAAK2S,MAAMlM,KAAK5F,MAAQ6R,EAAS7R,MAE5Bb,KAAK0U,wBACR1U,KAAKoa,UAAY,IAAIH,MAErBja,KAAKoa,UAAUC,aAAa,cAAe,aAE3Cra,KAAKoa,UAAUE,IAAM5H,EAAS7R,MAG9B0Z,WAAW,WAAQnU,EAAKoU,QAAQC,SAASrU,EAAKgU,YAAe,KAK1DF,EAAAha,UAAA2S,sBACD7S,KAAK2S,MAAMlM,OACbzG,KAAK2S,MAAMlM,KAAK5F,MAAQ,GAExBb,KAAKsZ,kBAAkBC,QAEvBvZ,KAAKwa,QAAQzH,QAEb/S,KAAKoa,UAAY,IAAIH,MAErBja,KAAKgT,0BAKFkH,EAAAha,UAAAwa,oBACD1a,KAAK2a,sBACP3a,KAAK2S,MAAMlM,KAAK5F,MAAQb,KAAK2a,oBAAoBC,cAAcC,aAK5DX,EAAAha,UAAA4a,sCACCC,EAAe/a,KAAKsZ,kBAAkBG,MAAM,GAElD,GAAIsB,EAAc,CAChB/a,KAAKoa,UAAY,IAAIH,MAErB,IAAMe,EAAa,IAAIC,WAGvBjb,KAAK2S,MAAMlM,KAAK5F,MAAQ,cAExBma,EAAWE,UAAY,SAACC,GACtB/U,EAAKgU,UAAUE,IAAMa,EAAUC,OAAOla,OAEtCkF,EAAKoU,QAAQC,SAASrU,EAAKgU,WAE3BhU,EAAKuM,MAAMlM,KAAK5F,MAAQuF,EAAKgU,UAAUE,KAGzCU,EAAWK,cAAcN,KAKrBb,EAAAha,UAAAia,6BACNna,KAAKsb,gBAAkB,IAAIC,EAAAA,gBAE3Bvb,KAAKsb,gBAAgBE,aAAc,EAEnCxb,KAAKsb,gBAAgBG,MAAQzb,KAAKsb,gBAAgBI,aAAe1b,KAAK2S,MAAM2I,gBAAgBG,MAE5Fzb,KAAKsb,gBAAgBK,OAAS3b,KAAKsb,gBAAgBM,cAAgB5b,KAAK2S,MAAM2I,gBAAgBK,OAE9F3b,KAAKsb,gBAAgBO,YAAc7b,KAAK2S,MAAM2I,gBAAgBO,YAE9D7b,KAAKsb,gBAAgBQ,aAAe9b,KAAK2S,MAAM2I,gBAAgBQ,aAE/D9b,KAAKsb,gBAAgBS,SAAW/b,KAAK2S,MAAM2I,gBAAgBS,SAE3D/b,KAAKsb,gBAAgBU,UAAYhc,KAAK2S,MAAM2I,gBAAgBU,UAE5Dhc,KAAKsb,gBAAgBW,QAAUjc,KAAK2S,MAAM2I,gBAAgBW,6BAtL7DtM,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,0BACVE,SAAU,spFAyEVD,OAAQ,CAAC,wfAIR4G,EAAAA,UAAStX,KAAA,CAAC+c,EAAAA,oDAGVzF,EAAAA,UAAStX,KAAA,CAAC,2CAGVsX,EAAAA,UAAStX,KAAA,CAAC6a,EAAAA,kBARmCzH,sFCrERlP,EAAAA,EAAAA,uBAVvCsM,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,iBACVE,SAAU,kNAMVD,OAAQ,CAAC,WAE6B0C,4GC2CA,wBAGD,WALElP,EAAAA,EAAAA,uBAnDxCsM,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,kBACVE,SAAU,ipDA+CVD,OAAQ,CAAC,sFAE8B0C,mBC0BvC,SAAA4J,EACS7S,EACC8S,EACAC,GAHV,IAAAjW,EAKE0Q,EAAApU,KAAA1C,KAAMsJ,IAActJ,YAJboG,EAAAkD,cAAAA,EACClD,EAAAgW,cAAAA,EACAhW,EAAAiW,OAAAA,sBALyB,WALOhZ,EAAAA,EAAAA,GAgBnC8Y,EAAAjc,UAAAsS,4CAEAxS,KAAK2S,MAAM2J,iBAAoBtc,KAAK2S,MAAM2J,gBAAgB3P,UAAa3M,KAAK2S,MAAM2J,gBAAgB1P,WACjG,gBAAiB2P,WACnBA,UAAUC,YAAYC,mBAAmB,SAACC,GACxCtW,EAAKuM,MAAM2J,gBAAkB,CAC3B3P,SAAU+P,EAASC,OAAOhQ,SAC1BC,UAAW8P,EAASC,OAAO/P,cAU9BuP,EAAAjc,UAAAuS,qBAAYC,OACjB,IAAoB,IAAAgD,EAAAC,EAAAjD,EAAS7R,OAAKgV,EAAAH,EAAA3U,QAAA8U,EAAA1U,KAAA0U,EAAAH,EAAA3U,OAAA,CAA7B,IAAMF,EAAKgV,EAAAhV,MACdb,KAAK4c,uBAAuB/b,EAAM8L,SAAU9L,EAAM+L,yHAK/CuP,EAAAjc,UAAA2S,sBACD7S,KAAK2S,MAAMlM,OACbzG,KAAK2S,MAAMlM,KAAK5F,MAAQ,GAExBb,KAAKgT,0BAQFmJ,EAAAjc,UAAAgT,wBAAezM,GACpB,GAAIzG,KAAK2S,MAAMlM,MAAQzG,KAAK2S,MAAMlM,KAAK5F,MACrC,IAAK,IAAIoC,EAAI,EAAGA,EAAIjD,KAAK2S,MAAMlM,KAAK5F,MAAM+B,OAAQK,IAAK,CACrD,IAAMpC,EAAQb,KAAK2S,MAAMlM,KAAK5F,MAAMoC,GAEpCwD,EAAK0M,OAAOnT,KAAK2S,MAAMtF,KAAO,IAAMpK,EAAI,aAAcpC,EAAM8L,UAE5DlG,EAAK0M,OAAOnT,KAAK2S,MAAMtF,KAAO,IAAMpK,EAAI,cAAepC,EAAM+L,WAIjE,OAAOnG,GAMF0V,EAAAjc,UAAA2c,oBAAWvJ,GACXtT,KAAK0U,uBACR1U,KAAK4c,uBAAuBtJ,EAAeqJ,OAAOG,IAAKxJ,EAAeqJ,OAAOI,MAK1EZ,EAAAjc,UAAA8c,0CACDhd,KAAKid,eAEPjd,KAAKoc,cAAcnU,OAAO7G,KAAK,WAC7B,IAAMuR,EAAQvM,EAAKkD,cAAc6B,cAAcyK,aAAagE,KAAK,SAAApY,GAAK,OAAAA,EAAE6L,OAASjH,EAAK6W,cAAcrC,cAAcxN,KAE5G8P,EAAe,IAAIC,OAAOC,KAAKC,OAAOC,aAAalX,EAAK6W,cAAcrC,cAAe,IAC3FsC,EAAaK,YAAY,gBAAiB,WACxCnX,EAAKiW,OAAOmB,IAAI,WAEd,IAAMC,EAAwCP,EAAaQ,WAG3D,GAAID,EAAME,WAAalM,WAAgC,OAAnBgM,EAAME,SAA1C,CAKA,IAAMhR,EAAW8Q,EAAME,SAAS/R,SAASkR,MAEnClQ,EAAY6Q,EAAME,SAAS/R,SAASmR,MAE1CpK,EAAM2J,gBAAkB,CACtB3P,SAAUA,EACVC,UAAWA,GAGb+F,EAAMiL,KAAO,GAEE,IAAIlR,GACjB+Q,EAAME,SAAS/R,SAASkR,MACxBW,EAAME,SAAS/R,SAASmR,MACxBpK,EAAMkL,eAAeC,iBAAiBjR,UACtC8F,EAAMkL,eAAeC,iBAAiBhR,UAGxC1G,EAAKwW,uBAAuBjQ,EAAUC,WAWxCuP,EAAAjc,UAAA0c,gCAAuBjQ,EAAkBC,GAK/C,GAJK5M,KAAK2S,MAAMlM,KAAK5F,QACnBb,KAAK2S,MAAMlM,KAAK5F,MAAQ,IAGM,EAA5Bb,KAAK2S,MAAMgC,WAAWyB,KAAWpW,KAAK2S,MAAMlM,KAAK5F,MAAM+B,OAAS5C,KAAK2S,MAAMgC,WAAWyB,IAAK,CAC7F,IAAM2H,EAAS,IAAIrR,GACjBC,EACAC,EACA5M,KAAK2S,MAAMkL,eAAeC,iBAAiBjR,UAC3C7M,KAAK2S,MAAMkL,eAAeC,iBAAiBhR,UAG7CiR,EAAOvK,cAAgBxT,KAAK2S,MAAMkL,eAAeC,iBAAiBtK,cAElExT,KAAK2S,MAAMlM,KAAK5F,MAAMgC,KAAKkb,KAQxB5B,EAAAjc,UAAA8d,8BAAqBD,EAAgBzK,GAC1CyK,EAAOpR,SAAW2G,EAAeqJ,OAAOG,IACxCiB,EAAOnR,UAAY0G,EAAeqJ,OAAOI,yBAtN5CpN,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,qBACVE,SAAU,4rEA8DVD,OAAQ,CAAC,wfArEF5Q,SACYgf,EAAAA,qBAHsBC,EAAAA,iDA2ExCzH,EAAAA,UAAStX,KAAA,CAAC,gBAF+BoT,4GCVJ,wBAGD,WARClP,EAAAA,EAAAA,GAa/B8a,EAAAje,UAAAke,oBAAWC,GAChBre,KAAKse,UAAUC,MAAQF,EAEvBre,KAAKse,UAAUE,WAEfxe,KAAKse,UAAUG,eAAe7D,cAAc8D,OAE5C1e,KAAKse,UAAUG,eAAe7D,cAAc+D,SAMvCR,EAAAje,UAAA0e,yBAAgB/d,GACrBb,KAAKse,UAAUO,WAAWhe,wBAjF7B8O,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,iBACVE,SAAU,62DAkDVD,OAAQ,CAAC,2CAIR4G,EAAAA,UAAStX,KAAA,CAAC2f,EAAAA,iBAF2BvM,IC1DxCwM,GAAA,WA4BE,SAAAA,EACS7O,EAEAyC,GAFA3S,KAAAkQ,UAAAA,EAEAlQ,KAAA2S,MAAAA,SAOToM,EAAA7e,UAAA8e,SAAA,SAASC,EAA2CC,yBAjCrDvP,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,iCACVE,SAAU,kbAeVD,OAAQ,CAAC,iDArBFgB,EAAAA,oBAEAxE,GAAKqE,WAAA,CAAA,CAAA/J,KA2BTgK,EAAAA,OAAMxR,KAAA,CAACyR,EAAAA,oEAJT6F,EAAAA,UAAStX,KAAA,CAAC,oBA1Bb,kBCkDE,SAAAggB,EACS7V,EACCyH,GAFV,IAAA3K,EAIE0Q,EAAApU,KAAA1C,KAAMsJ,IAActJ,YAHboG,EAAAkD,cAAAA,EACClD,EAAA2K,OAAAA,sBAJyB,WAFW1N,EAAAA,EAAAA,GAY9C8b,EAAAjf,UAAAkf,WAAA,WACwBpf,KAAK+Q,OAAOQ,KAAKwN,GAAkC,CACvEtY,KAAMzG,KAAK2S,QAGCnB,cAAchJ,UAAU,SAAAtH,GACpCqW,QAAQ8H,IAAIne,0BA1DjByO,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,0BACVE,SAAU,q7BAoCVD,OAAQ,CAAC,iDA1CF5Q,SAEA4S,EAAAA,gBA0CuCU,yGCcX,WAFUlP,EAAAA,EAAAA,GAKtCic,EAAApf,UAAA2S,sBACD7S,KAAK2S,MAAMlM,OACbzG,KAAK2S,MAAMlM,KAAK5F,MAAQ,GAExBb,KAAK8S,QAAQC,QAEb/S,KAAKgT,0BAQFsM,EAAApf,UAAAgT,wBAAezM,GACpB,GAAIzG,KAAK2S,MAAMlM,MAAQzG,KAAK2S,MAAMlM,KAAK5F,MACrC,IAAK,IAAIoC,EAAI,EAAGA,EAAIjD,KAAK2S,MAAMlM,KAAK5F,MAAM+B,OAAQK,IAAK,CACrD,IAAMpC,EAAQb,KAAK2S,MAAMlM,KAAK5F,MAAMoC,GAEpCwD,EAAK0M,OAAOnT,KAAK2S,MAAMtF,KAAO,IAAMpK,EAAI,OAAQpC,EAAMuM,IAI1D,OAAO3G,uBAnFVkJ,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,yBACVE,SAAU,01DAmDVD,OAAQ,CAAC,wqBAEoC8G,4GCDP,WAFOtT,EAAAA,EAAAA,uBApD9CsM,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,wBACVE,SAAU,8uDAgDVD,OAAQ,CAAC,uCAEoC8G,4GCNP,WAFEtT,EAAAA,EAAAA,GAKjCkc,EAAArf,UAAAsS,iCACDxS,KAAK0U,wBACP1U,KAAK2S,MAAM6M,UAAW,GAGnBxf,KAAK2S,MAAM8M,kBACdzf,KAAK2S,MAAM8M,gBAAkB,cAG1Bzf,KAAK2S,MAAM+M,cACd1f,KAAK2S,MAAM+M,YAAc,cAGtB1f,KAAK2S,MAAMgN,eACd3f,KAAK2S,MAAMgN,aAAe,qCA/D/BhQ,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,mBACVE,SAAU,66CAwCVD,OAAQ,CAAC,WAE+B0C,4GCSF,WAFElP,EAAAA,EAAAA,GAQjCuc,EAAA1f,UAAAgT,wBAAezM,GAKpB,OAJIzG,KAAK2S,MAAMlM,MAAQzG,KAAK2S,MAAMlM,KAAK5F,OACrC4F,EAAK0M,OAAOnT,KAAK2S,MAAMtF,KAAO,MAAOrN,KAAK2S,MAAMlM,KAAK5F,MAAMuM,IAGtD3G,uBAhEVkJ,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,mBACVE,SAAU,oqDA+CVD,OAAQ,CAAC,+VAE+B8G,mBCGxC,SAAAkJ,EACSvW,EACCuN,GAFV,IAAAzQ,EAIE0Q,EAAApU,KAAA1C,KAAMsJ,IAActJ,YAHboG,EAAAkD,cAAAA,EACClD,EAAAyQ,iBAAAA,yBAJ4B,WAFAxT,EAAAA,EAAAA,GAY/Bwc,EAAA3f,UAAAsS,iCACLxS,KAAK2S,MAAMlM,KAAK5F,MAAQb,KAAK6W,iBAAiBnN,0BAA0B1J,KAAK2S,MAAMmN,QAAS9f,KAAK2S,MAAMmN,UAIlGD,EAAA3f,UAAA2S,sBACD7S,KAAK2S,MAAMlM,OACbzG,KAAK2S,MAAMlM,KAAK5F,MAAQb,KAAK6W,iBAAiBnN,0BAA0B1J,KAAK2S,MAAMmN,QAAS9f,KAAK2S,MAAMmN,WAQpGD,EAAA3f,UAAAgT,wBAAezM,GAWpB,OAVIzG,KAAK2S,MAAMlM,MAAQzG,KAAK2S,MAAMlM,KAAK5F,QACrC4F,EAAK0M,OAAOnT,KAAK2S,MAAMtF,KAAO,QAASrN,KAAK2S,MAAMlM,KAAK5F,MAAM4N,MAE7DhI,EAAK0M,OAAOnT,KAAK2S,MAAMtF,KAAO,UAAWrN,KAAK2S,MAAMlM,KAAK5F,MAAM6N,QAE/DjI,EAAK0M,OAAOnT,KAAK2S,MAAMtF,KAAO,WAAYrN,KAAK2S,MAAMlM,KAAK5F,MAAMqQ,SAEhEzK,EAAK0M,OAAOnT,KAAK2S,MAAMtF,KAAO,UAAWrN,KAAK2S,MAAMlM,KAAK5F,MAAM0N,SAG1D9H,GAMFoZ,EAAA3f,UAAA6f,iCAAwBrN,GAC7B1S,KAAK2S,MAAMlM,KAAK5F,MAAQ6R,uBA7F3B/C,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,iBACVE,SAAU,yvDA4CVD,OAAQ,CAAC,8oBAjDF5Q,SACAoK,QAkD+BkJ,mBCHtC,SAAAyN,EACS1W,EACCG,GAFV,IAAArD,EAIE0Q,EAAApU,KAAA1C,KAAMsJ,IAActJ,YAHboG,EAAAkD,cAAAA,EACClD,EAAAqD,gBAAAA,WATiCpG,EAAAA,EAAAA,GAepC2c,EAAA9f,UAAA2S,sBACL7S,KAAKigB,SAAU,EAEfjgB,KAAKgT,yBAQAgN,EAAA9f,UAAA0S,kBAASU,EAAsBwB,GAiBpC,OAhBA9U,KAAK+U,YAAYD,GAEb9U,KAAKgV,mBACHhV,KAAK2S,MAAMgC,WAAWC,WACnBE,IACH9U,KAAKigB,QAA4B,MAAlB3M,GAGZtT,KAAKigB,SACRjgB,KAAK2S,MAAM6B,iBAAiB3R,KAAK,IAAI2J,GAAW+F,GAAekD,qBAAsBzV,KAAK2S,MAAMgC,WAAWmB,gBAI/G9V,KAAKuV,2BAGAvV,KAAK2S,MAAM6B,kBAIbwL,EAAA9f,UAAAggB,6BACL,IAAMrX,EAAW7I,KAAKyJ,gBAAgBT,cAEtC,GAAIhJ,KAAKmgB,iBAAkB,CACzB,IAAMC,EAAgBpgB,KAAKmgB,iBAAiBE,WAAWzF,cAAc0F,cAAc,UAEnF,GAAIF,EAAe,CACjB,IAAM9F,EAAM8F,EAAcG,aAAa,OAEvCH,EAAc/F,aAAa,MAAOC,EAAIvQ,QAAQ,YAAa,MAAQlB,EAAW,OAIlF7I,KAAKigB,SAAU,EAEfjgB,KAAKgT,6CAnGRrD,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,sBACVE,SAAU,kgCAiCVD,OAAQ,CAAC,iDAvCF5Q,SACAoJ,+CA0CNoO,EAAAA,UAAStX,KAAA,CAAC,mBAFgCoT,IC3C7CiO,GAAA,WAsBE,SAAAA,EACSlX,GAAAtJ,KAAAsJ,cAAAA,SAMFkX,EAAAtgB,UAAAugB,0BAAiBC,GACtB,IAAIC,EAAe3gB,KAAKsJ,cAAc6B,cAAckJ,eAAejH,GAAKsT,EAEnD,IAAjBC,EACFA,EAAe3gB,KAAKsJ,cAAc6B,cAAcgJ,SAASvR,OAChD+d,IAAiB3gB,KAAKsJ,cAAc6B,cAAcgJ,SAASvR,OAAS,IAC7E+d,EAAe,GAGjB3gB,KAAKsJ,cAAc6B,cAAckJ,eAAiBrU,KAAKsJ,cAAc6B,cAAcgJ,SAASyF,KAAK,SAAAgH,GAAK,OAAAA,EAAExT,KAAOuT,yBAnClHhR,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,4BACVE,SAAU,8bAcVD,OAAQ,CAAC,wwBAlBF5Q,OADT,GCAA4hB,GAAA,WAwBE,SAAAA,EACSvX,GAAAtJ,KAAAsJ,cAAAA,SAMFuX,EAAA3gB,UAAA4gB,uBAAcC,GACnB/gB,KAAKsJ,cAAc6B,cAAckJ,eAAiB0M,uBA5BrDpR,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,mBACVE,SAAU,2fAeVD,OAAQ,CAAC,iDApBF5Q,OADT,GCAA+hB,GAAA,WA4BE,SAAAA,EACS1X,EACCG,EACAwX,GAFDjhB,KAAAsJ,cAAAA,EACCtJ,KAAAyJ,gBAAAA,EACAzJ,KAAAihB,kBAAAA,SAIVD,EAAA9gB,UAAAghB,iBAAA,WACMlhB,KAAKsJ,cAAc6B,cAAcC,SAAS+V,wBAA0BC,EAAuBC,QAC7FrhB,KAAKihB,kBAAkBK,gBAEvBC,EAAK,CACHnc,KAAMpF,KAAKwhB,yBAAyB5G,cAAc6G,UAClD9a,KAAM+a,GAAUC,QAChBC,kBAAmB5hB,KAAKyJ,gBAAgBb,aAAaiZ,QAAQC,2BApCpEnS,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,yBACVE,SAAU,ilBAcVD,OAAQ,CAAC,4QArBF5Q,SACAoJ,SAFkC0Z,EAAAA,uEA0BxCtL,EAAAA,UAAStX,KAAA,CAAC,0BA1Bb,GCAA6iB,GAAA,oDAECrS,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,yBACVE,SAAU,8OASVD,OAAQ,CAAC,kDAIRE,EAAAA,MAAK5Q,KAAA,CAAC,yBAjBT,iBCgUE,SAAA8iB,EACS3Y,EACCC,EACAC,EACAqN,EACAD,EACAnN,EACAwX,EACAjQ,EACYlG,GARb9K,KAAAsJ,cAAAA,EACCtJ,KAAAuJ,oBAAAA,EACAvJ,KAAAwJ,oBAAAA,EACAxJ,KAAA6W,iBAAAA,EACA7W,KAAA4W,iBAAAA,EACA5W,KAAAyJ,gBAAAA,EACAzJ,KAAAihB,kBAAAA,EACAjhB,KAAAgR,cAAAA,EACYhR,KAAA8K,MAAAA,mBAzFE,IAAIiD,EAAAA,gCAGF,IAAIA,EAAAA,kCAGF,IAAIA,EAAAA,iCAGL,IAAIA,EAAAA,sCAGC,IAAIA,EAAAA,qCAGL,IAAIA,EAAAA,kCAyDa,IAAIpO,yBAGd,IAAIuM,8BAGF,SAcxC+V,EAAA/hB,UAAA+Q,SAAA,WACEjR,KAAKsJ,cAAcqK,gBAAkB3T,KAAK2T,gBAED,iBAA9B3T,KAAK+K,uBACd/K,KAAK+K,qBAAuBjD,KAAKI,MAAMlI,KAAK+K,uBAG9C/K,KAAKsJ,cAAcyB,qBAAuB/K,KAAK+K,qBAE/C/K,KAAKkiB,YAMAD,EAAA/hB,UAAAiiB,mBAAUC,OACf,IAA6B,IAAA1M,EAAAC,EAAA3V,KAAKqiB,iBAAexM,EAAAH,EAAA3U,QAAA8U,EAAA1U,KAAA0U,EAAAH,EAAA3U,OAAA,CAAxB8U,EAAAhV,MACRgS,0HAGjB7S,KAAKmL,cAAcqJ,iBAAmB,IAAI7U,MAE1CK,KAAKsiB,YAAY7S,QAMZwS,EAAA/hB,UAAAqiB,kBAASH,sBAEd,IAAuC,IAAA1M,EAAAC,EAAA3V,KAAKwiB,yBAAyBC,WAAS5M,EAAAH,EAAA3U,QAAA8U,EAAA1U,KAAA0U,EAAAH,EAAA3U,OAAA,CAA3C8U,EAAAhV,MACR+R,SAAS,MAAM,wGAG1C,GAAI5S,KAAK0iB,cAAe,CACtB1iB,KAAK2iB,uBAAwB,EAE7B,IAAMC,EAAS5iB,KAAK6iB,iBAEpB7iB,KAAK8iB,gBAAgBrT,KAAKmT,GAE1BrL,QAAQ8H,IAAIuD,GAEZ,IAAM3L,EAAWjX,KAAK6W,iBAAiBjM,cACrC5K,KAAKmL,cAAc+L,UAAUrP,KAC7B7H,KAAK8K,MACL9K,KAAKsJ,cAAcyB,sBAGrB/K,KAAKuJ,oBAAoBnC,KAAK6P,EAAU2L,GAAQpa,UAAU,SAAAmF,GACxD4J,QAAQ8H,IAAI1R,GAEZvH,EAAK2c,eAAetT,KAAK,IAAIhC,IAAkB,EAAME,EAAUiV,IAE/Dxc,EAAKuc,uBAAwB,EAEzBvc,EAAK+E,cAAc6X,cAAcC,mBACnC1B,EAAK,CACH2B,MAAO9c,EAAK4K,cAAc9B,UAAU9I,EAAK+E,cAAc6X,cAAcG,yBACrE/d,KAAMgB,EAAK4K,cAAc9B,UAAU9I,EAAK+E,cAAc6X,cAAcI,2BACpEzc,KAAM+a,GAAU2B,QAChBzB,kBAAmBxb,EAAKqD,gBAAgBb,aAAaiZ,QAAQC,MAGhE,SAAAxK,GACDC,QAAQC,MAAM,aAAcF,GAE5BlR,EAAK2c,eAAetT,KAAK,IAAIhC,IAAkB,EAAO6J,EAAWsL,IAEjExc,EAAKuc,uBAAwB,EAEzBvc,EAAK+E,cAAc6X,cAAcC,mBACnC1B,EAAK,CACH2B,MAAO9c,EAAK4K,cAAc9B,UAAU9I,EAAK+E,cAAc6X,cAAcM,uBACrEle,KAAMgB,EAAK4K,cAAc9B,UAAU9I,EAAK+E,cAAc6X,cAAcO,yBACpE5c,KAAM+a,GAAU8B,MAChB5B,kBAAmBxb,EAAKqD,gBAAgBb,aAAaiZ,QAAQC,SAUhEG,EAAA/hB,UAAAujB,oBAAWrB,cAGhB,GAFApiB,KAAK0jB,eAED1jB,KAAK0iB,cAAe,CACtB1iB,KAAK2iB,uBAAwB,EAE7B,IAAMgB,EAAS3jB,KAAK6iB,iBAEpB7iB,KAAK4jB,oBAAoBnU,KAAKkU,GAE9BpM,QAAQ8H,IAAIsE,GAEZ,IAAM1M,EAAWjX,KAAK6W,iBAAiBjM,cACrC5K,KAAKmL,cAAc+L,UAAU1G,OAC7BxQ,KAAK8K,MACL9K,KAAKsJ,cAAcyB,sBAGrB/K,KAAKuJ,oBAAoBnC,KAAK6P,EAAU0M,GAAQnb,UAAU,SAAAmF,GACxD4J,QAAQ8H,IAAI1R,GAEZvH,EAAKyd,mBAAmBpU,KAAK,IAAIhC,IAAkB,EAAME,EAAUgW,IAEnEvd,EAAKuc,uBAAwB,EAEzBvc,EAAK+E,cAAc6X,cAAcC,mBACnC1B,EAAK,CACH2B,MAAO9c,EAAK4K,cAAc9B,UAAU9I,EAAK+E,cAAc6X,cAAcc,2BACrE1e,KAAMgB,EAAK4K,cAAc9B,UAAU9I,EAAK+E,cAAc6X,cAAce,6BACpEpd,KAAM+a,GAAU2B,QAChBzB,kBAAmBxb,EAAKqD,gBAAgBb,aAAaiZ,QAAQC,MAGhE,SAAAxK,GACDC,QAAQC,MAAM,eAAgBF,GAE9BlR,EAAKyd,mBAAmBpU,KAAK,IAAIhC,IAAkB,EAAO6J,EAAWqM,IAErEvd,EAAKuc,uBAAwB,EAEzBvc,EAAK+E,cAAc6X,cAAcC,mBACnC1B,EAAK,CACH2B,MAAO9c,EAAK4K,cAAc9B,UAAU9I,EAAK+E,cAAc6X,cAAcgB,yBACrE5e,KAAMgB,EAAK4K,cAAc9B,UAAU9I,EAAK+E,cAAc6X,cAAciB,2BACpEtd,KAAM+a,GAAU8B,MAChB5B,kBAAmBxb,EAAKqD,gBAAgBb,aAAaiZ,QAAQC,YAKnE9hB,KAAKkkB,2BAA2BhD,oBAK7Be,EAAA/hB,UAAAwjB,4BACL,IAA6B,IAAAhO,EAAAC,EAAA3V,KAAKqiB,iBAAexM,EAAAH,EAAA3U,QAAA8U,EAAA1U,KAAA0U,EAAAH,EAAA3U,OAAA,CAA5C,IAAMojB,EAActO,EAAAhV,MACvBb,KAAKokB,2BAA2BD,iHAO7BlC,EAAA/hB,UAAAwiB,uBACL,OAAQ1iB,KAAKmL,cAAcqJ,kBAAmE,IAA/CxU,KAAKmL,cAAcqJ,iBAAiB5R,QAM9Eqf,EAAA/hB,UAAA2iB,0BACL,OAAI7iB,KAAKmL,cAAcC,SAASiZ,WAAaC,GAAUC,SAC9CvkB,KAAKwkB,cAELxkB,KAAKykB,iBAOTxC,EAAA/hB,UAAAukB,yBACL,QAAMC,EAAS,OAEf,IAA6B,IAAAhP,EAAAC,EAAA3V,KAAKqiB,iBAAexM,EAAAH,EAAA3U,QAAA8U,EAAA1U,KAAA0U,EAAAH,EAAA3U,OAAA,CAA5C,IAAMojB,EAActO,EAAAhV,MACnBsjB,EAAexR,MAAMlM,OACvBie,EAAOP,EAAexR,MAAMtF,MAAQ8W,EAAelR,iHAIvD,OAAOyR,GAMFzC,EAAA/hB,UAAAskB,uBACL,QAAI/d,EAAO,IAAI8d,aAEf,IAA6B,IAAA7O,EAAAC,EAAA3V,KAAKqiB,iBAAexM,EAAAH,EAAA3U,QAAA8U,EAAA1U,KAAA0U,EAAAH,EAAA3U,OAAA,CAC/C0F,EADuBoP,EAAAhV,MACDqS,eAAezM,wGAGvC,OAAOA,GAOFwb,EAAA/hB,UAAAykB,sBAAatX,GAClB,OAAOrN,KAAKqiB,gBAAgBzI,KAAK,SAAAgL,GAAM,OAAAA,EAAGjS,MAAMtF,OAASA,KAOpD4U,EAAA/hB,UAAA2kB,wBAAeC,GACpB,OAAQA,GAAUA,EAAO/Q,QAAY/T,KAAKmL,cAAckJ,gBACtDrU,KAAKmL,cAAckJ,eAAe0Q,cACoC,EAAtE/kB,KAAKmL,cAAckJ,eAAe0Q,YAAYnb,QAAQkb,EAAOzX,OAO1D4U,EAAA/hB,UAAA8kB,qBAAYC,OACjB,IAA4B,IAAAvP,EAAAC,EAAAsP,EAASC,QAAMrP,EAAAH,EAAA3U,QAAA8U,EAAA1U,KAAA0U,EAAAH,EAAA3U,OAAA,CAAtC,IAAMokB,EAAatP,EAAAhV,MACtB,GAAIskB,EAActkB,MAAO,CACvB,IAAMsjB,EAAiBnkB,KAAK2kB,aAAaQ,EAAc9X,MAEnD8W,GACFA,EAAe1R,YAAY0S,kHAOrBlD,EAAA/hB,UAAAgiB,2IACZ,MAAA,CAAA,EAAMliB,KAAKolB,4BAAXC,EAAAvjB,OAGMwjB,EAAatlB,KAAKmL,cAAcyK,aAAa2P,OAAO,SAAA/jB,GAAK,OAAAA,EAAEgkB,YAAcC,GAAWC,eAE1F,IAAoBC,EAAAhQ,EAAA2P,GAAUM,EAAAD,EAAA5kB,QAAA6kB,EAAAzkB,KAAAykB,EAAAD,EAAA5kB,OAAnB4R,EAAKiT,EAAA/kB,MACdb,KAAK6lB,8BAA8BlT,uGAGrC3S,KAAKihB,kBAAkBK,gBAEvBthB,KAAKqiB,gBAAkBriB,KAAKqiB,gBAAgBxO,OAC1C7T,KAAK8lB,qBAAqBrD,UAC1BziB,KAAK+lB,sBAAsBtD,UAC3BziB,KAAKgmB,wBAAwBvD,UAC7BziB,KAAKimB,6BAA6BxD,UAClCziB,KAAKkmB,wBAAwBzD,UAC7BziB,KAAKmmB,2BAA2B1D,UAChCziB,KAAKomB,2BAA2B3D,UAChCziB,KAAKqmB,qBAAqB5D,UAC1BziB,KAAKsmB,sBAAsB7D,UAC3BziB,KAAKumB,oBAAoB9D,UACzBziB,KAAKwmB,oBAAoB/D,UACzBziB,KAAKymB,wBAAwBhE,UAC7BziB,KAAK0mB,0BAA0BjE,UAC/BziB,KAAK2mB,4BAA4BlE,UACjCziB,KAAKwiB,yBAAyBC,UAC9BziB,KAAK4mB,sBAAsBnE,WAG7BziB,KAAKwS,wBAELxS,KAAK6mB,mBAEL,IAA6BnR,EAAAC,EAAA3V,KAAKymB,wBAAwBhE,WAAS5M,EAAAH,EAAA3U,QAAA8U,EAAA1U,KAAA0U,EAAAH,EAAA3U,OAA1C8U,EAAAhV,MACRmc,iIAGjBhd,KAAK4W,iBAAiBrO,aAAaC,UAAU,SAAAmF,GACvCvH,EAAK+E,cAAcC,SAASkL,WAAaC,EAAUC,SACrDpQ,EAAKygB,mBAGP,IAA6B,IAAAnR,EAAAC,EAAAvP,EAAKoc,yBAAyBC,WAAS5M,EAAAH,EAAA3U,QAAA8U,EAAA1U,KAAA0U,EAAAH,EAAA3U,OAAA,CAA3C8U,EAAAhV,MACRqf,6IAMP+B,EAAA/hB,UAAAklB,yIACS,MAAA,CAAA,GAArB1P,EAAA1V,MAAgC6W,iBAAiBxM,SAASrK,KAAK8mB,mCAA/DpR,EAAKvK,cAAgB0K,EAAA/T,OAGhB9B,KAAKmL,cAAcb,QAApB,MAAA,CAAA,EAAA,OAEEtK,KAAKmL,cAAcC,SAAS2b,kBAA5B,MAAA,CAAA,EAAA,GACO9jB,EAAIjD,KAAKmL,cAAcC,SAAS2b,kBAAkBnkB,OAAS,0BAAQ,GAALK,GAE/D+jB,EAAsBhnB,KAAKmL,cAAcC,SAAS2b,kBAAkB9jB,GAEjD,CAAA,EAAMjD,KAAK6W,iBAAiBxM,SAAS2c,kBAAxDC,EAAmBpR,EAAA/T,OAEzB9B,KAAKmL,cAAgBnL,KAAK6W,iBAAiBrM,eAAeyc,EAAkBjnB,KAAKmL,uCANJlI,iBAU/D,MAAA,CAAA,EAAMjD,KAAK6W,iBAAiBxM,SAASrK,KAAKmL,cAAcC,SAAS8b,yBASnF,IAAWC,KATLC,EAAYvR,EAAA/T,QAEHwI,SACbtK,KAAKwJ,oBAAoB3B,KAAK7H,KAAKmL,cAAcC,SAAS8b,gBAAiBE,GAG7EpnB,KAAKmL,cAAcyK,aAAe,IAAIjW,iBAG3BwnB,GACT,GAAIE,EAAKlc,cAAc+Z,OAAOrlB,eAAesnB,GAAY,CACvD,IAAMG,EAAcF,EAAUlC,OAAOtL,KAAK,SAAApY,GAAK,OAAAA,EAAE6L,OAAS8Z,IAE1D,GAAIG,EAAa,CACf,IAAMC,EAAcF,EAAKxQ,iBAAiBrM,eAAe8c,EAAaD,EAAKlc,cAAc+Z,OAAOiC,IAEhGE,EAAKlc,cAAcyK,aAAa/S,KAAK0kB,QAErChQ,QAAQiQ,KAAK,aAAaL,EAAS,qDATZhc,cAAc+Z,SAAhCiC,GAcXnnB,KAAKwJ,oBAAoB3B,KAAK7H,KAAK8mB,uBAAwB9mB,KAAKmL,uCAG9DnL,KAAKmL,cAAcgJ,UAAiD,EAArCnU,KAAKmL,cAAcgJ,SAASvR,SAC7D5C,KAAKmL,cAAckJ,eAAiBrU,KAAKmL,cAAcgJ,SAAS,IAGlEnU,KAAKsJ,cAAc6B,cAAgBnL,KAAKmL,wBAIlC8W,EAAA/hB,UAAAsS,qCACN,IAA6B,IAAAkD,EAAAC,EAAA3V,KAAKqiB,iBAAexM,EAAAH,EAAA3U,QAAA8U,EAAA1U,KAAA0U,EAAAH,EAAA3U,OAAA,CAAxB8U,EAAAhV,MACR2R,sIAQXyP,EAAA/hB,UAAA2lB,uCAA8BlT,GAEhCA,EAAM4F,UACR5F,EAAM6F,aAAexY,KAAK6W,iBAAiBnN,0BAA0BiJ,EAAM4F,QAAS,IAAItT,KAAK0N,EAAM4F,WAGjG5F,EAAM8F,UACR9F,EAAM+F,aAAe1Y,KAAK6W,iBAAiBnN,0BAA0BiJ,EAAM8F,QAAS,IAAIxT,KAAK0N,EAAM8F,WAGjG9F,EAAMlM,KAAKkS,YACbhG,EAAMlM,KAAK5F,MAAQb,KAAK6W,iBAAiBnN,0BAA0BiJ,EAAMlM,KAAKkS,UAAW,IAAI1T,KAAK0N,EAAMlM,KAAKkS,aAG3GhG,EAAM8U,cACR9U,EAAM+U,iBAAmB1nB,KAAK6W,iBAAiBnN,0BAA0BiJ,EAAM8U,YAAa,IAAIxiB,KAAK0N,EAAM8U,eAGzG9U,EAAM6F,cAAgB7F,EAAM+F,eAC9B/F,EAAMgV,UAAYhV,EAAM6F,aAAaoP,cAAgB,IAAMjV,EAAM+F,aAAakP,gBAK1E3F,EAAA/hB,UAAA2mB,mCACN,GAAI7mB,KAAKmL,cAAc+L,UAAUnQ,IAAK,CACpC,IAAMkQ,EAAWjX,KAAK6W,iBAAiBjM,cACrC5K,KAAKmL,cAAc+L,UAAUnQ,IAC7B/G,KAAK8K,MACL9K,KAAKsJ,cAAcyB,sBAGrB/K,KAAKuJ,oBAAoBxC,IAAIkQ,GAAUzO,UAAU,SAAAmF,GAC/CvH,EAAK4e,YAAYrX,GAEjBvH,EAAKyhB,cAAcpY,KAAK9B,GAExBvH,EAAKuc,uBAAwB,GAC5B,SAAArL,GACDC,QAAQC,MAAM,iBAAkBF,GAEhClR,EAAKuc,uBAAwB,EAEzBvc,EAAK+E,cAAc6X,cAAcC,mBACnC1B,EAAK,CACH2B,MAAO9c,EAAK4K,cAAc9B,UAAU9I,EAAK+E,cAAc6X,cAAc8E,sBACrE1iB,KAAMgB,EAAK4K,cAAc9B,UAAU9I,EAAK+E,cAAc6X,cAAc+E,wBACpEphB,KAAM+a,GAAU8B,MAChB5B,kBAAmBxb,EAAKqD,gBAAgBb,aAAaiZ,QAAQC,YAKnE9hB,KAAK6nB,cAAcpY,KAAK,MAExBzP,KAAK2iB,uBAAwB,GAQzBV,EAAA/hB,UAAAkkB,oCAA2BD,GACjC,IAAI6D,EAAwB,IAAIroB,MAMhC,OAJKwkB,EAAexR,MAAMoB,SACxBiU,EAAwB7D,EAAevR,SAAS,MAAM,IAGjDoV,GAQF/F,EAAA/hB,UAAAkT,6BAAoBC,EAAmBC,EAAqBC,GACjE,GAAIA,EAAOC,cAAe,CACxB,IAAMC,EAAQF,EAAOC,cAAcH,GAE7BK,EAA6B1T,KAAK2T,gBAAgBF,GAEpDC,GACFA,EAA2B1T,KAAK2T,gBAAiBJ,yBAhtBxD5D,EAAAA,UAASxQ,KAAA,CAAC,CACTyQ,SAAU,mBACVE,SAAU,sqPAyLVD,OAAQ,CAAC,2mBACT8B,UAAW,CAACC,EAAAA,cAAe3S,EAAeoK,GAE1C4e,cAAeC,EAAAA,kBAAkBhU,kDAxN1BjV,SAJA4H,SACAW,SACA6B,SAJAJ,EAAAA,wBAKAZ,SARP0Z,EAAAA,yBAGyBnQ,EAAAA,qBAClB6F,EAAAA,eAAc/G,WAAA,CAAA,CAAA/J,KAmUlB+Q,EAAAA,8DAlGF3H,EAAAA,MAAK5Q,KAAA,CAAC,mDAGN4Q,EAAAA,MAAK5Q,KAAA,CAAC,iDAGN4Q,EAAAA,MAAK5Q,KAAA,CAAC,6CAGN6Q,EAAAA,8BAGAA,EAAAA,gCAGAA,EAAAA,+BAGAA,EAAAA,oCAGAA,EAAAA,mCAGAA,EAAAA,iCAGAyG,EAAAA,UAAStX,KAAA,CAAC,iDAGVsX,EAAAA,UAAStX,KAAA,CAAC6hB,kCAGVmH,EAAAA,aAAYhpB,KAAA,CAACipB,mCAGbD,EAAAA,aAAYhpB,KAAA,CAACygB,qCAGbuI,EAAAA,aAAYhpB,KAAA,CAAC0Y,0CAGbsQ,EAAAA,aAAYhpB,KAAA,CAACmZ,qCAGb6P,EAAAA,aAAYhpB,KAAA,CAACwY,wCAGbwQ,EAAAA,aAAYhpB,KAAA,CAACkpB,wCAGbF,EAAAA,aAAYhpB,KAAA,CAACmgB,kCAGb6I,EAAAA,aAAYhpB,KAAA,CAACyY,mCAGbuQ,EAAAA,aAAYhpB,KAAA,CAACga,iCAGbgP,EAAAA,aAAYhpB,KAAA,CAACgf,iCAGbgK,EAAAA,aAAYhpB,KAAA,CAAC0gB,qCAGbsI,EAAAA,aAAYhpB,KAAA,CAACgd,uCAGbgM,EAAAA,aAAYhpB,KAAA,CAACka,yCAGb8O,EAAAA,aAAYhpB,KAAA,CAAC+a,sCAGbiO,EAAAA,aAAYhpB,KAAA,CAAC6gB,mCAGbmI,EAAAA,aAAYhpB,KAAA,CAACogB,YCrThB+I,GAAA,oDAiECC,EAAAA,SAAQppB,KAAA,CAAC,CACRqpB,aAAc,CACZ1X,GACAb,GACAjC,GACA8D,GACAS,GACAoE,GACAyR,GACAxI,GACA/H,GACAS,GACAX,GACA0Q,GACA/I,GACA1H,GACAuB,GACAgF,GACA0B,GACA1D,GACA9C,GACA2G,GACAyI,GACAtJ,GACAjF,GACAqF,GACAsB,GACAL,GACAQ,GACAgB,GACAjD,GACAkD,IAEFyG,QAAS,CACPC,EAAAA,aACAC,EAAAA,cACAC,EAAAA,YACAC,EAAAA,wBACAC,EAAAA,iBACAC,EAAAA,gBACAC,EAAAA,eACAC,EAAAA,eACAC,EAAAA,kBACAC,EAAAA,iBACAC,EAAAA,aACAC,EAAAA,gBACAC,EAAAA,YACAC,EAAAA,eACAC,EAAAA,kBACAC,EAAAA,gBACAC,EAAAA,iBACAC,EAAAA,eACAC,EAAAA,kBACAC,EAAAA,gBACAC,EAAAA,sBACAC,EAAAA,mBACAC,EAAAA,cACAC,EAAAA,gBACAC,EAAAA,mBACAC,EAAAA,aACAC,EAAAA,sBACAC,EAAAA,gBAAgBC,UAChBC,EAAAA,UAAUD,UACVE,EAAAA,gBAAgBF,QAAQ,CACtBG,OAAQ,CACN3R,QAAS4R,EAAAA,gBACTC,WAAYC,GACZC,KAAM,CAACvjB,EAAAA,eAGXwjB,EAAAA,cAAcR,QAAQ,CACpBS,OAAQ,0CACRC,UAAW,CAAC,UACZC,OAAQ,KACRriB,SAAU,QAGdsiB,gBAAiB,CACfpM,GACAjO,GACAb,IAEFmb,QAAS,CACPta,GACAb,GACAjC,GACA8D,GACAS,GACAoE,GACAyR,GACAxI,GACA/H,GACAS,GACAX,GACA0Q,GACA/I,GACA1H,GACAuB,GACAgF,GACA0B,GACA1D,GACA9C,GACA2G,GACAyI,GACAtJ,GACAjF,GACAqF,GACAsB,GACAL,GACAQ,GACAgB,GACAjD,GACAkD,UAjLJ,GAsLA,SAAA4I,GAAkCQ,GAChC,OAAO,IAAIC,EAAAA,oBAAoBD","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Configuration } from '../models';\r\nimport { NetwaysLibModule } from '../netways-lib.module';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class BridgeService {\r\n  /** @property The configuration.*/\r\n  public configuration: Configuration;\r\n\r\n  /** @property The parent component hosting the dynamic form.*/\r\n  public parentComponent: any;\r\n\r\n  /** @property The additional parameters.*/\r\n  public additionalParameters: any;\r\n\r\n  constructor() { }\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { NgbDateStruct, NgbDatepickerI18n } from '@ng-bootstrap/ng-bootstrap';\r\n\r\nconst I18N_VALUES = {\r\n  weekdays: ['Ø¥Ø«', 'Ø«Ù', 'Ø£Ø±', 'Ø®Ù', 'Ø¬Ù', 'Ø³Ø¨', 'Ø£Ø­'],\r\n  months: ['ÙØ­Ø±Ù', 'ØµÙØ±', 'Ø±Ø¨ÙØ¹ Ø§ÙØ£ÙÙ', 'Ø±Ø¨ÙØ¹ Ø§ÙØ¢Ø®Ø±', 'Ø¬ÙØ§Ø¯Ù Ø§ÙØ£ÙÙÙ', 'Ø¬ÙØ§Ø¯Ù Ø§ÙØ¢Ø®Ø±Ø©', 'Ø±Ø¬Ø¨', 'Ø´Ø¹Ø¨Ø§Ù', 'Ø±ÙØ¶Ø§Ù', 'Ø´ÙØ§Ù',\r\n    'Ø°Ù Ø§ÙÙØ¹Ø¯Ø©', 'Ø°Ù Ø§ÙØ­Ø¬Ø©']\r\n};\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class IslamicI18n extends NgbDatepickerI18n {\r\n  /** @description Gets the weekday short name.\r\n   * @param number weekday The weekday.\r\n   * @return string The weekday short name.\r\n  */\r\n  public getWeekdayShortName(weekday: number): string {\r\n    return I18N_VALUES.weekdays[weekday - 1];\r\n  }\r\n\r\n  /** @description Gets the weekday short name.\r\n   * @param number month The month.\r\n   * @return string The month short name.\r\n  */\r\n  public getMonthShortName(month: number): string {\r\n    return I18N_VALUES.months[month - 1];\r\n  }\r\n\r\n  /** @description Gets the month full name.\r\n   * @param number month The month.\r\n   * @return string The month full name.\r\n  */\r\n  public getMonthFullName(month: number): string {\r\n    return this.getMonthShortName(month);\r\n  }\r\n\r\n  /** @description Gets the day aria label.\r\n   * @param NgbDateStruct date The date.\r\n   * @return string The day aria label.\r\n  */\r\n  public getDayAriaLabel(date: NgbDateStruct): string {\r\n    return `${date.day}-${date.month}-${date.year}`;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport * as FileSaver from 'file-saver';\r\nimport * as XLSX from 'xlsx';\r\n\r\nconst excelExtension = '.xlsx';\r\nconst pdfType = 'application/pdf';\r\nconst pdfExtension = '.pdf';\r\n\r\ndeclare let html2canvas, pdfMake;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ExportService {\r\n  constructor() { }\r\n\r\n  /** @description Exports a json object as an excel file.\r\n   * @param any json The json object.\r\n   * @param string fileName The excel file name.\r\n   * @param boolean rtl Whether right to left or left to right.\r\n   * @param boolean skipHeader Whether to skip the header.\r\n  */\r\n  public exportAsExcel(json: any[], fileName: string, rtl: boolean = true, skipHeader: boolean = false) {\r\n    // generate worksheet\r\n    const worksheet: XLSX.WorkSheet = XLSX.utils.json_to_sheet(json, { skipHeader: skipHeader });\r\n\r\n    const workbook: XLSX.WorkBook = XLSX.utils.book_new();\r\n\r\n    if (!workbook.Workbook) {\r\n      workbook.Workbook = {};\r\n    }\r\n\r\n    if (!workbook.Workbook.Views) {\r\n      workbook.Workbook.Views = [];\r\n    }\r\n\r\n    if (!workbook.Workbook.Views[0]) {\r\n      workbook.Workbook.Views[0] = {};\r\n    }\r\n\r\n    workbook.Workbook.Views[0].RTL = rtl;\r\n\r\n    // generate workbook and add the worksheet\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'data');\r\n\r\n    // save to file *\r\n    XLSX.writeFile(workbook, fileName + '_' + new Date().getTime() + excelExtension);\r\n  }\r\n\r\n  /** @description Exports an html string as pdf.\r\n    * @param string html The html to print.\r\n    * @param Array<number> margins The pdf page margins.\r\n    * @param string fileName The pdf file name.\r\n    * @param any size The pdf size.\r\n  */\r\n  public exportAsPdf(html: string, fileName: string, size: any = 'A4', margins: Array<number> = [0, 0]) {\r\n    if (html) {\r\n      html2canvas(html).then(canvas => {\r\n        const dataUri = canvas.toDataURL();\r\n\r\n        const docDefinition = {\r\n          pageSize: size,\r\n          pageMargins: margins,\r\n          content: [\r\n            {\r\n              image: dataUri\r\n            }\r\n          ]\r\n        };\r\n\r\n        pdfMake.createPdf(docDefinition).getBlob((file) => {\r\n          this.promptFileSave(file, pdfType, fileName, pdfExtension);\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  /** @description Exports a file as pdf.\r\n   * @param any buffer The file buffer.\r\n   * @param string fileType The file mime type.\r\n   * @param string fileName The file name.\r\n   * @param string fileExtension The file extension.\r\n  */\r\n  public promptFileSave(buffer: any, fileType: string, fileName: string, fileExtension: string) {\r\n    const data: Blob = new Blob([buffer], {\r\n      type: fileType\r\n    });\r\n\r\n    FileSaver.saveAs(data, fileName + '_' + new Date().getTime() + fileExtension);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class HttpRequestsService {\r\n  constructor(protected httpClient: HttpClient) { }\r\n\r\n  /** @description Executes a get request and returns the response.\r\n   * @param string endpointUrl The endpoint Url.\r\n   * @return Observable<any> The response.\r\n  */\r\n  public get(endpointUrl: string): Observable<any> {\r\n    const httpHeaders = new HttpHeaders();\r\n\r\n    return this.httpClient.get<any>(endpointUrl, { headers: httpHeaders });\r\n  }\r\n\r\n  /** @description Executes a post request and returns the response.\r\n   * @param string endpointUrl The endpoint Url.\r\n   * @param any request The request payload.\r\n   * @return Observable<any> The response.\r\n  */\r\n  public post(endpointUrl: string, request: any): Observable<any> {\r\n    const httpHeaders = new HttpHeaders();\r\n\r\n    return this.httpClient.post<any>(endpointUrl, request, { headers: httpHeaders });\r\n  }\r\n\r\n  /** @description Executes a put request and returns the response.\r\n   * @param string endpointUrl The endpoint Url.\r\n   * @param any request The request payload.\r\n   * @return Observable<any> The response.\r\n  */\r\n  public put(endpointUrl: string, request: any): Observable<any> {\r\n    const httpHeaders = new HttpHeaders();\r\n\r\n    return this.httpClient.put<any>(endpointUrl, request, { headers: httpHeaders });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class LocalStorageService {\r\n  constructor() { }\r\n\r\n  /** @description Checks a record exists in the local storage.\r\n   * @param string key The key.\r\n   * @return boolean Whether the record exists.\r\n  */\r\n  public doesKeyExist(key: string): boolean {\r\n    return localStorage.getItem(key) != null;\r\n  }\r\n\r\n  /** @description Saves a record in the local storage.\r\n   * @param string key The key.\r\n   * @param any data The record data.\r\n  */\r\n  public save(key: string, data: any) {\r\n    data = JSON.stringify(data);\r\n\r\n    localStorage.setItem(key, data);\r\n  }\r\n\r\n  /** @description Loads a record from the local storage.\r\n   * @param string key The key.\r\n   * @return any data The record data.\r\n  */\r\n  public load(key: string): any {\r\n    const data = localStorage.getItem(key);\r\n\r\n    return JSON.parse(data);\r\n  }\r\n\r\n  /** @description Loads a record from the local storage if it exists.\r\n   * Alternatively returns a default value if not found.\r\n   * @param string key The key.\r\n   * @param any defaultValue The default value.\r\n   * @return any data The record data.\r\n  */\r\n  public loadOrDefault(key: string, defaultValue: any): any {\r\n    let value = this.load(key);\r\n\r\n    if (!value) {\r\n      value = defaultValue;\r\n    }\r\n\r\n    return value;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { TranslateService, LangChangeEvent } from '@ngx-translate/core';\r\nimport { LocalStorageService } from './local-storage.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class LanguageService {\r\n  /** @property The saved language.*/\r\n  public savedLanguage = this.localStorage.loadOrDefault('Language', 'en');\r\n\r\n  /** @property The translations.*/\r\n  public translations: any;\r\n\r\n  constructor(\r\n    public translate: TranslateService,\r\n    public localStorage: LocalStorageService\r\n  ) {\r\n    this.translate.onLangChange.subscribe((event: LangChangeEvent) => {\r\n      this.setLanguage(event.lang);\r\n\r\n      this.translations = event.translations;\r\n    });\r\n  }\r\n\r\n  /** @description Sets the language.\r\n   * @param string language The language.\r\n  */\r\n  public setLanguage(language: string) {\r\n    this.translate.use(language);\r\n\r\n    this.savedLanguage = language;\r\n\r\n    this.localStorage.save('Language', language);\r\n  }\r\n\r\n  /** @description Gets the language.*/\r\n  public getLanguage() {\r\n    return this.localStorage.loadOrDefault('Language', 'en');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpRequestsService } from './http-requests.service';\r\nimport { LocalStorageService } from './local-storage.service';\r\nimport { LanguageService } from './language.service';\r\nimport { BridgeService } from './bridge.service';\r\n\r\ndeclare let fieldEvalFunctions;\r\n\r\nconst functionToken: string = 'Function:';\r\n\r\n// regex for replacing addition symbol with a space\r\nconst spaceRegex = /\\+/g;\r\n\r\n// regex to match query strings\r\nconst queryStringRegex = /([^&=]+)=?([^&]*)/g;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UtilitiesService {\r\n  constructor(\r\n    private bridgeService: BridgeService,\r\n    private httpRequestsService: HttpRequestsService,\r\n    private localStorageService: LocalStorageService,\r\n    private languageService: LanguageService\r\n  ) { }\r\n\r\n  /** @description Evaluates a funtion from its string representation.\r\n   * Alternatively returns a default value if not found.\r\n   * @param string functionString The function string.\r\n   * @param any defaultValue The default value.\r\n   * @return any The funtion evaluation result.\r\n  */\r\n  public evaluateFunctionOrDefault(functionString: string, defaultValue: any): any {\r\n    if (functionString.indexOf(functionToken) >= 0) {\r\n      functionString = functionString.replace(functionToken, '');\r\n\r\n      let jsFunctionName, jsFunctionParameters = null;\r\n\r\n      if (functionString.indexOf(',') >= 0) {\r\n        const functionTokens = functionString.split(',');\r\n\r\n        jsFunctionName = functionTokens[0];\r\n\r\n        functionTokens.shift();\r\n\r\n        jsFunctionParameters = functionTokens;\r\n      } else {\r\n        jsFunctionName = functionString;\r\n      }\r\n\r\n      const jsFunction = fieldEvalFunctions[jsFunctionName];\r\n\r\n      if (jsFunction) {\r\n        return jsFunction(jsFunctionParameters, jsFunctionParameters);\r\n      } else {\r\n        return defaultValue;\r\n      }\r\n    } else {\r\n      return defaultValue;\r\n    }\r\n  }\r\n\r\n  /** @description Attempts to load a file from local storage.\r\n   * If not found it gets it as a web request.\r\n   * @param string key The key. It is both the storage key or the web url.\r\n   * @return any The loaded file.\r\n  */\r\n  public async loadFile(key) {\r\n    let file = null;\r\n\r\n    if (this.localStorageService.doesKeyExist(key)) {\r\n      file = this.localStorageService.load(key);\r\n\r\n      file.isLocal = true;\r\n    } else {\r\n      file = this.httpRequestsService.get(key).toPromise();\r\n    }\r\n\r\n    return file;\r\n  }\r\n\r\n  /** @description Recursively merge properties of two objects from right to left.\r\n   * @param any object1 The left object.\r\n   * @param any object2 The right object.\r\n   * @return any The merged object.\r\n  */\r\n  public mergeRecursive(object1: any, object2: any): any {\r\n    for (const item in object2) {\r\n      if (object2.hasOwnProperty(item)) {\r\n        try {\r\n          // property in destination object set; update its value.\r\n          if (object2[item].constructor === Object) {\r\n            object1[item] = this.mergeRecursive(object1[item], object2[item]);\r\n          } else {\r\n            object1[item] = object2[item];\r\n          }\r\n        } catch (e) {\r\n          // property in destination object not set; create it and set its value.\r\n          object1[item] = object2[item];\r\n        }\r\n      }\r\n    }\r\n\r\n    return object1;\r\n  }\r\n\r\n  /** @description Returns the string with its tokens replaced.\r\n   * @param string input The string input.\r\n   * @param any route The route.\r\n   * @param any additionalParameters The additional parameters.\r\n   * @return string The string with its tokens replaced.\r\n  */\r\n  public replaceTokens(input: string, route: any, additionalParameters: any): string {\r\n    input = input.replace('{languageToken}', this.languageService.savedLanguage);\r\n\r\n    if (route && route.params) {\r\n      input = this.replaceTokensFromParameters(input, route.params.value);\r\n    }\r\n\r\n    input = this.replaceTokensFromParameters(input, this.getQueryStringParameters());\r\n\r\n    input = this.replaceTokensFromParameters(input, this.bridgeService.configuration.settings.baseEndPointUrls);\r\n\r\n    if (additionalParameters) {\r\n      input = this.replaceTokensFromParameters(input, additionalParameters);\r\n    }\r\n\r\n    return input;\r\n  }\r\n\r\n  /** @description Gets the string with its tokens replaced.\r\n    * @param string input The string input.\r\n    * @param any parameters The parameters.\r\n    * @return string The string with its tokens replaced.\r\n  */\r\n  private replaceTokensFromParameters(input: string, parameters: any): string {\r\n    for (const key in parameters) {\r\n      if (parameters.hasOwnProperty(key)) {\r\n\r\n        const paramValue = parameters[key];\r\n\r\n        input = input.replace('{' + key + '}', paramValue);\r\n      }\r\n    }\r\n\r\n    return input;\r\n  }\r\n\r\n  /** @description Gets the query string parameters.\r\n    * @return object The query string parameters.\r\n  */\r\n  private getQueryStringParameters(): object {\r\n    const urlParameters = {};\r\n\r\n    const query = window.location.search.substring(1);\r\n\r\n    let match;\r\n\r\n    while (match = queryStringRegex.exec(query)) {\r\n      urlParameters[this.decodeURIComponent(match[1])] = this.decodeURIComponent(match[2]);\r\n    }\r\n\r\n    return urlParameters;\r\n  }\r\n\r\n  /** @description Decodes a URI Component.\r\n    * @param string input The string input.\r\n    * @return string The decoded URI Component.\r\n  */\r\n  private decodeURIComponent(input: string): string {\r\n    return decodeURIComponent(input.replace(spaceRegex, ' '));\r\n  }\r\n}\r\n","import { Field } from '.';\r\n\r\nexport class AllFields {\r\n  isLocal: boolean;\r\n\r\n  fields: Array<Field>;\r\n}\r\n","import { Settings, Endpoints, Notifications, Section, Field, InputError } from '.';\r\n\r\nexport class Configuration {\r\n  settings: Settings;\r\n\r\n  endpoints: Endpoints;\r\n\r\n  notifications: Notifications;\r\n\r\n  sections: Array<Section>;\r\n\r\n  currentSection: Section;\r\n\r\n  fields: any;\r\n\r\n  mergedFields: Array<Field>;\r\n\r\n  validationErrors: Array<InputError>;\r\n\r\n  isLocal: boolean = false;\r\n\r\n  buttons: any;\r\n}\r\n","export class DefaultLocation {\r\n  latitude: number;\r\n\r\n  longitude: number;\r\n}\r\n","export class Endpoints {\r\n  get: string;\r\n\r\n  save: string;\r\n\r\n  submit: string;\r\n\r\n  lookups: object;\r\n}\r\n","import { SweetAlertType } from 'sweetalert2';\r\n\r\nexport class FormModes {\r\n  public static New = 'New';\r\n  public static Display = 'Display';\r\n  public static Edit = 'Edit';\r\n}\r\n\r\nexport class ValidationSummaryModes {\r\n  public static None = 'None';\r\n  public static Alert = 'Alert';\r\n  public static List = 'List';\r\n}\r\n\r\nexport class SectionModes {\r\n  public static None = 'None';\r\n  public static Tabs = 'Tabs';\r\n  public static NextPrevious = 'NextPrevious';\r\n}\r\n\r\nexport class PostModes {\r\n  public static FormData = 'FormData';\r\n  public static FormBody = 'FormBody';\r\n}\r\n\r\nexport class SwalTypes {\r\n  public static Warning: SweetAlertType = 'warning';\r\n  public static Error: SweetAlertType = 'error';\r\n  public static Success: SweetAlertType = 'success';\r\n  public static Info: SweetAlertType = 'info';\r\n  public static Question: SweetAlertType = 'question';\r\n}\r\n\r\nexport class FieldTypes {\r\n  public static Info = 'info';\r\n  public static Text = 'text';\r\n  public static DateTime = 'datetime';\r\n  public static DateTimeHijri = 'datetimehijri';\r\n  public static RadioButton = 'radiobutton';\r\n  public static Select = 'select';\r\n  public static Password = 'password';\r\n  public static Number = 'number';\r\n  public static MultiSelect = 'multiselect';\r\n  public static Checkbox = 'checkbox';\r\n  public static FileUpload = 'fileupload';\r\n  public static Chips = 'chips';\r\n  public static Editor = 'editor';\r\n  public static Recaptcha = 'recaptcha';\r\n  public static Time = 'time';\r\n  public static Location = 'location';\r\n  public static ImageCropper = 'imagecropper';\r\n  public static Rating = 'rating';\r\n  public static MasterDetail = 'masterdetail';\r\n}\r\n","import { FieldData, FieldValidation, InputError, DefaultLocation, MarkerSettings, MasterDetailDetails } from '.';\r\nimport { CropperSettings } from 'ng2-img-cropper';\r\n\r\nexport class Field {\r\n  fieldType: string;\r\n\r\n  name: string;\r\n\r\n  sectionId: number;\r\n\r\n  hidden: boolean;\r\n\r\n  data: FieldData;\r\n\r\n  validation: FieldValidation;\r\n\r\n  validationErrors: Array<InputError>;\r\n\r\n  label: string;\r\n\r\n  tooltip: string;\r\n\r\n  eventTriggers: any;\r\n\r\n  cssClasses: any;\r\n\r\n  readonly: boolean;\r\n\r\n  disabled: boolean;\r\n\r\n  placeholder: string;\r\n\r\n  autoComplete: string;\r\n\r\n  // datetime - hijri - time\r\n  minDate: string;\r\n\r\n  maxDate: string;\r\n\r\n  defaultDate: string;\r\n\r\n  minDateValue: Date;\r\n\r\n  maxDateValue: Date;\r\n\r\n  defaultDateValue: Date;\r\n\r\n  yearRange: string;\r\n\r\n  setTime: string;\r\n\r\n  showIcon: boolean;\r\n\r\n  dateFormat: string;\r\n\r\n  monthNavigator: boolean;\r\n\r\n  yearNavigator: boolean;\r\n\r\n  hourFormat: string;\r\n\r\n  showTime: boolean;\r\n\r\n  displayDateFormat: string;\r\n\r\n  formDataDateFormat: string;\r\n\r\n  displayMonths: number;\r\n\r\n  outsideDays: string;\r\n\r\n  showWeekdays: boolean;\r\n\r\n  showWeekNumbers: boolean;\r\n\r\n  // location\r\n  defaultLocation: DefaultLocation;\r\n\r\n  markerSettings: MarkerSettings;\r\n\r\n  zoom: number;\r\n\r\n  zoomControl: boolean;\r\n\r\n  // recaptcha\r\n  siteKey: string;\r\n\r\n  size: string;\r\n\r\n  theme: string;\r\n\r\n  // info\r\n  htmlSnippet: string;\r\n\r\n  // imagecropper\r\n  cropperSettings: CropperSettings;\r\n\r\n  // rating\r\n  iconCancelClass: string;\r\n\r\n  iconOnClass: string;\r\n\r\n  iconOffClass: string;\r\n\r\n  cancelIcon: boolean;\r\n\r\n  starNumber: number;\r\n\r\n  // printing\r\n  html2CanvasIgnore: boolean;\r\n\r\n  // masterdetail\r\n  details: MasterDetailDetails;\r\n\r\n  // select\r\n  enablefilter: boolean;\r\n\r\n  // chips\r\n  addOnTab: boolean;\r\n\r\n  addOnBlur: boolean;\r\n\r\n  // editor\r\n  height: string;\r\n\r\n  showToolbar: boolean;\r\n\r\n  // mask\r\n  slotChar: string;\r\n\r\n  autoClear: boolean;\r\n\r\n  unmask: boolean;\r\n\r\n  characterPattern: string;\r\n\r\n  // fileupload\r\n  auto: boolean;\r\n\r\n  mode: string;\r\n\r\n  multiple: boolean;\r\n\r\n  buttons: any;\r\n}\r\n","export class FieldData {\r\n  value: any;\r\n\r\n  options: Array<any>;\r\n\r\n  allOptions: Array<any>;\r\n\r\n  optionsEndpoint: string;\r\n\r\n  dateValue: string;\r\n\r\n  url: string;\r\n}\r\n","export class FieldValidation {\r\n  required: boolean;\r\n\r\n  min: number;\r\n\r\n  max: number;\r\n\r\n  length: number;\r\n\r\n  pattern: string;\r\n\r\n  requiredText: string;\r\n\r\n  patternText: string;\r\n\r\n  rangeText: string;\r\n\r\n  maxFileSizeInBytes: number;\r\n\r\n  invalidFileSizeText: string;\r\n\r\n  invalidFileTypeText: string;\r\n\r\n  characterPattern: string;\r\n\r\n  mask: string;\r\n\r\n  allowDuplicate: boolean;\r\n\r\n  accept: string;\r\n}\r\n","export class InputError {\r\n  type: string;\r\n\r\n  message: string;\r\n\r\n  constructor(type: string, message: string) {\r\n    this.type = type;\r\n\r\n    this.message = message;\r\n  }\r\n}\r\n","export class Marker {\r\n  latitude: number;\r\n\r\n  longitude: number;\r\n\r\n  draggable: boolean;\r\n\r\n  infoHtml: string;\r\n\r\n  eventTriggers: any;\r\n\r\n  constructor(latitude: number, longitude: number, draggable: boolean, infoHtml?: string) {\r\n    this.latitude = latitude;\r\n\r\n    this.longitude = longitude;\r\n\r\n    this.draggable = draggable;\r\n\r\n    this.infoHtml = infoHtml;\r\n  }\r\n}\r\n","import { MarkerSettingsDefault } from '.';\r\n\r\nexport class MarkerSettings {\r\n  defaultNewMarker: MarkerSettingsDefault;\r\n}\r\n","export class MarkerSettingsDefault {\r\n  draggable: boolean;\r\n\r\n  infoHtml: string;\r\n\r\n  eventTriggers: any;\r\n}\r\n","export class MasterDetailDetails {\r\n  configurationSourceUrl: string;\r\n\r\n  displayFields: Array<string>;\r\n}\r\n","export class Notifications {\r\n  showResultMessage: boolean;\r\n\r\n  getErrorMessageTitle: string;\r\n\r\n  getErrorMessageDetails: string;\r\n\r\n  saveErrorMessageTitle: string;\r\n\r\n  saveErrorMessageDetails: string;\r\n\r\n  saveSuccessMessageTitle: string;\r\n\r\n  saveSuccessMessageDetails: string;\r\n\r\n  submitErrorMessageTitle: string;\r\n\r\n  submitErrorMessageDetails: string;\r\n\r\n  submitSuccessMessageTitle: string;\r\n\r\n  submitSuccessMessageDetails: string;\r\n}\r\n","export class Section {\r\n  id: number;\r\n\r\n  name: string;\r\n\r\n  legend: string;\r\n\r\n  isActive: boolean;\r\n\r\n  hideButtons: Array<string>;\r\n\r\n  constructor(id: number, name: string, legend: string, isActive: boolean) {\r\n    this.id = id;\r\n\r\n    this.name = name;\r\n\r\n    this.legend = legend;\r\n\r\n    this.isActive = isActive;\r\n  }\r\n}\r\n","export class Settings {\r\n  version: string;\r\n\r\n  validationSummaryMode: string;\r\n\r\n  sectionMode: string;\r\n\r\n  sectionLocation: string;\r\n\r\n  formMode: string;\r\n\r\n  postMode: string;\r\n\r\n  spinnerSourceUrl: string;\r\n\r\n  allFieldsSource: string;\r\n\r\n  baseEndPointUrls: any;\r\n\r\n  sourceFormSchemas: Array<string>;\r\n}\r\n","export class ResponseEventArgs {\r\n  isSuccess: boolean;\r\n\r\n  response: any;\r\n\r\n  payload: any;\r\n\r\n  constructor(isSuccess: boolean, response: any, payload: any) {\r\n    this.isSuccess = isSuccess;\r\n\r\n    this.response = response;\r\n\r\n    this.payload = payload;\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter, OnChanges } from '@angular/core';\r\n\r\n// Current type to show\r\nexport enum CLOCK_TYPE {\r\n  HOURS = 1,\r\n  MINUTES = 2\r\n}\r\n\r\nexport type TimeFormat = 12 | 24;\r\n\r\nexport interface ITime {\r\n  hour: number;\r\n  minute: number;\r\n  meriden: 'PM' | 'AM';\r\n  format: TimeFormat;\r\n}\r\n\r\n@Component({\r\n  selector: 'ntw-clock',\r\n  styles: [`.w-clock-wrapper{height:100%;padding:0 24px}.w-clock-wrapper .w-clock{width:200px;height:200px;border-radius:50%;cursor:pointer;padding:24px;background:#ededed}.w-clock-wrapper .w-clock .w-clock-container{width:100%;height:100%;position:relative;display:block}.w-clock-wrapper .w-clock .w-clock-center{height:6px;width:6px;position:absolute;left:0;right:0;top:0;bottom:0;margin:auto;border-radius:50%}.w-clock-wrapper .w-clock .w-pointer{box-shadow:none;width:1px;height:50%;position:absolute;left:0;right:0;bottom:0;margin:0 auto;padding:0;-webkit-transform-origin:top center;transform-origin:top center;transition:transform .2s;transition:transform .2s,-webkit-transform .2s;z-index:0;pointer-events:none}.w-clock-wrapper .w-clock .w-clock-step{display:block;position:absolute;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);transition:transform .2s;transition:transform .2s,-webkit-transform .2s}.w-clock-wrapper .w-clock .w-clock-step .mat-mini-fab{box-shadow:none;background-color:transparent}.w-clock-wrapper .w-clock .w-clock-selected{position:absolute;bottom:-19px;left:-19px;min-width:0;min-height:0;pointer-events:none;box-shadow:none;cursor:none}.w-clock-deg0{top:0;left:50%}.w-clock-deg15{top:1.70370869%;left:62.94095226%}.w-clock-deg30{top:6.69872981%;left:75%}.w-clock-deg45{top:14.64466094%;left:85.35533905%}.w-clock-deg60{top:25%;left:93.30127019%}.w-clock-deg75{top:37.05904774%;left:98.29629131%}.w-clock-deg90{top:50%;left:100%}.w-clock-deg105{top:62.94095226%;left:98.29629131%}.w-clock-deg120{top:75%;left:93.30127019%}.w-clock-deg135{top:85.35533906%;left:85.35533906%}.w-clock-deg150{top:93.30127019%;left:75%}.w-clock-deg165{top:98.29629131%;left:62.94095226%}.w-clock-deg180{top:100%;left:50%}.w-clock-deg195{top:98.29629131%;left:37.05904774%}.w-clock-deg210{top:93.30127019%;left:25%}.w-clock-deg225{top:85.35533906%;left:14.64466094%}.w-clock-deg240{top:75%;left:6.69872981%}.w-clock-deg255{top:62.94095226%;left:1.703708686%}.w-clock-deg270{top:50%;left:0}.w-clock-deg285{top:37.05904774%;left:1.703708686%}.w-clock-deg300{top:25%;left:6.69872981%}.w-clock-deg315{top:14.64466094%;left:14.64466094%}.w-clock-deg330{top:6.69872981%;left:25%}.w-clock-deg345{top:1.703708686%;left:37.05904774%}.w-clock-deg360{top:0;left:50%}`],\r\n  template: `<div fxLayout=\"row\"\r\n     fxLayoutAlign=\"center center\"\r\n     class=\"w-clock-wrapper\">\r\n  <div class=\"w-clock\">\r\n    <div class=\"w-clock-container\">\r\n\r\n      <!-- Clock center -->\r\n      <button mat-mini-fab\r\n              [color]=\"color\"\r\n              class=\"w-clock-center\"></button>\r\n\r\n      <!-- Clock hand -->\r\n      <mat-toolbar [ngStyle]=\"getPointerStyle()\"\r\n                   [color]=\"color\"\r\n                   class=\"w-pointer\">\r\n        <button mat-mini-fab\r\n                [color]=\"color\"\r\n                class=\"w-clock-selected\"></button>\r\n      </mat-toolbar>\r\n\r\n      <!-- Hour / Minute number faces -->\r\n      <div *ngFor=\"let step of steps; let i = index\"\r\n           [class]=\"getTimeValueClass(step, i)\">\r\n        <button mat-mini-fab\r\n                [color]=\"selectedTimePart === step ? color : ''\"\r\n                (click)=\"changeTimeValue(step)\">\r\n          {{ step }}\r\n        </button>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</div>\r\n`\r\n})\r\nexport class WClockComponent implements OnChanges {\r\n  @Input() public userTime: ITime;\r\n  @Output() public userTimeChange: EventEmitter<ITime> = new EventEmitter();\r\n\r\n  @Input() public currentView: CLOCK_TYPE;\r\n  @Output() public viewChange = new EventEmitter<CLOCK_TYPE>();\r\n\r\n  @Input() public color: string;\r\n\r\n  public steps = new Array<number>();\r\n  public selectedTimePart;\r\n  public STEP_DEG: number;\r\n\r\n  ngOnChanges() {\r\n    this.setupUI();\r\n  }\r\n\r\n  public setupUI() {\r\n    this.steps = new Array<number>();\r\n\r\n    switch (this.currentView) {\r\n      case CLOCK_TYPE.HOURS:\r\n        for (let i = 1; i <= this.userTime.format; i++) {\r\n          this.steps.push(i);\r\n          this.selectedTimePart = this.userTime.hour || 0;\r\n\r\n          if (this.selectedTimePart > this.userTime.format) {\r\n\r\n            this.selectedTimePart -= this.userTime.format;\r\n          }\r\n        }\r\n        break;\r\n      case CLOCK_TYPE.MINUTES:\r\n        for (let i = 5; i <= 55; i += 5) {\r\n\r\n          this.steps.push(i);\r\n        }\r\n        this.steps.push(0);\r\n        this.selectedTimePart = this.userTime.minute || 0;\r\n        break;\r\n    }\r\n  }\r\n\r\n  getPointerStyle() {\r\n    let divider = 1;\r\n    switch (this.currentView) {\r\n      case CLOCK_TYPE.HOURS:\r\n        divider = this.userTime.format;\r\n        break;\r\n      case CLOCK_TYPE.MINUTES:\r\n        divider = 60;\r\n        break;\r\n    }\r\n\r\n    let degrees = 0;\r\n    if (this.currentView === CLOCK_TYPE.HOURS) {\r\n      degrees = Math.round(this.userTime.hour * (360 / divider)) - 180;\r\n    } else {\r\n      degrees = Math.round(this.userTime.minute * (360 / divider)) - 180;\r\n    }\r\n\r\n    const style = {\r\n      '-webkit-transform': 'rotate(' + degrees + 'deg)',\r\n      '-ms-transform': 'rotate(' + degrees + 'deg)',\r\n      'transform': 'rotate(' + degrees + 'deg)'\r\n    };\r\n\r\n    return style;\r\n  }\r\n\r\n  public getTimeValueClass(step: number, index: number) {\r\n    if (this.currentView === CLOCK_TYPE.HOURS) {\r\n      this.STEP_DEG = 360 / this.userTime.format;\r\n    } else {\r\n      this.STEP_DEG = 360 / 12;\r\n    }\r\n\r\n    let classes = 'w-clock-step w-clock-deg' + (this.STEP_DEG * (index + 1));\r\n\r\n    if (this.selectedTimePart === step) {\r\n\r\n      classes += ' mat-primary';\r\n    }\r\n\r\n    return classes;\r\n  }\r\n\r\n  public changeTimeValue(step: number) {\r\n    if (this.currentView === CLOCK_TYPE.HOURS) {\r\n      this.userTime.hour = step;\r\n\r\n      // auto switch to minutes\r\n      this.viewChange.emit(CLOCK_TYPE.MINUTES);\r\n    } else {\r\n      this.userTime.minute = step;\r\n\r\n      // auto switch to hours\r\n      this.viewChange.emit(CLOCK_TYPE.HOURS);\r\n    }\r\n\r\n    this.userTimeChange.emit(this.userTime);\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material';\r\nimport { MAT_DIALOG_DATA } from '@angular/material';\r\nimport { CLOCK_TYPE, ITime } from '../w-clock/w-clock.component';\r\n\r\n@Component({\r\n  styles: [`.w-timepicker-dialog{padding:0;margin:-24px;width:calc(100% + 48px)}`],\r\n  template: `<div mat-dialog-content class=\"w-timepicker-dialog\">\r\n  <ntw-time [color]=\"color\" [userTime]=\"userTime\" (reverted)=\"revert()\" (submitted)=\"submit()\"></ntw-time>\r\n</div>\r\n`\r\n})\r\nexport class WTimeDialogComponent {\r\n  public userTime: ITime;\r\n  private VIEW_HOURS = CLOCK_TYPE.HOURS;\r\n  private VIEW_MINUTES = CLOCK_TYPE.MINUTES;\r\n  private currentView: CLOCK_TYPE = this.VIEW_HOURS;\r\n  public color: string;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private data: UserTimeData,\r\n    private dialogRef: MatDialogRef<WTimeDialogComponent>) {\r\n    this.userTime = data.time;\r\n    this.color = data.color;\r\n  }\r\n\r\n  revert() {\r\n    this.dialogRef.close(-1);\r\n  }\r\n\r\n  submit() {\r\n    this.dialogRef.close(this.userTime);\r\n  }\r\n}\r\n\r\nexport class UserTimeData {\r\n  time: ITime;\r\n  color: string;\r\n}\r\n","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ITime } from '../w-clock/w-clock.component';\r\nimport { WTimeDialogComponent } from '../w-time-dialog/w-time-dialog.component';\r\nimport { TranslatePipe } from '@ngx-translate/core';\r\n\r\n@Component({\r\n  selector: 'ntw-mat-timepicker',\r\n  styles: [`.time-picker-button{padding:0;margin:0;min-width:44px}:host ::ng-deep .ui-dropdown,:host ::ng-deep input.ui-inputtext.ui-widget.ui-state-default,:host ::ng-deep p-dropdown,input.form-input{width:100%!important;height:35px}`],\r\n  template: `<div fxFlex\r\n     fxLayout=\"row\"\r\n     class=\"w-mat-timepicker\">\r\n\r\n  <button mat-button type=\"button\"\r\n          (click)=\"showPicker($event)\"\r\n          class=\"time-picker-button\">\r\n    <i class=\"fa fa-clock-o\"></i>\r\n  </button>\r\n\r\n  <input matInput\r\n         [id]=\"inputId\"\r\n         [name]=\"inputName\"\r\n         [disabled]=\"disabled\"\r\n         [readonly]=\"readonly\"\r\n         [class]=\"inputClass\"\r\n         [title]=\"tooltip\"\r\n         [placeholder]=\"placeholderValue\"\r\n         [value]=\"time\">\r\n</div>\r\n`,\r\n  providers: [TranslatePipe]\r\n})\r\n\r\nexport class WMatTimePickerComponent implements OnInit {\r\n  @Input() userTime: ITime;\r\n\r\n  @Output() userTimeChange: EventEmitter<ITime> = new EventEmitter();\r\n\r\n  @Input() color: string;\r\n\r\n  @Input() disabled: string;\r\n\r\n  @Input() readonly: string;\r\n\r\n  @Input() inputClass: string;\r\n\r\n  @Input() tooltip: string;\r\n\r\n  @Input() placeholderValue: string;\r\n\r\n  @Input() inputId: string;\r\n\r\n  @Input() inputName: string;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private translatePipe: TranslatePipe\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    if (!this.userTime) {\r\n      const currentDate = new Date();\r\n      const time: any = {};\r\n      time.hour = 0;\r\n      time.minute = 0;\r\n      time.format = 24;\r\n      time.meriden = 'AM';\r\n\r\n      this.userTime = time;\r\n    }\r\n  }\r\n\r\n  get time(): string {\r\n    if (!this.userTime) {\r\n      return '';\r\n    }\r\n\r\n    let meriden = `${this.userTime.meriden}`;\r\n\r\n    meriden = this.translatePipe.transform(meriden);\r\n\r\n    if (this.userTime.format === 24) {\r\n      meriden = '';\r\n    }\r\n\r\n    let hour = `${this.userTime.hour}`;\r\n    if (this.userTime.hour === 24) {\r\n      hour = '00';\r\n    }\r\n\r\n    if (this.userTime.minute === 0) {\r\n      return `${hour}:00 ${meriden}`;\r\n\r\n    } else if (this.userTime.minute < 10) {\r\n\r\n      const tt = '0' + String(this.userTime.minute);\r\n      return `${hour}:${tt} ${meriden}`;\r\n\r\n    } else {\r\n      return `${hour}:${this.userTime.minute} ${meriden}`;\r\n    }\r\n  }\r\n\r\n  showPicker($event) {\r\n    const dialogRef = this.dialog.open(WTimeDialogComponent, {\r\n      data: {\r\n        time: {\r\n          hour: this.userTime.hour,\r\n          minute: this.userTime.minute,\r\n          meriden: this.userTime.meriden,\r\n          format: this.userTime.format\r\n        },\r\n        color: this.color\r\n      }\r\n    });\r\n\r\n    dialogRef.afterClosed()\r\n      .subscribe((result: ITime | -1) => {\r\n        // result will be update userTime object or -1 or undefined (closed dialog w/o clicking cancel)\r\n        if (result === undefined) {\r\n          return;\r\n        } else if (result !== -1) {\r\n          this.userTime = result;\r\n\r\n          this.emituserTimeChange();\r\n        }\r\n      });\r\n    return false;\r\n  }\r\n\r\n  private emituserTimeChange() {\r\n\r\n    this.userTimeChange.emit(this.userTime);\r\n  }\r\n}\r\n","import { Component, Input, Output, OnInit, EventEmitter } from '@angular/core';\r\nimport { ITime, CLOCK_TYPE } from '../w-clock/w-clock.component';\r\nimport { TranslatePipe } from '@ngx-translate/core';\r\n\r\n@Component({\r\n  selector: 'ntw-time',\r\n  template: `<div fxLayout=\"row\"\r\n     fxLayout.lt-md=\"column\"\r\n     fxLayoutAlign=\"center center\"\r\n     class=\"w-time\"\r\n     [ngClass.xs]=\"'vertical-time'\"\r\n     [ngClass.sm]=\"'vertical-time'\">\r\n  <mat-toolbar fxLayout=\"column\"\r\n               fxLayout.lt-md=\"row\"\r\n               fxLayoutAlign=\"center center\"\r\n               [color]=\"color\"\r\n               class=\"w-timepicker-time-container\">\r\n\r\n    <div class=\"w-timepicker-selected-time\">\r\n      <span [class]=\"currentView === VIEW_HOURS ? 'active': ''\"\r\n            (click)=\"setCurrentView(VIEW_HOURS)\">{{ formatHour() }}:</span>\r\n      <span [class]=\"currentView === VIEW_MINUTES ? 'active': ''\"\r\n            (click)=\"setCurrentView(VIEW_MINUTES)\">{{ formatMinute() }}</span>\r\n    </div>\r\n    <div fxLayout=\"column\"\r\n         fxLayoutAlign=\"center center\"\r\n         class=\"w-timepicker-selected-ampm\"\r\n         *ngIf=\"userTime.format === 12\">\r\n      <span (click)=\"setMeridien('AM')\"\r\n            [class]=\"userTime.meriden === 'AM' ? 'active' : ''\">{{'AM' | translate}}</span>\r\n      <span (click)=\"setMeridien('PM')\"\r\n            [class]=\"userTime.meriden === 'PM' ? 'active' : ''\">{{'PM' | translate}}</span>\r\n    </div>\r\n\r\n  </mat-toolbar>\r\n\r\n  <div fxLayout=\"column\"\r\n       fxLayoutAlign=\"space-between center\"\r\n       class=\"w-time-content\">\r\n    <ntw-clock [color]=\"color\"\r\n             class=\"w-animation-zoom\"\r\n             [userTime]=\"userTime\"\r\n             (userTimeChange)=\"emituserTimeChange($event)\"\r\n             [(currentView)]=\"currentView\"\r\n             (viewChange)=\"setCurrentView($event)\">\r\n    </ntw-clock>\r\n\r\n    <div fxFlexAlign=\"end\">\r\n      <button mat-button\r\n              (click)=\"revert()\">\r\n        {{revertLabel}}\r\n      </button>\r\n      <button mat-button\r\n              [color]=\"color\"\r\n              (click)=\"submit()\">\r\n        {{submitLabel}}\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [`:host{display:block}.w-time{max-height:100%;min-height:350px;height:350px}.w-time .w-timepicker-time-container{padding:15px;min-width:160px;width:160px}.w-time .w-timepicker-time-container.mat-toolbar-single-row{height:100%}.w-time .w-timepicker-selected-time{font-size:3.5rem;font-weight:400;display:flex}.w-time .w-timepicker-selected-ampm{font-size:1rem;line-height:1.3rem;padding-top:2rem}.w-time .w-time-content{width:100%;height:100%;padding:6px}.w-time .w-time-content w-clock{padding:12px 0;height:calc(100% - 58px)}.w-time.vertical-time{height:auto}.w-time.vertical-time .w-timepicker-time-container{min-width:auto;width:100%;height:100px}.w-time.vertical-time .w-timepicker-time-container .w-timepicker-selected-ampm{padding:0 12px}.w-timepicker-selected-ampm>span,.w-timepicker-selected-time>span{outline:0;opacity:.5}.w-timepicker-selected-ampm>span:not(.active),.w-timepicker-selected-time>span:not(.active){cursor:pointer}.w-timepicker-selected-ampm>span.active,.w-timepicker-selected-time>span.active{opacity:1}.w-animate-next{opacity:0;-webkit-transform:translate3d(50%,0,1px);transform:translate3d(50%,0,1px)}.w-animate-next-remove{transition:.5s cubic-bezier(.35,0,.25,1);opacity:0;-webkit-transform:translate3d(50%,0,1px);transform:translate3d(50%,0,1px)}.w-animate-next-remove-active{opacity:1;-webkit-transform:translate3d(0,0,1px);transform:translate3d(0,0,1px)}.w-animate-prev{opacity:0;-webkit-transform:translate3d(-50%,0,1px);transform:translate3d(-50%,0,1px)}.w-animate-prev-remove{transition:.3s cubic-bezier(.35,0,.25,1);opacity:0;-webkit-transform:translate3d(-50%,0,1px);transform:translate3d(-50%,0,1px)}.w-animate-prev-remove-active{opacity:1;-webkit-transform:translate3d(0,0,1px);transform:translate3d(0,0,1px)}@-webkit-keyframes w-animation-bounce{from{opacity:0;-webkit-transform:scale(.95);transform:scale(.95)}70%{opacity:1;-webkit-transform:scale(1.05);transform:scale(1.05)}to{-webkit-transform:scale(1);transform:scale(1)}}@keyframes w-animation-bounce{from{opacity:0;-webkit-transform:scale(.95);transform:scale(.95)}70%{opacity:1;-webkit-transform:scale(1.05);transform:scale(1.05)}to{-webkit-transform:scale(1);transform:scale(1)}}.w-animation-zoom.ng-enter{transition:.3s cubic-bezier(.35,0,.25,1);-webkit-animation-duration:.3s;animation-duration:.3s;-webkit-animation-name:w-animation-bounce;animation-name:w-animation-bounce}`],\r\n  providers: [TranslatePipe]\r\n})\r\nexport class WTimeComponent implements OnInit {\r\n  @Input() userTime: ITime;\r\n  @Output() userTimeChange: EventEmitter<ITime> = new EventEmitter();\r\n\r\n  @Input() revertLabel: string;\r\n  @Input() submitLabel: string;\r\n\r\n  @Output() reverted: EventEmitter<null> = new EventEmitter();\r\n  @Output() submitted: EventEmitter<ITime> = new EventEmitter();\r\n\r\n  @Input() color: string;\r\n\r\n  public VIEW_HOURS = CLOCK_TYPE.HOURS;\r\n  public VIEW_MINUTES = CLOCK_TYPE.MINUTES;\r\n  public currentView: CLOCK_TYPE = this.VIEW_HOURS;\r\n\r\n  constructor(private translatePipe: TranslatePipe) { }\r\n\r\n  ngOnInit() {\r\n    if (!this.userTime) {\r\n      this.userTime = {\r\n        hour: 6,\r\n        minute: 0,\r\n        meriden: 'PM',\r\n        format: 12\r\n      };\r\n    }\r\n\r\n    if (!this.revertLabel) {\r\n      this.revertLabel = this.translatePipe.transform('buttons.Cancel');\r\n    }\r\n\r\n    if (!this.submitLabel) {\r\n      this.submitLabel = this.translatePipe.transform('buttons.Ok');\r\n    }\r\n  }\r\n\r\n  formatHour(): string {\r\n    if (this.userTime.format === 24) {\r\n      if (this.userTime.hour === 24) {\r\n        return '00';\r\n      } else if (this.userTime.hour < 10) {\r\n        return '0' + String(this.userTime.hour);\r\n      }\r\n    }\r\n\r\n    return String(this.userTime.hour);\r\n  }\r\n\r\n  formatMinute(): string {\r\n    if (this.userTime.minute === 0) {\r\n      return '00';\r\n    } else if (this.userTime.minute < 10) {\r\n      return '0' + String(this.userTime.minute);\r\n    } else {\r\n      return String(this.userTime.minute);\r\n    }\r\n  }\r\n\r\n  setCurrentView(type: CLOCK_TYPE) {\r\n    this.currentView = type;\r\n  }\r\n\r\n  setMeridien(m: 'PM' | 'AM') {\r\n    this.userTime.meriden = m;\r\n  }\r\n\r\n  revert() {\r\n    this.reverted.emit();\r\n  }\r\n\r\n  submit() {\r\n    this.submitted.emit(this.userTime);\r\n  }\r\n\r\n  emituserTimeChange(event) {\r\n    this.userTimeChange.emit(this.userTime);\r\n  }\r\n}\r\n","import { Component, Input, ViewChild } from '@angular/core';\r\nimport { NgModel } from '@angular/forms';\r\nimport { BridgeService } from '../../../services/bridge.service';\r\nimport { Field } from '../../../models/field';\r\nimport { SectionModes, FormModes } from '../../../models/enums';\r\nimport { InputError } from '../../../models/input-error';\r\n\r\n@Component({\r\n  selector: 'ntw-field',\r\n  template: ''\r\n})\r\nexport class FieldComponent {\r\n  /** @property The validation error class.*/\r\n  protected static ValidationErrorClass: string = 'cssClasses.ValidationError';\r\n\r\n  /** @property The related field.*/\r\n  @Input('field') field: Field;\r\n\r\n  /** @property The control.*/\r\n  @ViewChild(NgModel) control: NgModel;\r\n\r\n  /** @property Whether to validate for required.*/\r\n  public validateForRequired: boolean = false;\r\n\r\n  /** @property Whether to validate for pattern.*/\r\n  public validateForPattern: boolean = false;\r\n\r\n  /** @property Whether to validate for range.*/\r\n  public validateForRange: boolean = false;\r\n\r\n  // still unused. always false.\r\n  private isPristine: boolean;\r\n\r\n  constructor(\r\n    public bridgeService: BridgeService\r\n  ) { }\r\n\r\n  /** @description Handles the field's default settings.*/\r\n  public handleDefaultSettings() {\r\n\r\n  }\r\n\r\n  /** @description Updates the field's value.\r\n   * @param any newValue The new field value.\r\n  */\r\n  public updateValue(newValue: any) {\r\n    this.field.data.value = newValue.value;\r\n\r\n    this.validate();\r\n  }\r\n\r\n  /** @description Clears the field's value.*/\r\n  public clearValue() {\r\n    if (this.field.data) {\r\n      this.field.data.value = null;\r\n\r\n      if (this.control) {\r\n        this.control.reset();\r\n      }\r\n\r\n      this.clearValidationErrors();\r\n    }\r\n  }\r\n\r\n  /** @description Gets the field's value.*/\r\n  public getValue() {\r\n    return this.field.data.value;\r\n  }\r\n\r\n  /** @description Appends the form data.\r\n   * @param FormData data The data.\r\n   * @return FormData The updated form data.\r\n  */\r\n  public appendFormData(data: FormData): FormData {\r\n    if (this.field.data && this.field.data.value) {\r\n      data.append(this.field.name, this.field.data.value);\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  /** @description Triggers a dynamic event in case it is defined.\r\n   * @param string eventType The type of the event.\r\n   * @param any eventArguments The event arguments of the action causing the trigger.\r\n   * @param any source The source of the action causing the trigger.\r\n  */\r\n  public triggerDynamicEvent(eventType: string, eventArguments: any, source: any) {\r\n    if (source.eventTriggers) {\r\n      const event = source.eventTriggers[eventType];\r\n\r\n      const parentEventHandlerFunction = this.bridgeService.parentComponent[event.handler];\r\n\r\n      if (parentEventHandlerFunction) {\r\n        let parameters = [eventArguments];\r\n\r\n        if (event.parameters && event.parameters.length > 0) {\r\n          parameters = parameters.concat(event.parameters);\r\n        }\r\n\r\n        parentEventHandlerFunction(this.bridgeService.parentComponent, source, parameters);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @description Checks whether the field should be hidden.\r\n   * @return boolean Whether the field should be hidden.\r\n  */\r\n  public isFieldHidden(): boolean {\r\n    return this.field.hidden ||\r\n      (this.bridgeService.configuration.settings.sectionMode !== SectionModes.None &&\r\n        this.bridgeService.configuration.sections.length > 0 &&\r\n        this.field.sectionId !== this.bridgeService.configuration.currentSection.id);\r\n  }\r\n\r\n  /** @description Checks whether the validation should be shown.\r\n   * @return boolean Whether the validation should be shown.\r\n  */\r\n  public isValidationShown(): boolean {\r\n    return !this.isPristine && this.field.validationErrors && this.field.validationErrors.length > 0;\r\n  }\r\n\r\n  /** @description Checks whether the validation asterisk should be shown.\r\n   * @return boolean Whether the validation asterisk should be shown.\r\n  */\r\n  public isValidationAsteriskShown(): boolean {\r\n    return !this.isFormInDisplayMode() && this.field.validation && (this.field.validation.required || this.field.validation.min > 0);\r\n  }\r\n\r\n  /** @description Validates the form control and updates its validation errors list.\r\n   * @param any eventArguments The event arguments.\r\n   * @param boolean isSubmit Determines whether the validation is reached from form submission.\r\n   * @return Array<InputError> The list of validation errors.\r\n  */\r\n  public validate(eventArguments?: any, isSubmit?: boolean): Array<InputError> {\r\n    this.preValidate(isSubmit);\r\n\r\n    if (this.shouldValidate()) {\r\n      if (this.field.hidden) {\r\n        this.clearValidationErrors();\r\n      } else {\r\n        if (!this.isFormInDisplayMode()) {\r\n          if (this.validateForRequired) {\r\n            this.validateRequiredCondition();\r\n          }\r\n\r\n          if (this.validateForPattern) {\r\n            this.validatePatternCondition();\r\n          }\r\n\r\n          if (this.validateForRange) {\r\n            this.validateRangeCondition();\r\n          }\r\n        }\r\n      }\r\n\r\n      this.updateValidationSummary();\r\n    }\r\n\r\n    return this.field.validationErrors;\r\n  }\r\n\r\n  /** @description Adds an error to the validation errors list.\r\n   * @param string message The validation message.\r\n   * @param string type The validation error type.\r\n  */\r\n  public addValidationError(message: string, type: string = FieldComponent.ValidationErrorClass) {\r\n    if (!this.field.validationErrors) {\r\n      this.field.validationErrors = new Array<InputError>();\r\n    }\r\n\r\n    this.field.validationErrors.push(new InputError(type, message));\r\n  }\r\n\r\n  /** @description Clears the field's validation errors.*/\r\n  public clearValidationErrors() {\r\n    this.field.validationErrors = new Array<InputError>();\r\n  }\r\n\r\n  /** @description Checks whether the field should be valiated.\r\n   * @return boolean Whether the field should be valiated.\r\n  */\r\n  protected shouldValidate(): boolean {\r\n    return this.field.validation && (!this.field.validationErrors || this.field.validationErrors.length === 0);\r\n  }\r\n\r\n  /** @description Prepares the field for validation and makes sure it isn't validated repeatedly.\r\n   * @param boolean isSubmit Determines whether the validation is reached from form submission.\r\n   * @return Array<InputError> The list of validation errors.\r\n  */\r\n  protected preValidate(isSubmit: boolean): Array<InputError> {\r\n    this.isPristine = false;\r\n\r\n    if (isSubmit) {\r\n      if (this.field.validationErrors && this.field.validationErrors.length > 0) {\r\n        return this.field.validationErrors;\r\n      } else {\r\n        this.field.validationErrors = new Array<InputError>();\r\n\r\n        return this.field.validationErrors;\r\n      }\r\n    } else {\r\n      this.field.validationErrors = new Array<InputError>();\r\n\r\n      return this.field.validationErrors;\r\n    }\r\n  }\r\n\r\n  /** @description Updates the validation summary.*/\r\n  protected updateValidationSummary() {\r\n    this.bridgeService.configuration.validationErrors = new Array<InputError>();\r\n\r\n    for (const field of this.bridgeService.configuration.mergedFields) {\r\n      if (field.validationErrors) {\r\n        this.bridgeService.configuration.validationErrors = this.bridgeService\r\n          .configuration.validationErrors.concat(field.validationErrors);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @description Validates a control for the required condition and updates its validation errors list.\r\n   * @return Array<InputError> The list of validation errors.\r\n  */\r\n  protected validateRequiredCondition(): Array<InputError> {\r\n    if (this.field.validation.required) {\r\n      if (!this.field.data || !this.field.data.value || this.field.data.value.length === 0) {\r\n        this.field.validationErrors.push(new InputError(FieldComponent.ValidationErrorClass, this.field.validation.requiredText));\r\n      }\r\n    }\r\n\r\n    return this.field.validationErrors;\r\n  }\r\n\r\n  /** @description Validates a control for the pattern condition and updates its validation errors list.\r\n    * @return Array<InputError> The list of validation errors.\r\n  */\r\n  protected validatePatternCondition(): Array<InputError> {\r\n    if (this.field.validation.pattern && this.field.data && this.field.data.value && this.field.data.value.length > 0) {\r\n      const regEx = new RegExp(this.field.validation.pattern);\r\n      if (!regEx.test(this.field.data.value)) {\r\n        this.field.validationErrors.push(new InputError(FieldComponent.ValidationErrorClass, this.field.validation.patternText));\r\n      }\r\n    }\r\n\r\n    return this.field.validationErrors;\r\n  }\r\n\r\n  /** @description Validates a control for the range condition and updates its validation errors list.\r\n   * @return Array<InputError> The list of validation errors.\r\n  */\r\n  protected validateRangeCondition(): Array<InputError> {\r\n    const valueLength = this.field.data && this.field.data.value ? this.field.data.value.length : 0;\r\n\r\n    if ((this.field.validation.min && valueLength < this.field.validation.min) ||\r\n      (this.field.validation.max && valueLength > this.field.validation.max)) {\r\n      this.field.validationErrors.push(new InputError(FieldComponent.ValidationErrorClass, this.field.validation.rangeText));\r\n    }\r\n\r\n    return this.field.validationErrors;\r\n  }\r\n\r\n  /** @description Gets whether the form is in display mode.\r\n   * @return boolean Whether the form is in display mode.\r\n  */\r\n  protected isFormInDisplayMode(): boolean {\r\n    return this.bridgeService.configuration.settings.formMode === FormModes.Display;\r\n  }\r\n}\r\n","import { Component, Optional } from '@angular/core';\r\nimport { FieldComponent } from '../field/field.component';\r\nimport { TranslateService, LangChangeEvent } from '@ngx-translate/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BridgeService } from '../../../services/bridge.service';\r\nimport { UtilitiesService } from '../../../services/utilities.service';\r\nimport { HttpRequestsService } from '../../../services/http-requests.service';\r\n\r\n@Component({\r\n  selector: 'ntw-boundable-field',\r\n  template: ''\r\n})\r\nexport class BoundableFieldComponent extends FieldComponent {\r\n  constructor(\r\n    public bridgeService: BridgeService,\r\n    private httpRequestsService: HttpRequestsService,\r\n    private translateService: TranslateService,\r\n    private utilitiesService: UtilitiesService,\r\n    @Optional() private route: ActivatedRoute\r\n  ) {\r\n    super(bridgeService);\r\n  }\r\n\r\n  /** @description Handles the field's default settings.*/\r\n  public handleDefaultSettings() {\r\n    if (!this.isFormInDisplayMode()) {\r\n      this.dataBindOptions();\r\n\r\n      this.translateService.onLangChange.subscribe((event: LangChangeEvent) => {\r\n        this.dataBindOptions();\r\n      });\r\n    }\r\n  }\r\n\r\n  /** @description Binds the field's options.*/\r\n  protected dataBindOptions() {\r\n    if (this.field.data && this.field.data.optionsEndpoint) {\r\n      const endpoint = this.utilitiesService.replaceTokens(\r\n        this.bridgeService.configuration.endpoints.lookups[this.field.data.optionsEndpoint],\r\n        this.route,\r\n        this.bridgeService.additionalParameters\r\n      );\r\n\r\n      this.bindOptions(endpoint);\r\n    }\r\n  }\r\n\r\n  /** @description Binds the field's options.\r\n   * @param string endpoint The endpoint.\r\n  */\r\n  protected bindOptions(endpoint: string) {\r\n    this.httpRequestsService.get(endpoint).subscribe(response => {\r\n      this.field.data.options = response;\r\n    }, exception => {\r\n      console.error('bindOptions: ', exception);\r\n    });\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { BoundableFieldComponent } from '../boundable-field/boundable-field.component';\r\n\r\n@Component({\r\n  selector: 'ntw-checkbox-field',\r\n  template: `<div [class]=\"field.cssClasses.container\"\r\n     [hidden]=\"isFieldHidden()\"\r\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\r\n\r\n  <!-- label -->\r\n  <label [class]=\"field.cssClasses.label\"\r\n         [for]=\"field.name\">\r\n    {{field.label | translate}}\r\n    <span class=\"required-asterisk\"\r\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\r\n  </label>\r\n\r\n  <!-- input-->\r\n  <div class=\"checkBoxHolder\"\r\n       *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\">\r\n    <p-checkbox *ngFor=\"let checkbox of field.data.options; let i = index\"\r\n                [id]=\"field.name+'_'+i\"\r\n                [name]=\"field.name\"\r\n                [(ngModel)]=\"field.data.value\"\r\n                [class]=\"field.cssClasses.input\"\r\n                [ngClass]=\"{'invalid': isValidationShown()}\"\r\n                [title]=\"field.tooltip | translate\"\r\n                #input=\"ngModel\"\r\n                [required]=\"field.validation.required\"\r\n                [label]=\"checkbox.name | translate\"\r\n                [value]=\"checkbox.id\"\r\n                [disabled]=\"field.disabled\"\r\n                (onChange)=\"triggerDynamicEvent('onChange', $event, field);\"\r\n                (ngModelChange)=\"validate();\">\r\n    </p-checkbox>\r\n  </div>\r\n\r\n  <!-- display -->\r\n  <div [class]=\"field.cssClasses.display\"\r\n       *ngIf=\"bridgeService?.configuration?.settings?.formMode == 'Display'\">\r\n    <ul *ngIf=\"field?.data?.value?.length > 1\">\r\n      <li *ngFor=\"let title of field?.data?.value\">{{title}}</li>\r\n    </ul>\r\n    <span *ngIf=\"field?.data?.value?.length == 1\">\r\n      <span *ngFor=\"let title of field?.data?.value\">{{title}}</span>\r\n    </span>\r\n  </div>\r\n\r\n  <!-- validations -->\r\n  <div *ngIf=\"isValidationShown()\">\r\n    <div *ngFor=\"let error of field?.validationErrors\">\r\n      <p [ngClass]=\"error.type | translate\">\r\n        {{error.message | translate}}\r\n      </p>\r\n    </div>\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [`p-checkbox{display:block}body.ar :host ::ng-deep .ui-chkbox.ui-widget{float:right;margin-left:10px}`]\r\n})\r\nexport class CheckboxFieldComponent extends BoundableFieldComponent {\r\n  /** @property Whether to validate for range.*/\r\n  public validateForRange: boolean = true;\r\n\r\n  /** @description Clears the field's value.*/\r\n  public clearValue() {\r\n    if (this.field.data) {\r\n      this.field.data.value = [];\r\n\r\n      this.control.reset();\r\n\r\n      this.clearValidationErrors();\r\n    }\r\n  }\r\n\r\n  /** @description Appends the form data.\r\n   * @param FormData data The data.\r\n   * @return FormData The updated form data.\r\n  */\r\n  public appendFormData(data: FormData): FormData {\r\n    if (this.field.data && this.field.data.value) {\r\n      for (let i = 0; i < this.field.data.value.length; i++) {\r\n        const value = this.field.data.value[i];\r\n\r\n        data.append(this.field.name + '[' + i + ']', value);\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { FieldComponent } from '../field/field.component';\r\n\r\n@Component({\r\n  selector: 'ntw-chips-field',\r\n  template: `<div [class]=\"field.cssClasses.container\"\r\n     [hidden]=\"isFieldHidden()\"\r\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\r\n\r\n  <!-- label -->\r\n  <label [class]=\"field.cssClasses.label\"\r\n         [for]=\"field.name\">\r\n    {{field.label | translate}}\r\n    <span class=\"required-asterisk\"\r\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\r\n  </label>\r\n\r\n  <!-- input-->\r\n  <p-chips [id]=\"field.name\"\r\n           [name]=\"field.name\"\r\n           [placeholder]=\"(field.placeholder) ? (field.placeholder | translate) : ''\"\r\n           [class]=\"field.cssClasses.input\"\r\n           [ngClass]=\"{'invalid': isValidationShown()}\"\r\n           [title]=\"field.tooltip | translate\"\r\n           #input=\"ngModel\"\r\n           [disabled]=\"field.disabled\"\r\n           [(ngModel)]=\"field.data.value\"\r\n           [allowDuplicate]=\"field.validation.allowDuplicate\"\r\n           [addOnBlur]=\"field.addOnBlur\"\r\n           [addOnTab]=\"field.addOnTab\"\r\n           [required]=\"field.validation.required\"\r\n           *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\"\r\n           (onAdd)=\"triggerDynamicEvent('onAdd', $event, field);\"\r\n           (onRemove)=\"triggerDynamicEvent('onRemove', $event, field);\"\r\n           (ngModelChange)=\"validate();\">\r\n  </p-chips>\r\n\r\n  <!-- display -->\r\n  <div [class]=\"field.cssClasses.display\"\r\n       *ngIf=\"bridgeService?.configuration?.settings?.formMode == 'Display'\">\r\n    <ul>\r\n      <li *ngFor=\"let title of field.data.value\">{{title}}</li>\r\n    </ul>\r\n  </div>\r\n\r\n  <!-- validations -->\r\n  <div *ngIf=\"isValidationShown()\">\r\n    <div *ngFor=\"let error of field?.validationErrors\">\r\n      <p [ngClass]=\"error.type | translate\">\r\n        {{error.message | translate}}\r\n      </p>\r\n    </div>\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [`:host ::ng-deep .ui-chips-input-token,:host ::ng-deep .ui-chips-input-token input{width:100%}:host ::ng-deep .ui-chips>ul.ui-inputtext{padding:5px .25em}`]\r\n})\r\nexport class ChipsFieldComponent extends FieldComponent {\r\n  /** @property Whether to validate for range.*/\r\n  public validateForRange: boolean = true;\r\n\r\n  /** @description Appends the form data.\r\n   * @param FormData data The data.\r\n   * @return FormData The updated form data.\r\n  */\r\n  public appendFormData(data: FormData): FormData {\r\n    if (this.field.data && this.field.data.value) {\r\n      for (let i = 0; i < this.field.data.value.length; i++) {\r\n        const value = this.field.data.value[i];\r\n\r\n        data.append(this.field.name + '[' + i + ']', value);\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }\r\n}\r\n","import { Component, AfterViewInit, ViewChild } from '@angular/core';\r\nimport { FieldComponent } from '../field/field.component';\r\nimport { BridgeService } from '../../../services/bridge.service';\r\nimport { LanguageService } from '../../../services/language.service';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { DatePipe } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'ntw-datetime-field',\r\n  template: `<div [class]=\"field.cssClasses.container\"\r\n     [hidden]=\"isFieldHidden()\"\r\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\r\n\r\n  <!-- label -->\r\n  <label [class]=\"field.cssClasses.label\"\r\n         [for]=\"field.name\">\r\n    {{field.label | translate}}\r\n    <span class=\"required-asterisk\"\r\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\r\n  </label>\r\n\r\n  <!-- input-->\r\n  <p-calendar #calendar\r\n              [id]=\"field.name\"\r\n              [name]=\"field.name\"\r\n              [class]=\"field.cssClasses.input\"\r\n              [ngClass]=\"{'invalid': isValidationShown()}\"\r\n              [placeholder]=\"(field.placeholder) ? (field.placeholder | translate) : ''\"\r\n              [title]=\"field.tooltip | translate\"\r\n              #input=\"ngModel\"\r\n              [(ngModel)]=\"field.data.value\"\r\n              [required]=\"field.validation.required\"\r\n              [readonlyInput]=\"field.readonly\"\r\n              [disabled]=\"field.disabled\"\r\n              [showIcon]=\"field.showIcon\"\r\n              [showTime]=\"field.showTime\"\r\n              [hourFormat]=\"field.hourFormat\"\r\n              [monthNavigator]=\"field.monthNavigator\"\r\n              [yearNavigator]=\"field.yearNavigator\"\r\n              [yearRange]=\"field.yearRange\"\r\n              [dateFormat]=\"field.dateFormat\"\r\n              [minDate]=\"field.minDateValue\"\r\n              [maxDate]=\"field.maxDateValue\"\r\n              [defaultDate]=\"field.defaultDateValue\"\r\n              *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\"\r\n              (onClose)=\"validate();triggerDynamicEvent('onSelect', $event, field);\"\r\n              (onSelect)=\"validate();triggerDynamicEvent('onSelect', $event, field);\">\r\n  </p-calendar>\r\n\r\n  <!-- display -->\r\n  <span [class]=\"field.cssClasses.display\"\r\n        *ngIf=\"bridgeService?.configuration?.settings?.formMode == 'Display'\">\r\n    {{field.data.value | date:field.displayDateFormat}}\r\n  </span>\r\n\r\n  <!-- validations -->\r\n  <div *ngIf=\"isValidationShown()\">\r\n    <div *ngFor=\"let error of field?.validationErrors\">\r\n      <p [ngClass]=\"error.type | translate\">\r\n        {{error.message | translate}}\r\n      </p>\r\n    </div>\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [`body.en :host ::ng-deep button.ui-datepicker-trigger{right:0}body.ar :host ::ng-deep button.ui-datepicker-trigger{left:0}:host ::ng-deep span.ui-calendar{display:block}:host ::ng-deep p-calendar input{border-radius:.25rem}body.ar :host ::ng-deep .ui-calendar-button{border-radius:.25rem 0 0 .25rem}body.ar :host ::ng-deep .ui-calendar.ui-calendar-w-btn input{border-top-right-radius:.25rem;border-bottom-right-radius:.25rem}:host ::ng-deep button.ui-datepicker-trigger{position:absolute}:host ::ng-deep .ui-calendar .ui-datepicker{width:17em;min-width:auto}:host ::ng-deep .ui-calendar .ui-calendar-button .ui-button-icon-left{font-size:1.25em}`]\r\n})\r\nexport class DatetimeFieldComponent extends FieldComponent implements AfterViewInit {\r\n  /** @property The search element.*/\r\n  @ViewChild('calendar') calendarElement: any;\r\n\r\n  /** @property Whether to validate for required.*/\r\n  public validateForRequired: boolean = true;\r\n\r\n  constructor(\r\n    public bridgeService: BridgeService,\r\n    private translateService: TranslateService,\r\n    private languageService: LanguageService,\r\n    private datePipe: DatePipe\r\n  ) {\r\n    super(bridgeService);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.setCalendarOptions();\r\n\r\n    this.translateService.onLangChange.subscribe((response) => {\r\n      this.setCalendarOptions();\r\n    });\r\n  }\r\n\r\n  /** @description Appends the form data.\r\n   * @param FormData data The data.\r\n   * @return FormData The updated form data.\r\n  */\r\n  public appendFormData(data: FormData): FormData {\r\n    if (this.field.data && this.field.data.value) {\r\n      data.append(this.field.name, this.datePipe.transform(this.field.data.value, this.field.formDataDateFormat));\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  /** @description Handles the field's default settings.*/\r\n  public handleDefaultSettings() {\r\n    // buggy if done from here after component is loaded. Moved back to before component loaded.\r\n  }\r\n\r\n  /** @description Sets the calendar options.*/\r\n  private setCalendarOptions() {\r\n    if (this.calendarElement && this.languageService.translations) {\r\n      const calendarOptions = this.languageService.translations.calendarOptions;\r\n\r\n      if (calendarOptions) {\r\n        this.calendarElement.locale = calendarOptions;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n","import { Component, ViewChild } from '@angular/core';\r\nimport { NgbInputDatepicker } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgbCalendar, NgbDatepickerI18n, NgbCalendarIslamicUmalqura } from '@ng-bootstrap/ng-bootstrap';\r\nimport { FieldComponent } from '../field/field.component';\r\nimport { IslamicI18n } from '../../../services/datepicker-calendar.service';\r\nimport { BridgeService } from '../../../services/bridge.service';\r\nimport { UtilitiesService } from '../../../services/utilities.service';\r\n\r\n@Component({\r\n  selector: 'ntw-datetime-hijri-field',\r\n  template: `<div [class]=\"field.cssClasses.container\"\r\n     [hidden]=\"isFieldHidden()\"\r\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\r\n\r\n  <!-- label -->\r\n  <label [class]=\"field.cssClasses.label\"\r\n         [for]=\"field.name\">\r\n    {{field.label | translate}}\r\n    <span class=\"required-asterisk\"\r\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\r\n  </label>\r\n\r\n  <!-- input-->\r\n  <div class=\"hijri-date-control\">\r\n    <input [name]=\"field.name\"\r\n           [placeholder]=\"(field.placeholder) ? (field.placeholder | translate) : ''\"\r\n           [class]=\"field.cssClasses.input\"\r\n           [ngClass]=\"{'invalid': isValidationShown()}\"\r\n           ngbDatepicker\r\n           #input=\"ngbDatepicker\"\r\n           #defaultInput=\"ngModel\"\r\n           [readonly]=\"field.readonly\"\r\n           [disabled]=\"field.disabled\"\r\n           [(ngModel)]=\"field.data.value\"\r\n           [minDate]=\"field.minDateValue\"\r\n           [maxDate]=\"field.maxDateValue\"\r\n           [showWeekNumbers]=\"field.showWeekNumbers\"\r\n           [displayMonths]=\"field.displayMonths\"\r\n           [outsideDays]=\"field.outsideDays\"\r\n           [showWeekdays]=\"field.showWeekdays\"\r\n           *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\"\r\n           (click)=\"toggleCalendar();validate();\"\r\n           (ngModelChange)=\"validate();triggerDynamicEvent('onSelect', $event, field);\" />\r\n\r\n    <!-- icon -->\r\n    <button class=\"hijri-date-icon-container\"\r\n            [disabled]=\"field.disabled\"\r\n            type=\"button\"\r\n            (click)=\"toggleCalendar();\">\r\n      <span class=\"hijri-date-icon\"\r\n            *ngIf=\"field.showIcon\">\r\n      </span>\r\n    </button>\r\n  </div>\r\n\r\n  <!-- display -->\r\n  <span [class]=\"field.cssClasses.display\"\r\n        *ngIf=\"bridgeService?.configuration?.settings?.formMode == 'Display'\">\r\n    {{field?.data?.value?.day}}/{{field?.data?.value?.month}}/{{field?.data?.value?.year}}\r\n  </span>\r\n\r\n  <!-- validations -->\r\n  <div *ngIf=\"isValidationShown()\">\r\n    <div *ngFor=\"let error of field?.validationErrors\">\r\n      <p [ngClass]=\"error.type | translate\">\r\n        {{error.message | translate}}\r\n      </p>\r\n    </div>\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [`.hijri-date{height:35px}.hijri-date-control{position:relative}.hijri-date-icon-container{position:absolute;top:0;padding:0 6px;background-color:#2399e5;color:#fff;cursor:pointer;height:100%;line-height:1.8;border:0}button.hijri-date-icon-container:disabled{opacity:.35}.hijri-date-icon:focus,.hijri-date-icon:hover{background:#1f89ce}.hijri-date-icon:after{content:'\\\\e927';font-family:primeicons;font-size:1.25em}body.ar :host ::ng-deep ngb-datepicker ngb-datepicker-navigation .ngb-dp-navigation-chevron{-webkit-transform:rotate(45deg);transform:rotate(45deg)}body.ar :host ::ng-deep ngb-datepicker ngb-datepicker-navigation .right .ngb-dp-navigation-chevron{-webkit-transform:rotate(-135deg);transform:rotate(-135deg)}body.ar :host ::ng-deep .custom-select{background-position:left.75rem center}body.ar :host ::ng-deep .hijri-date-icon-container{left:0}body.en :host ::ng-deep .hijri-date-icon-container{right:0}:host ::ng-deep .custom-select{background-position:left .25rem center!important;direction:rtl!important;min-width:100px}:host ::ng-deep ngb-datepicker-month-view .ngb-dp-day,:host ::ng-deep ngb-datepicker-month-view .ngb-dp-week-number,:host ::ng-deep ngb-datepicker-month-view .ngb-dp-weekday{width:2.5rem;height:2.5rem}:host ::ng-deep ngb-datepicker-month-view .ngb-dp-day div{width:100%;height:100%;line-height:2.5rem}`],\r\n  providers: [\r\n    { provide: NgbCalendar, useClass: NgbCalendarIslamicUmalqura },\r\n    { provide: NgbDatepickerI18n, useClass: IslamicI18n }\r\n  ]\r\n})\r\nexport class DatetimeHijriFieldComponent extends FieldComponent {\r\n  @ViewChild('input') calendar: NgbInputDatepicker;\r\n\r\n  /** @property Whether to validate for required.*/\r\n  public validateForRequired: boolean = true;\r\n\r\n  constructor(\r\n    public bridgeService: BridgeService,\r\n    private utilitiesService: UtilitiesService\r\n  ) {\r\n    super(bridgeService);\r\n  }\r\n\r\n  /** @description Handles the field's default settings.*/\r\n  public handleDefaultSettings() {\r\n    if (this.field.minDate) {\r\n      this.field.minDateValue = this.utilitiesService.evaluateFunctionOrDefault(this.field.minDate, new Date(this.field.minDate));\r\n    }\r\n\r\n    if (this.field.maxDate) {\r\n      this.field.maxDateValue = this.utilitiesService.evaluateFunctionOrDefault(this.field.maxDate, new Date(this.field.maxDate));\r\n    }\r\n\r\n    if (this.field.data.dateValue) {\r\n      this.field.data.value = this.utilitiesService.evaluateFunctionOrDefault(\r\n        this.field.data.dateValue,\r\n        new Date(this.field.data.dateValue)\r\n      );\r\n    }\r\n  }\r\n\r\n  /** @description Appends the form data.\r\n   * @param FormData data The data.\r\n   * @return FormData The updated form data.\r\n  */\r\n  public appendFormData(data: FormData): FormData {\r\n    if (this.field.data && this.field.data.value) {\r\n      data.append(this.field.name + '.year', this.field.data.value.year);\r\n\r\n      data.append(this.field.name + '.month', this.field.data.value.month);\r\n\r\n      data.append(this.field.name + '.day', this.field.data.value.day);\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  /** @description Toggles the calendar.*/\r\n  public toggleCalendar() {\r\n    this.calendar.toggle();\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { FieldComponent } from '../field/field.component';\r\n\r\n@Component({\r\n  selector: 'ntw-editor-field',\r\n  template: `<div [class]=\"field.cssClasses.container\"\r\n     [hidden]=\"isFieldHidden()\"\r\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\r\n\r\n  <!-- label -->\r\n  <label [class]=\"field.cssClasses.label\"\r\n         [for]=\"field.name\">\r\n    {{field.label | translate}}\r\n    <span class=\"required-asterisk\"\r\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\r\n  </label>\r\n\r\n  <!-- input-->\r\n  <div [ngClass]=\"{'hide-toolbar':!field.showToolbar}\">\r\n    <p-editor [id]=\"field.name\"\r\n              [name]=\"field.name\"\r\n              #input=\"ngModel\"\r\n              [placeholder]=\"(field.placeholder) ? (field.placeholder | translate) : ''\"\r\n              [class]=\"field.cssClasses.input\"\r\n              [ngClass]=\"{'invalid': isValidationShown()}\"\r\n              [title]=\"field.tooltip | translate\"\r\n              [readonly]=\"field.readonly\"\r\n              [(ngModel)]=\"field.data.value\"\r\n              [style]=\"{'height':field.height}\"\r\n              *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\"\r\n              (onSelectionChange)=\"triggerDynamicEvent('onSelectionChange', $event, field);\"\r\n              (onTextChange)=\"triggerDynamicEvent('onChange', $event, field);\"\r\n              (ngModelChange)=\"validate();\">\r\n    </p-editor>\r\n  </div>\r\n\r\n  <!-- display -->\r\n  <span [innerHTML]=\"field.data.value\"\r\n        *ngIf=\"bridgeService?.configuration?.settings?.formMode == 'Display'\"></span>\r\n\r\n  <!-- validations -->\r\n  <div *ngIf=\"isValidationShown()\">\r\n    <div *ngFor=\"let error of field?.validationErrors\">\r\n      <p [ngClass]=\"error.type | translate\">\r\n        {{error.message | translate}}\r\n      </p>\r\n    </div>\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [`body.ar :host ::ng-deep .ql-editor p{direction:rtl;text-align:right}body.ar :host ::ng-deep span.ql-picker-label{text-align:left}body.ar :host ::ng-deep .ql-editor.ql-blank::before{left:unset}:host ::ng-deep .hide-toolbar .ui-editor-toolbar{display:none}:host ::ng-deep .hide-toolbar .ui-editor-content{border-top:1px solid #ccc!important}`]\r\n})\r\nexport class EditorFieldComponent extends FieldComponent {\r\n  /** @property Whether to validate for required.*/\r\n  public validateForRequired: boolean = true;\r\n\r\n  /** @description Gets the field's value.*/\r\n  public getValue() {\r\n    if (this.field.showToolbar) {\r\n      return this.field.data.value;\r\n    } else {\r\n      return this.field.data.value.replace(/<[^>]*>/g, '');\r\n    }\r\n  }\r\n}\r\n","import { Component, ViewChild } from '@angular/core';\r\nimport { FieldComponent } from '../field/field.component';\r\nimport { InputError } from '../../../models/input-error';\r\nimport { FileUpload } from 'primeng/fileupload';\r\n\r\n@Component({\r\n  selector: 'ntw-file-upload-field',\r\n  template: `<div [class]=\"field.cssClasses.container\"\r\n     [hidden]=\"isFieldHidden()\"\r\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\r\n\r\n  <!-- label -->\r\n  <label [class]=\"field.cssClasses.label\"\r\n         [for]=\"field.name\">\r\n    {{field.label | translate}}\r\n    <span class=\"required-asterisk\"\r\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\r\n  </label>\r\n\r\n  <!-- input-->\r\n  <p-fileUpload [id]=\"field.name\"\r\n                [name]=\"field.name\"\r\n                [class]=\"field.cssClasses.input\"\r\n                [ngClass]=\"{'invalid': isValidationShown()}\"\r\n                [url]=\"field.data.url\"\r\n                [multiple]=\"field.multiple\"\r\n                [accept]=\"field.validation.accept\"\r\n                #input\r\n                [auto]=\"field.auto\"\r\n                [maxFileSize]=\"field.validation.maxFileSizeInBytes\"\r\n                [mode]=\"field.mode\"\r\n                [showCancelButton]=\"field.buttons.showCancelButton\"\r\n                [showUploadButton]=\"field.buttons.showUploadButton\"\r\n                [chooseLabel]=\"field.buttons.chooseLabel | translate\"\r\n                [uploadLabel]=\"field.buttons.uploadLabel | translate\"\r\n                [cancelLabel]=\"field.buttons.cancelLabel | translate\"\r\n                [title]=\"field.tooltip | translate\"\r\n                [disabled]=\"field.disabled\"\r\n                invalidFileSizeMessageSummary=\"invalidFileSize\"\r\n                invalidFileSizeMessageDetail=\"invalidFileSize\"\r\n                invalidFileTypeMessageDetail=\"invalidFileType\"\r\n                invalidFileTypeMessageSummary=\"invalidFileType\"\r\n                customUpload=true\r\n                *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\"\r\n                (onSelect)=\"validate('onSelect');\"\r\n                (onRemove)=\"validate('onRemove');\"\r\n                (onClear)=\"validate('onClear');\">\r\n  </p-fileUpload>\r\n\r\n  <!-- display -->\r\n  <div class=\"upload-file-viewer\"\r\n       *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'New' && field?.data?.value?.length > 0\">\r\n    <div class=\"upload-file-item\"\r\n         *ngFor=\"let file of field.data.value\">\r\n      <a [href]=\"file.url\"\r\n         [download]=\"file.fileName\"\r\n         target=\"_blank\"\r\n         class=\"upload-file-anchor\">\r\n        <span>\r\n          <i class=\"fa fa-file\"></i>\r\n        </span>\r\n        <span class=\"upload-file-title\">{{file.fileName}}</span>\r\n      </a>\r\n\r\n      <a href=\"javascript:;\"\r\n         (click)=\"removeFile(file);validate('onRemoveFile');\"\r\n         *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\"\r\n         class=\"trash-icon-style\">\r\n        <span>\r\n          <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n        </span>\r\n      </a>\r\n      <div class=\"clearfix\"></div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- validations -->\r\n  <div *ngIf=\"isValidationShown()\">\r\n    <div *ngFor=\"let error of field?.validationErrors\">\r\n      <p [ngClass]=\"error.type | translate\">\r\n        {{error.message | translate}}\r\n      </p>\r\n    </div>\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [`:host ::ng-deep p-fileupload .ui-messages-error{display:none!important}:host ::ng-deep .ui-fileupload{margin-bottom:8px}.upload-file-viewer{border:1px solid #d5d5d5;padding:10px}.upload-file-viewer .upload-file-item{border:1px solid #d5d5d5;padding:10px;background:linear-gradient(to bottom,#f6f7f9 0,#ebedf0 100%);margin-bottom:10px}.upload-file-title{padding:0 15px}a.upload-file-anchor{line-height:2}.upload-file-viewer div:last-child{margin-bottom:0}a.trash-icon-style{padding:6px 11px;border-radius:6px;font-size:12px;border:1px solid #2399e5;color:#fff;background:#2399e5;transition:background-color .2s}a.trash-icon-style:hover{border:1px solid #1f89ce;background:#1f89ce}body.ar :host ::ng-deep a.trash-icon-style{float:left}body.en :host ::ng-deep a.trash-icon-style{float:right}`]\r\n})\r\nexport class FileUploadFieldComponent extends FieldComponent {\r\n  /** @property The file upload control.*/\r\n  @ViewChild(FileUpload) fileUploadControl: FileUpload;\r\n\r\n  /** @description Clears the field's value.*/\r\n  public clearValue() {\r\n    if (this.fileUploadControl) {\r\n      this.fileUploadControl.clear();\r\n    }\r\n\r\n    const length = this.field.data.value.length;\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      this.removeFile(this.field.data.value[i]);\r\n    }\r\n\r\n    this.clearValidationErrors();\r\n  }\r\n\r\n  /** @description Appends the form data.\r\n   * @param FormData data The data.\r\n   * @return FormData The updated form data.\r\n  */\r\n  public appendFormData(data: FormData): FormData {\r\n    if (this.fileUploadControl.files) {\r\n      for (const file of this.fileUploadControl.files) {\r\n        data.append(this.field.name, file);\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  /** @description Validates the form control and updates its validation errors list.\r\n   * @param any eventArguments The event arguments.\r\n   * @param boolean isSubmit Determines whether the validation is reached from form submission.\r\n   * @return Array<InputError> The list of validation errors.\r\n  */\r\n  public validate(eventArguments?: any, isSubmit?: boolean): Array<InputError> {\r\n    this.preValidate(isSubmit);\r\n\r\n    if (this.shouldValidate()) {\r\n      let valueLength = 0;\r\n      if (this.fileUploadControl) {\r\n        valueLength = eventArguments === 'onRemove' ? this.fileUploadControl.files.length - 1 : this.fileUploadControl.files.length;\r\n      }\r\n\r\n      if (this.field.data.value) {\r\n        valueLength += this.field.data.value.length;\r\n      }\r\n\r\n      if ((this.field.validation.min && valueLength < this.field.validation.min) ||\r\n        (this.field.validation.max && valueLength > this.field.validation.max)) {\r\n        this.field.validationErrors.push(new InputError(FieldComponent.ValidationErrorClass, this.field.validation.rangeText));\r\n      }\r\n\r\n      if (this.field.validation.maxFileSizeInBytes > 0 && this.fileUploadControl && this.fileUploadControl.msgs) {\r\n        const invalidFileSizeMessage = this.fileUploadControl.msgs.find(m => m.summary === 'invalidFileSize');\r\n\r\n        if (invalidFileSizeMessage) {\r\n          this.field.validationErrors.push(new InputError(FieldComponent.ValidationErrorClass, this.field.validation.invalidFileSizeText));\r\n        }\r\n\r\n        const invalidFileTypeMessage = this.fileUploadControl.msgs.find(m => m.summary === 'invalidFileType');\r\n\r\n        if (invalidFileTypeMessage) {\r\n          this.field.validationErrors.push(new InputError(FieldComponent.ValidationErrorClass, this.field.validation.invalidFileTypeText));\r\n        }\r\n      }\r\n\r\n      this.updateValidationSummary();\r\n    }\r\n\r\n    return this.field.validationErrors;\r\n  }\r\n\r\n  /** @description Removes the file.\r\n   * @param any file The file to remove.\r\n  */\r\n  public removeFile(file: any) {\r\n    this.field.data.value.pop(file);\r\n  }\r\n}\r\n\r\n","import { Component, ViewChild, ElementRef, OnInit } from '@angular/core';\r\nimport { FieldComponent } from '../field/field.component';\r\nimport { ImageCropperComponent, CropperSettings } from 'ng2-img-cropper';\r\nimport { FileUpload } from 'primeng/fileupload';\r\n\r\n@Component({\r\n  selector: 'ntw-image-cropper-field',\r\n  template: `<div [class]=\"field.cssClasses.container\"\r\n     [hidden]=\"isFieldHidden()\"\r\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\r\n\r\n  <!-- label -->\r\n  <label [class]=\"field?.cssClasses?.label\"\r\n         [for]=\"field.name\">\r\n    {{field.label | translate}}\r\n    <span class=\"required-asterisk\"\r\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\r\n  </label>\r\n\r\n  <!-- input -->\r\n  <!-- upload control -->\r\n  <p-fileUpload [id]=\"field.name\"\r\n                [name]=\"field.name\"\r\n                [class]=\"field.cssClasses.input\"\r\n                [ngClass]=\"{'invalid': isValidationShown()}\"\r\n                accept=\"image/*\"\r\n                mode=\"advanced\"\r\n                [showCancelButton]=false\r\n                [showUploadButton]=false\r\n                [chooseLabel]=\"field.buttons.chooseLabel | translate\"\r\n                [title]=\"field.tooltip | translate\"\r\n                [disabled]=\"field.disabled\"\r\n                invalidFileSizeMessageSummary=\"invalidFileSize\"\r\n                invalidFileSizeMessageDetail=\"invalidFileSize\"\r\n                invalidFileTypeMessageDetail=\"invalidFileType\"\r\n                invalidFileTypeMessageSummary=\"invalidFileType\"\r\n                customUpload=true\r\n                *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\"\r\n                (onSelect)=\"setCropperImage();validate();\"\r\n                (onRemove)=\"clearValue();validate();\">\r\n  </p-fileUpload>\r\n\r\n  <!-- cropper -->\r\n  <img-cropper *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\"\r\n               [hidden]=\"!imageFile.src\"\r\n               [image]=\"imageFile\"\r\n               [settings]=\"cropperSettings\"\r\n               (onCrop)=\"setValue()\">\r\n  </img-cropper>\r\n\r\n  <!-- cropped image -->\r\n  <span class=\"cropped-image\"\r\n        *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\"\r\n        [hidden]=\" !imageFile.image\">\r\n    <img #croppedImage\r\n         *ngIf=\"imageFile.image\"\r\n         [src]=\"imageFile.image\"\r\n         [width]=\"cropperSettings.width\"\r\n         [height]=\"cropperSettings.height\">\r\n  </span>\r\n\r\n  <!-- display -->\r\n  <span [class]=\"field.cssClasses.display\"\r\n        *ngIf=\"bridgeService?.configuration?.settings?.formMode == 'Display'\">\r\n    <img *ngIf=\"field.data.value\"\r\n         [src]=\"field.data.value\"\r\n         [width]=\"cropperSettings.width\"\r\n         [height]=\"cropperSettings.height\">\r\n  </span>\r\n\r\n  <!-- validations -->\r\n  <div *ngIf=\"isValidationShown()\">\r\n    <div *ngFor=\"let error of field?.validationErrors\">\r\n      <p [ngClass]=\"error.type | translate\">\r\n        {{error.message | translate}}\r\n      </p>\r\n    </div>\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [`input.form-input{border:1px solid #ced4da;border-radius:.25rem;padding:5px}p-fileupload{display:block}:host ::ng-deep img-cropper .ng2-imgcrop{border:1px solid #d5d5d5;padding:20px 0;background-color:#ebedf0;width:100%;margin:10px 0;display:block}.form-display img{border:1px solid #d5d5d5;background-color:#ebedf0;padding:10px}.cropped-image{width:100%;display:block;border:1px solid #d5d5d5;background-color:#ebedf0;margin:0 auto;text-align:center;padding:10px}`]\r\n})\r\nexport class ImageCropperFieldComponent extends FieldComponent implements OnInit {\r\n  /** @property The image cropper component.*/\r\n  @ViewChild(ImageCropperComponent) cropper: ImageCropperComponent;\r\n\r\n  /** @property */\r\n  @ViewChild('croppedImage') croppedImageElement: ElementRef;\r\n\r\n  /** @property The file upload control.*/\r\n  @ViewChild(FileUpload) fileUploadControl: FileUpload;\r\n\r\n  /** @property The cropper settings.*/\r\n  public cropperSettings: CropperSettings;\r\n\r\n  /** @property The image file.*/\r\n  public imageFile: any = new Image();\r\n\r\n  /** @property Whether to validate for required.*/\r\n  public validateForRequired: boolean = true;\r\n\r\n  ngOnInit() {\r\n    this.initializeCropper();\r\n  }\r\n\r\n  /** @description Updates the field's value.\r\n   * @param any newValue The new field value.\r\n  */\r\n  public updateValue(newValue: any) {\r\n    this.field.data.value = newValue.value;\r\n\r\n    if (!this.isFormInDisplayMode()) {\r\n      this.imageFile = new Image();\r\n\r\n      this.imageFile.setAttribute('crossOrigin', 'anonymous');\r\n\r\n      this.imageFile.src = newValue.value;\r\n\r\n      // workaround as it is not working without it. no idea why :)\r\n      setTimeout(() => { this.cropper.setImage(this.imageFile); }, 1);\r\n    }\r\n  }\r\n\r\n  /** @description Clears the field's value.*/\r\n  public clearValue() {\r\n    if (this.field.data) {\r\n      this.field.data.value = '';\r\n\r\n      this.fileUploadControl.clear();\r\n\r\n      this.cropper.reset();\r\n\r\n      this.imageFile = new Image();\r\n\r\n      this.clearValidationErrors();\r\n    }\r\n  }\r\n\r\n  /** @description Sets the cropped image value.*/\r\n  public setValue() {\r\n    if (this.croppedImageElement) {\r\n      this.field.data.value = this.croppedImageElement.nativeElement.currentSrc;\r\n    }\r\n  }\r\n\r\n  /** @description Sets the cropped image.*/\r\n  public setCropperImage() {\r\n    const selectedFile = this.fileUploadControl.files[0];\r\n\r\n    if (selectedFile) {\r\n      this.imageFile = new Image();\r\n\r\n      const fileReader = new FileReader();\r\n\r\n      // set as a temporary value for validation since the read is async.\r\n      this.field.data.value = 'placeholder';\r\n\r\n      fileReader.onloadend = (loadEvent: any) => {\r\n        this.imageFile.src = loadEvent.target.result;\r\n\r\n        this.cropper.setImage(this.imageFile);\r\n\r\n        this.field.data.value = this.imageFile.src;\r\n      };\r\n\r\n      fileReader.readAsDataURL(selectedFile);\r\n    }\r\n  }\r\n\r\n  /** @description Initializes the cropper component.*/\r\n  private initializeCropper() {\r\n    this.cropperSettings = new CropperSettings();\r\n\r\n    this.cropperSettings.noFileInput = true;\r\n\r\n    this.cropperSettings.width = this.cropperSettings.croppedWidth = this.field.cropperSettings.width;\r\n\r\n    this.cropperSettings.height = this.cropperSettings.croppedHeight = this.field.cropperSettings.height;\r\n\r\n    this.cropperSettings.canvasWidth = this.field.cropperSettings.canvasWidth;\r\n\r\n    this.cropperSettings.canvasHeight = this.field.cropperSettings.canvasHeight;\r\n\r\n    this.cropperSettings.minWidth = this.field.cropperSettings.minWidth;\r\n\r\n    this.cropperSettings.minHeight = this.field.cropperSettings.minHeight;\r\n\r\n    this.cropperSettings.rounded = this.field.cropperSettings.rounded;\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { FieldComponent } from '../field/field.component';\r\n\r\n@Component({\r\n  selector: 'ntw-info-field',\r\n  template: `<div [class]=\"field.cssClasses.container\"\r\n     [hidden]=\"isFieldHidden()\"\r\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\r\n  <div [innerHTML]=\"field.htmlSnippet | translate\"></div>\r\n</div>\r\n`,\r\n  styles: [``]\r\n})\r\nexport class InfoFieldComponent extends FieldComponent {\r\n\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { FieldComponent } from '../field/field.component';\r\n\r\n@Component({\r\n  selector: 'ntw-input-field',\r\n  template: `<div [class]=\"field.cssClasses.container\"\r\n     [hidden]=\"isFieldHidden()\"\r\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\r\n\r\n  <!-- label -->\r\n  <label [class]=\"field.cssClasses.label\"\r\n         [for]=\"field.name\">\r\n    {{field.label | translate}}\r\n    <span class=\"required-asterisk\"\r\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\r\n  </label>\r\n\r\n  <!-- input-->\r\n  <input [id]=\"field.name\"\r\n         [name]=\"field.name\"\r\n         [(ngModel)]=\"field.data.value\"\r\n         [class]=\"field.cssClasses.input\"\r\n         [ngClass]=\"{'invalid': isValidationShown()}\"\r\n         [placeholder]=\"(field.placeholder) ? (field.placeholder | translate) : ''\"\r\n         [title]=\"field.tooltip | translate\"\r\n         [autocomplete]=\"field.autoComplete\"\r\n         #input=\"ngModel\"\r\n         [type]=\"field.fieldType\"\r\n         [required]=\"field.validation.required\"\r\n         [pattern]=\"field.validation.pattern\"\r\n         [maxlength]=\"field.validation.length\"\r\n         [readonly]=\"field.readonly\"\r\n         [disabled]=\"field.disabled\"\r\n         *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\"\r\n         (ngModelChange)=\"validate();triggerDynamicEvent('onChange', $event, field);\">\r\n\r\n  <!-- display -->\r\n  <span [class]=\"field.cssClasses.display\"\r\n        *ngIf=\"bridgeService?.configuration?.settings?.formMode == 'Display'\">\r\n    {{field.data.value}}\r\n  </span>\r\n\r\n  <!-- validations -->\r\n  <div *ngIf=\"isValidationShown()\">\r\n    <div *ngFor=\"let error of field?.validationErrors\">\r\n      <p [ngClass]=\"error.type | translate\">\r\n        {{error.message | translate}}\r\n      </p>\r\n    </div>\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [`input.form-input{border:1px solid #ced4da;border-radius:.25rem;padding:5px}`]\r\n})\r\nexport class InputFieldComponent extends FieldComponent {\r\n  /** @property Whether to validate for required.*/\r\n  public validateForRequired: boolean = true;\r\n\r\n  /** @property Whether to validate for pattern.*/\r\n  public validateForPattern: boolean = true;\r\n}\r\n","import { Component, ViewChild, ElementRef, NgZone } from '@angular/core';\r\nimport { FieldComponent } from '../field/field.component';\r\nimport { BridgeService } from '../../../services/bridge.service';\r\nimport { MouseEvent, MapsAPILoader } from '@agm/core';\r\nimport { } from 'googlemaps';\r\nimport { Marker } from '../../../models/map-marker';\r\n\r\n@Component({\r\n  selector: 'ntw-location-field',\r\n  template: `<div [class]=\"field.cssClasses.container\"\r\n     [hidden]=\"isFieldHidden()\"\r\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\r\n\r\n  <!-- label -->\r\n  <label [class]=\"field.cssClasses.label\"\r\n         [for]=\"field.name\">\r\n    {{field.label | translate}}\r\n    <span class=\"required-asterisk\"\r\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\r\n  </label>\r\n\r\n  <div class=\"search-location-container\"\r\n       *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\">\r\n    <!-- input && display -->\r\n    <input #search\r\n           [id]=\"field.name\"\r\n           [name]=\"field.name\"\r\n           [title]=\"field.tooltip | translate\"\r\n           [placeholder]=\"(field.placeholder) ? (field.placeholder | translate) : ''\"\r\n           autocorrect=\"off\"\r\n           autocapitalize=\"off\"\r\n           spellcheck=\"false\"\r\n           type=\"text\"\r\n           [class]=\"field.cssClasses.input\"\r\n           (keydown.enter)=\"$event.preventDefault()\">\r\n\r\n    <!-- icon -->\r\n    <span class=\"search-location-icon\">\r\n    </span>\r\n  </div>\r\n\r\n  <agm-map [latitude]=\"field.defaultLocation?.latitude\"\r\n           [longitude]=\"field.defaultLocation?.longitude\"\r\n           [zoom]=\"field.zoom\"\r\n           [zoomControl]=\"field.zoomControl\"\r\n           [ngClass]=\"{'invalid': isValidationShown()}\"\r\n           (mapClick)=\"addMarkers($event);validate();\">\r\n\r\n    <agm-marker *ngFor=\"let marker of field.data.value\"\r\n                (markerClick)=\"triggerDynamicEvent('markerClick', $event, marker);\"\r\n                [latitude]=\"marker.latitude\"\r\n                [longitude]=\"marker.longitude\"\r\n                [markerDraggable]=\"marker.draggable && bridgeService?.configuration?.settings?.formMode != 'Display'\"\r\n                (dragEnd)=\"updateMarkerPosition(marker, $event)\">\r\n\r\n      <agm-info-window *ngIf=\"marker.infoHtml\">\r\n        <div [innerHTML]=\"marker.infoHtml | translate\"></div>\r\n      </agm-info-window>\r\n    </agm-marker>\r\n  </agm-map>\r\n\r\n  <!-- validations -->\r\n  <div *ngIf=\"isValidationShown()\">\r\n    <div *ngFor=\"let error of field?.validationErrors\">\r\n      <p [ngClass]=\"error.type | translate\">\r\n        {{error.message | translate}}\r\n      </p>\r\n    </div>\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [`agm-map{width:100%;height:300px}span.search-location-icon:after{content:\"\\\\f002\";font:14px/2.5 FontAwesome;position:absolute;height:100%;color:#555}.search-location-container{position:relative}body.en :host ::ng-deep span.search-location-icon:after{right:5px;-webkit-transform:rotate(90deg);transform:rotate(90deg)}body.ar :host ::ng-deep span.search-location-icon:after{left:5px}input.form-input{border:1px solid #ced4da;border-radius:.25rem;padding:5px}`]\r\n})\r\nexport class LocationFieldComponent extends FieldComponent {\r\n  /** @property The search element.*/\r\n  @ViewChild('search') searchElement: ElementRef;\r\n\r\n  /** @property Whether to validate for range.*/\r\n  public validateForRange: boolean = true;\r\n\r\n  constructor(\r\n    public bridgeService: BridgeService,\r\n    private mapsAPILoader: MapsAPILoader,\r\n    private ngZone: NgZone\r\n  ) {\r\n    super(bridgeService);\r\n  }\r\n\r\n  /** @description Handles the field's default settings.*/\r\n  public handleDefaultSettings() {\r\n    // set a map field's location to use default location if no value is set and location is available.\r\n    if (!this.field.defaultLocation || !this.field.defaultLocation.latitude || !this.field.defaultLocation.longitude) {\r\n      if ('geolocation' in navigator) {\r\n        navigator.geolocation.getCurrentPosition((position) => {\r\n          this.field.defaultLocation = {\r\n            latitude: position.coords.latitude,\r\n            longitude: position.coords.longitude\r\n          };\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @description Updates the field's value.\r\n   * @param any newValue The new field value.\r\n  */\r\n  public updateValue(newValue: any) {\r\n    for (const value of newValue.value) {\r\n      this.addMarkersFromLocation(value.latitude, value.longitude);\r\n    }\r\n  }\r\n\r\n  /** @description Clears the field's value.*/\r\n  public clearValue() {\r\n    if (this.field.data) {\r\n      this.field.data.value = [];\r\n\r\n      this.clearValidationErrors();\r\n    }\r\n  }\r\n\r\n  /** @description Appends the form data.\r\n   * @param FormData data The data.\r\n   * @return FormData The updated form data.\r\n  */\r\n  public appendFormData(data: FormData): FormData {\r\n    if (this.field.data && this.field.data.value) {\r\n      for (let i = 0; i < this.field.data.value.length; i++) {\r\n        const value = this.field.data.value[i];\r\n\r\n        data.append(this.field.name + '[' + i + '].latitude', value.latitude);\r\n\r\n        data.append(this.field.name + '[' + i + '].longitude', value.longitude);\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  /** @description Add a marker from the clicked map location.\r\n   * @param MouseEvent eventArguments The event arguments.\r\n  */\r\n  public addMarkers(eventArguments: MouseEvent) {\r\n    if (!this.isFormInDisplayMode()) {\r\n      this.addMarkersFromLocation(eventArguments.coords.lat, eventArguments.coords.lng);\r\n    }\r\n  }\r\n\r\n  /** @description Activates the google map location search.*/\r\n  public activateSearchInput() {\r\n    if (this.searchElement) {\r\n      // load Places Autocomplete\r\n      this.mapsAPILoader.load().then(() => {\r\n        const field = this.bridgeService.configuration.mergedFields.find(f => f.name === this.searchElement.nativeElement.id);\r\n\r\n        const autocomplete = new google.maps.places.Autocomplete(this.searchElement.nativeElement, {});\r\n        autocomplete.addListener('place_changed', () => {\r\n          this.ngZone.run(() => {\r\n            // get the place result\r\n            const place: google.maps.places.PlaceResult = autocomplete.getPlace();\r\n\r\n            // verify result\r\n            if (place.geometry === undefined || place.geometry === null) {\r\n              return;\r\n            }\r\n\r\n            // set latitude, longitude and zoom\r\n            const latitude = place.geometry.location.lat();\r\n\r\n            const longitude = place.geometry.location.lng();\r\n\r\n            field.defaultLocation = {\r\n              latitude: latitude,\r\n              longitude: longitude\r\n            };\r\n\r\n            field.zoom = 12;\r\n\r\n            const marker = new Marker(\r\n              place.geometry.location.lat(),\r\n              place.geometry.location.lng(),\r\n              field.markerSettings.defaultNewMarker.draggable,\r\n              field.markerSettings.defaultNewMarker.infoHtml\r\n            );\r\n\r\n            this.addMarkersFromLocation(latitude, longitude);\r\n          });\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  /** @description Add a marker from the clicked map location.\r\n   * @param number latitude The latitude.\r\n   * @param number longitude The longitude.\r\n  */\r\n  private addMarkersFromLocation(latitude: number, longitude: number) {\r\n    if (!this.field.data.value) {\r\n      this.field.data.value = [];\r\n    }\r\n\r\n    if (this.field.validation.max > 0 && this.field.data.value.length < this.field.validation.max) {\r\n      const marker = new Marker(\r\n        latitude,\r\n        longitude,\r\n        this.field.markerSettings.defaultNewMarker.draggable,\r\n        this.field.markerSettings.defaultNewMarker.infoHtml\r\n      );\r\n\r\n      marker.eventTriggers = this.field.markerSettings.defaultNewMarker.eventTriggers;\r\n\r\n      this.field.data.value.push(marker);\r\n    }\r\n  }\r\n\r\n  /** @description Update the marker's position when drag is done.\r\n   * @param Marker marker The marker to update.\r\n   * @param any eventArguments The event arguments of the action causing the trigger.\r\n  */\r\n  public updateMarkerPosition(marker: Marker, eventArguments: MouseEvent) {\r\n    marker.latitude = eventArguments.coords.lat;\r\n    marker.longitude = eventArguments.coords.lng;\r\n  }\r\n}\r\n","import { Component, ViewChild } from '@angular/core';\r\nimport { FieldComponent } from '../field/field.component';\r\nimport { InputMask } from 'primeng/inputmask';\r\n\r\n@Component({\r\n  selector: 'ntw-mask-field',\r\n  template: `<div [class]=\"field.cssClasses.container\"\r\n     [hidden]=\"isFieldHidden()\"\r\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\r\n\r\n  <!-- label -->\r\n  <label [class]=\"field.cssClasses.label\"\r\n         [for]=\"field.name\">\r\n    {{field.label | translate}}\r\n    <span class=\"required-asterisk\"\r\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\r\n  </label>\r\n\r\n  <!-- input-->\r\n  <p-inputMask [id]=\"field.name\"\r\n               [name]=\"field.name\"\r\n               [class]=\"field.cssClasses.input\"\r\n               [ngClass]=\"{'invalid': isValidationShown()}\"\r\n               [title]=\"field.tooltip | translate\"\r\n               [placeholder]=\"(field.placeholder) ? (field.placeholder | translate) : ''\"\r\n               #input=\"ngModel\"\r\n               [readonly]=\"field.readonly\"\r\n               [(ngModel)]=\"field.data.value\"\r\n               [mask]=\"field.validation.mask\"\r\n               [slotChar]=\"field.slotChar\"\r\n               [autoClear]=\"field.autoClear\"\r\n               [unmask]=\"field.unmask\"\r\n               [disabled]=\"field.disabled\"\r\n               [maxlength]=\"field.validation.length\"\r\n               [characterPattern]=\"field.validation.characterPattern\"\r\n               [pattern]=\"field.validation.pattern\"\r\n               *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\"\r\n               (ngModelChange)=\"validate();triggerDynamicEvent('onChange', $event, field);\">\r\n  </p-inputMask>\r\n\r\n  <!-- display -->\r\n  <span [class]=\"field.cssClasses.display\"\r\n        *ngIf=\"bridgeService?.configuration?.settings?.formMode == 'Display'\">\r\n    {{field.data.value}}\r\n  </span>\r\n\r\n  <!-- validations -->\r\n  <div *ngIf=\"isValidationShown()\">\r\n    <div *ngFor=\"let error of field?.validationErrors\">\r\n      <p [ngClass]=\"error.type | translate\">\r\n        {{error.message | translate}}\r\n      </p>\r\n    </div>\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [``]\r\n})\r\nexport class MaskFieldComponent extends FieldComponent {\r\n  /** @property The validation summary component.*/\r\n  @ViewChild(InputMask) inputMask: InputMask;\r\n\r\n  /** @property Whether to validate for required.*/\r\n  public validateForRequired: boolean = true;\r\n\r\n  /** @property Whether to validate for pattern.*/\r\n  public validateForPattern: boolean = true;\r\n\r\n  /** @description Updates the mask.\r\n   * @param mask current The new mask.\r\n  */\r\n  public updateMask(mask: any) {\r\n    this.inputMask._mask = mask;\r\n\r\n    this.inputMask.initMask();\r\n\r\n    this.inputMask.inputViewChild.nativeElement.blur();\r\n\r\n    this.inputMask.inputViewChild.nativeElement.focus();\r\n  }\r\n\r\n  /** @description Updates the value.\r\n   * @param value current The new value.\r\n  */\r\n  public updateMaskValue(value: any) {\r\n    this.inputMask.writeValue(value);\r\n  }\r\n}\r\n","import { Component, Inject, ViewChild } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { DynamicFormComponent } from '../../dynamic-form/dynamic-form.component';\r\nimport { Field } from '../../../models/field';\r\n\r\n@Component({\r\n  selector: 'ntw-default-master-detail-form',\r\n  template: `<mat-dialog-actions>\r\n    <button mat-dialog-close mat-button>\r\n        <i class=\"fa fa-times-circle\"\r\n           aria-hidden=\"true\">\r\n        </i>\r\n    </button>\r\n</mat-dialog-actions>\r\n\r\n<mat-dialog-content>\r\n    <ntw-dynamic-form #detailsForm\r\n                      [parentComponent]=\"this\"\r\n                      [configurationSourceUrl]=\"field.details.configurationSourceUrl\">\r\n    </ntw-dynamic-form>\r\n</mat-dialog-content>\r\n`,\r\n  styles: [``]\r\n})\r\nexport class DefaultMasterDetailFormComponent {\r\n  /** @property The reference to the details dynamic form component.*/\r\n  @ViewChild('detailsForm') detailsFormComponent: DynamicFormComponent;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<DefaultMasterDetailFormComponent>,\r\n    @Inject(MAT_DIALOG_DATA)\r\n    public field: Field\r\n  ) { }\r\n\r\n  /** @description Adds a child and closes the dialog.\r\n   * @param DefaultMasterDetailFormComponent current The current instance of the default master detail form component.\r\n   * @param any triggeringField The field triggering the action.\r\n  */\r\n  addChild(current: DefaultMasterDetailFormComponent, triggeringField: any) {\r\n    //current.detailsFormComponent.validateForm();\r\n\r\n    //if (current.detailsFormComponent.configuration.validationErrors.length === 0) {\r\n    //  const values = current.detailsFormComponent.getFormValues();\r\n\r\n    //  current.dialogRef.close(values);\r\n    //}\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { FieldComponent } from '../field/field.component';\r\nimport { BridgeService } from '../../../services/bridge.service';\r\nimport { DefaultMasterDetailFormComponent } from '../../form-part-templates/default-master-detail-form/default-master-detail-form.component';\r\nimport { MatDialog } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'ntw-master-detail-field',\r\n  template: `<div [class]=\"field.cssClasses.container\"\r\n     [hidden]=\"isFieldHidden()\"\r\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\r\n\r\n  <!-- label -->\r\n  <label [class]=\"field.cssClasses.label\"\r\n         [for]=\"field.name\">\r\n    {{field.label | translate}}\r\n    <span class=\"required-asterisk\"\r\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\r\n  </label>\r\n\r\n  <!-- input-->\r\n  <div>\r\n    <a href=\"javascript:;\"\r\n       (click)=\"openDialog();\">\r\n      <i class=\"fa fa-plus\"></i>\r\n    </a>\r\n  </div>\r\n\r\n  <!-- display -->\r\n  <span [class]=\"field.cssClasses.display\"\r\n        *ngIf=\"bridgeService?.configuration?.settings?.formMode == 'Display'\">\r\n\r\n  </span>\r\n\r\n  <!-- validations -->\r\n  <div *ngIf=\"isValidationShown()\">\r\n    <div *ngFor=\"let error of field?.validationErrors\">\r\n      <p [ngClass]=\"error.type | translate\">\r\n        {{error.message | translate}}\r\n      </p>\r\n    </div>\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [``]\r\n})\r\nexport class MasterDetailFieldComponent extends FieldComponent {\r\n  /** @property Whether to validate for range.*/\r\n  public validateForRange: boolean = true;\r\n\r\n  constructor(\r\n    public bridgeService: BridgeService,\r\n    private dialog: MatDialog\r\n  ) {\r\n    super(bridgeService);\r\n  }\r\n\r\n  /** @description Opens the details dialog.*/\r\n  openDialog() {\r\n    const detailsDialog = this.dialog.open(DefaultMasterDetailFormComponent, {\r\n      data: this.field\r\n    });\r\n\r\n    detailsDialog.afterClosed().subscribe(result => {\r\n      console.log(result);\r\n    });\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { BoundableFieldComponent } from '../boundable-field/boundable-field.component';\r\n\r\n@Component({\r\n  selector: 'ntw-multi-select-field',\r\n  template: `<div [class]=\"field.cssClasses.container\"\r\n     [hidden]=\"isFieldHidden()\"\r\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\r\n\r\n  <!-- label -->\r\n  <label [class]=\"field.cssClasses.label\"\r\n         [for]=\"field.name\">\r\n    {{field.label | translate}}\r\n    <span class=\"required-asterisk\"\r\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\r\n  </label>\r\n\r\n  <!-- input-->\r\n  <p-multiSelect [options]=\"field.data.options\"\r\n                 [id]=\"field.name\"\r\n                 [name]=\"field.name\"\r\n                 [class]=\"field.cssClasses.input\"\r\n                 [ngClass]=\"{'invalid': isValidationShown()}\"\r\n                 [title]=\"field.tooltip | translate\"\r\n                 #input=\"ngModel\"\r\n                 [filterPlaceHolder]=\"field.placeholder | translate\"\r\n                 [(ngModel)]=\"field.data.value\"\r\n                 [required]=\"field.validation.required\"\r\n                 [disabled]=\"field.disabled\"\r\n                 [filter]=\"field.enablefilter\"\r\n                 optionLabel=\"name\"\r\n                 dataKey=\"id\"\r\n                 [defaultLabel]=\"field.placeholder | translate\"\r\n                 *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\"\r\n                 (onChange)=\"triggerDynamicEvent('onChange', $event, field);\"\r\n                 (ngModelChange)=\"validate();\">\r\n  </p-multiSelect>\r\n\r\n  <!-- display -->\r\n  <div [class]=\"field.cssClasses.display\"\r\n       *ngIf=\"bridgeService?.configuration?.settings?.formMode == 'Display'\">\r\n    <ul>\r\n      <li *ngFor=\"let item of field?.data?.value\">{{item.name}}</li>\r\n    </ul>\r\n  </div>\r\n\r\n  <!-- validations -->\r\n  <div *ngIf=\"isValidationShown()\">\r\n    <div *ngFor=\"let error of field?.validationErrors\">\r\n      <p [ngClass]=\"error.type | translate\">\r\n        {{error.message | translate}}\r\n      </p>\r\n    </div>\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [`:host ::ng-deep .ui-multiselect.ui-widget{width:100%}:host ::ng-deep p-multiselect .ui-multiselect-label.ui-corner-all{margin-bottom:0;height:35px}body.ar :host ::ng-deep .ui-multiselect-filter-container{float:right}body.ar :host ::ng-deep .ui-multiselect-header .ui-multiselect-close{right:unset;left:.375em}body.ar :host ::ng-deep .ui-multiselect-panel .ui-multiselect-item{text-align:right!important}body.ar :host ::ng-deep p-multiselect .ui-corner-right{left:0;right:unset;border-right:1px solid #d6d6d6;border-left:0;border-top-right-radius:0;border-bottom-right-radius:0}body.ar :host ::ng-deep p-multiselect .ui-multiselect-label.ui-corner-all{padding-right:5px}`]\r\n})\r\nexport class MultiSelectFieldComponent extends BoundableFieldComponent {\r\n  /** @property Whether to validate for range.*/\r\n  public validateForRange: boolean = true;\r\n\r\n  /** @description Clears the field's value.*/\r\n  public clearValue() {\r\n    if (this.field.data) {\r\n      this.field.data.value = [];\r\n\r\n      this.control.reset();\r\n\r\n      this.clearValidationErrors();\r\n    }\r\n  }\r\n\r\n  /** @description Appends the form data.\r\n   * @param FormData data The data.\r\n   * @return FormData The updated form data.\r\n  */\r\n  public appendFormData(data: FormData): FormData {\r\n    if (this.field.data && this.field.data.value) {\r\n      for (let i = 0; i < this.field.data.value.length; i++) {\r\n        const value = this.field.data.value[i];\r\n\r\n        data.append(this.field.name + '[' + i + '].id', value.id);\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { BoundableFieldComponent } from '../boundable-field/boundable-field.component';\r\n\r\n@Component({\r\n  selector: 'ntw-radiobutton-field',\r\n  template: `<div [class]=\"field.cssClasses.container\"\r\n     [hidden]=\"isFieldHidden()\"\r\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\r\n\r\n  <!-- label -->\r\n  <label [class]=\"field.cssClasses.label\"\r\n         [for]=\"field.name\">\r\n    {{field.label | translate}}\r\n    <span class=\"required-asterisk\"\r\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\r\n  </label>\r\n\r\n  <!-- input-->\r\n  <div class=\"radioButtonHolder\"\r\n       *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\">\r\n    <p-radioButton *ngFor=\"let radiobutton of field.data.options; let i = index\"\r\n                   [id]=\"field.name+'_'+i\"\r\n                   [name]=\"field.name\"\r\n                   [(ngModel)]=\"field.data.value\"\r\n                   [class]=\"field.cssClasses.input\"\r\n                   [ngClass]=\"{'invalid': isValidationShown()}\"\r\n                   [title]=\"field.tooltip | translate\"\r\n                   #input=\"ngModel\"\r\n                   [required]=\"field.validation.required\"\r\n                   [label]=\" radiobutton.name | translate\"\r\n                   [value]=\"radiobutton.id\"\r\n                   [disabled]=\"field.disabled\"\r\n                   (onClick)=\"triggerDynamicEvent('onClick', $event, field);\"\r\n                   (ngModelChange)=\"validate();\">\r\n    </p-radioButton>\r\n  </div>\r\n\r\n  <!-- display -->\r\n  <span [class]=\"field.cssClasses.display\"\r\n        *ngIf=\"bridgeService?.configuration?.settings?.formMode == 'Display'\">\r\n    {{field?.data?.value}}\r\n  </span>\r\n\r\n  <!-- validations -->\r\n  <div *ngIf=\"isValidationShown()\">\r\n    <div *ngFor=\"let error of field?.validationErrors\">\r\n      <p [ngClass]=\"error.type | translate\">\r\n        {{error.message | translate}}\r\n      </p>\r\n    </div>\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [`p-radiobutton{display:block}`]\r\n})\r\nexport class RadiobuttonFieldComponent extends BoundableFieldComponent {\r\n  /** @property Whether to validate for required.*/\r\n  public validateForRequired: boolean = true;\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { FieldComponent } from '../field/field.component';\r\n\r\n@Component({\r\n  selector: 'ntw-rating-field',\r\n  template: `<div [class]=\"field.cssClasses.container\"\r\n     [hidden]=\"isFieldHidden()\"\r\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\r\n\r\n  <!-- label -->\r\n  <label [class]=\"field?.cssClasses?.label\"\r\n         [for]=\"field.name\">\r\n    {{field.label | translate}}\r\n    <span class=\"required-asterisk\"\r\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\r\n  </label>\r\n\r\n  <!-- input & display -->\r\n  <p-rating [id]=\"field.name\"\r\n            [name]=\"field.name\"\r\n            [(ngModel)]=\"field.data.value\"\r\n            [class]=\"field.cssClasses.input\"\r\n            [ngClass]=\"{'invalid': isValidationShown()}\"\r\n            [title]=\"field.tooltip | translate\"\r\n            [readonly]=\"field.readonly\"\r\n            [disabled]=\"field.disabled\"\r\n            [stars]=\"field.starNumber\"\r\n            [iconCancelClass]=\"field.iconCancelClass\"\r\n            [iconOnClass]=\"field.iconOnClass\"\r\n            [iconOffClass]=\"field.iconOffClass\"\r\n            [cancel]=\"field.cancelIcon && !field.readonly\"\r\n            (onRate)=\"triggerDynamicEvent('onRate', $event, field);validate();\"\r\n            (onCancel)=\"triggerDynamicEvent('onCancel', $event, field);validate();\">\r\n  </p-rating>\r\n\r\n  <!-- validations -->\r\n  <div *ngIf=\"isValidationShown()\">\r\n    <div *ngFor=\"let error of field?.validationErrors\">\r\n      <p [ngClass]=\"error.type | translate\">\r\n        {{error.message | translate}}\r\n      </p>\r\n    </div>\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [``]\r\n})\r\nexport class RatingFieldComponent extends FieldComponent {\r\n  /** @property Whether to validate for required.*/\r\n  public validateForRequired: boolean = true;\r\n\r\n  /** @description Handles the field's default settings.*/\r\n  public handleDefaultSettings() {\r\n    if (this.isFormInDisplayMode()) {\r\n      this.field.readonly = true;\r\n    }\r\n\r\n    if (!this.field.iconCancelClass) {\r\n      this.field.iconCancelClass = 'pi pi- ban';\r\n    }\r\n\r\n    if (!this.field.iconOnClass) {\r\n      this.field.iconOnClass = 'pi pi-star';\r\n    }\r\n\r\n    if (!this.field.iconOffClass) {\r\n      this.field.iconOffClass = 'pi pi-star-o';\r\n    }\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { BoundableFieldComponent } from '../boundable-field/boundable-field.component';\r\n\r\n@Component({\r\n  selector: 'ntw-select-field',\r\n  template: `<div [class]=\"field.cssClasses.container\"\r\n     [hidden]=\"isFieldHidden()\"\r\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\r\n\r\n  <!-- label -->\r\n  <label [class]=\"field.cssClasses.label\"\r\n         [for]=\"field.name\">\r\n    {{field.label | translate}}\r\n    <span class=\"required-asterisk\"\r\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\r\n  </label>\r\n\r\n  <!-- input-->\r\n  <p-dropdown [options]=\"field.data.options\"\r\n              [id]=\"field.name\"\r\n              [name]=\"field.name\"\r\n              [class]=\"field.cssClasses.input\"\r\n              [ngClass]=\"{'invalid': isValidationShown()}\"\r\n              [title]=\"field.tooltip | translate\"\r\n              #input=\"ngModel\"\r\n              [placeholder]=\"(field.placeholder) ? (field.placeholder | translate) : ''\"\r\n              [(ngModel)]=\"field.data.value\"\r\n              [required]=\"field.validation.required\"\r\n              [disabled]=\"field.disabled\"\r\n              [filter]=\"field.enablefilter\"\r\n              optionLabel=\"name\"\r\n              dataKey=\"id\"\r\n              *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\"\r\n              (onChange)=\"validate();triggerDynamicEvent('onChange', $event, field);\">\r\n  </p-dropdown>\r\n\r\n  <!-- display -->\r\n  <span [class]=\"field.cssClasses.display\"\r\n        *ngIf=\"bridgeService?.configuration?.settings?.formMode == 'Display'\">\r\n    {{field?.data?.value?.name}}\r\n  </span>\r\n\r\n  <!-- validations -->\r\n  <div *ngIf=\"isValidationShown()\">\r\n    <div *ngFor=\"let error of field?.validationErrors\">\r\n      <p [ngClass]=\"error.type | translate\">\r\n        {{error.message | translate}}\r\n      </p>\r\n    </div>\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [`body.ar :host ::ng-deep .ui-dropdown-panel .ui-dropdown-item{text-align:right}body.ar :host ::ng-deep p-dropdown .ui-dropdown .ui-dropdown-trigger{left:0;right:unset;border-right:1px solid #d6d6d6;border-left:0;border-top-right-radius:0;border-bottom-right-radius:0}body.ar :host ::ng-deep .ui-dropdown .ui-dropdown-label{padding-right:5px}`]\r\n})\r\nexport class SelectFieldComponent extends BoundableFieldComponent {\r\n  /** @property Whether to validate for required.*/\r\n  public validateForRequired: boolean = true;\r\n\r\n  /** @description Appends the form data.\r\n   * @param FormData data The data.\r\n   * @return FormData The updated form data.\r\n  */\r\n  public appendFormData(data: FormData): FormData {\r\n    if (this.field.data && this.field.data.value) {\r\n      data.append(this.field.name + '.id', this.field.data.value.id);\r\n    }\r\n\r\n    return data;\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { FieldComponent } from '../field/field.component';\r\nimport { BridgeService } from '../../../services/bridge.service';\r\nimport { UtilitiesService } from '../../../services/utilities.service';\r\n\r\n@Component({\r\n  selector: 'ntw-time-field',\r\n  template: `<div [class]=\"field.cssClasses.container\"\r\n     [hidden]=\"isFieldHidden()\"\r\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\r\n\r\n  <!-- label -->\r\n  <label [class]=\"field.cssClasses.label\"\r\n         [for]=\"field.name\">\r\n    {{field.label | translate}}\r\n    <span class=\"required-asterisk\"\r\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\r\n  </label>\r\n\r\n  <!-- input-->\r\n  <ntw-mat-timepicker color=\"primary\"\r\n                      [inputClass]=\"field.cssClasses.input\"\r\n                      [ngClass]=\"{'invalid': isValidationShown()}\"\r\n                      [inputId]=\"field.name\"\r\n                      [inputName]=\"field.name\"\r\n                      [disabled]=\"field.disabled\"\r\n                      readonly=true\r\n                      [tooltip]=\"field.tooltip | translate\"\r\n                      [placeholderValue]=\"field.tooltip | translate\"\r\n                      [(userTime)]=\"field.data.value\"\r\n                      *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\"\r\n                      (userTimeChange)=\"setTimePickerFieldValue($event);validate();triggerDynamicEvent('onChange', $event, field);\">\r\n  </ntw-mat-timepicker>\r\n\r\n  <!-- display -->\r\n  <span [class]=\"field.cssClasses.display\"\r\n        *ngIf=\"bridgeService?.configuration?.settings?.formMode == 'Display'\">\r\n    {{field?.data?.value?.hour}}:{{field?.data?.value?.minute}}\r\n    <span *ngIf=\"field?.data?.value?.format == 12\">{{field?.data?.value?.meriden | translate}}</span>\r\n  </span>\r\n\r\n  <!-- validations -->\r\n  <div *ngIf=\"isValidationShown()\">\r\n    <div *ngFor=\"let error of field?.validationErrors\">\r\n      <p [ngClass]=\"error.type | translate\">\r\n        {{error.message | translate}}\r\n      </p>\r\n    </div>\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [`:host ::ng-deep .time-picker-button.mat-button{position:absolute;border:1px solid #2399e5;color:#fff;background:#2399e5;transition:background-color .2s;height:35px}body.en :host ::ng-deep .time-picker-button.mat-button{right:15px}body.ar :host ::ng-deep .time-picker-button.mat-button{left:15px}:host ::ng-deep .w-mat-timepicker .mat-button,:host ::ng-deep .w-mat-timepicker .mat-flat-button,:host ::ng-deep .w-mat-timepicker .mat-icon-button,:host ::ng-deep .w-mat-timepicker .mat-stroked-button{line-height:32px}:host ::ng-deep input.form-input{border:1px solid #ced4da;border-radius:.25rem;padding:5px}`]\r\n})\r\nexport class TimeFieldComponent extends FieldComponent {\r\n  /** @property Whether to validate for required.*/\r\n  public validateForRequired: boolean = true;\r\n\r\n  constructor(\r\n    public bridgeService: BridgeService,\r\n    private utilitiesService: UtilitiesService\r\n  ) {\r\n    super(bridgeService);\r\n  }\r\n\r\n  /** @description Handles the field's default settings.*/\r\n  public handleDefaultSettings() {\r\n    this.field.data.value = this.utilitiesService.evaluateFunctionOrDefault(this.field.setTime, this.field.setTime);\r\n  }\r\n\r\n  /** @description Clears the field's value.*/\r\n  public clearValue() {\r\n    if (this.field.data) {\r\n      this.field.data.value = this.utilitiesService.evaluateFunctionOrDefault(this.field.setTime, this.field.setTime);\r\n    }\r\n  }\r\n\r\n  /** @description Appends the form data.\r\n   * @param FormData data The data.\r\n   * @return FormData The updated form data.\r\n  */\r\n  public appendFormData(data: FormData): FormData {\r\n    if (this.field.data && this.field.data.value) {\r\n      data.append(this.field.name + '.hour', this.field.data.value.hour);\r\n\r\n      data.append(this.field.name + '.minute', this.field.data.value.minute);\r\n\r\n      data.append(this.field.name + '.meriden', this.field.data.value.meriden);\r\n\r\n      data.append(this.field.name + '.format', this.field.data.value.format);\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  /** @description Sets a time picker field's value once it is changed.\r\n   * @param any newValue The new value.\r\n  */\r\n  public setTimePickerFieldValue(newValue: any) {\r\n    this.field.data.value = newValue;\r\n  }\r\n}\r\n","import { Component, ViewChild } from '@angular/core';\r\nimport { FieldComponent } from '../field/field.component';\r\nimport { BridgeService } from '../../../services/bridge.service';\r\nimport { LanguageService } from '../../../services/language.service';\r\nimport { InputError } from '../../../models/input-error';\r\n\r\n@Component({\r\n  selector: 'ntw-recaptcha-field',\r\n  template: `<div [class]=\"field.cssClasses.container\"\r\n     [hidden]=\"isFieldHidden()\"\r\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\r\n\r\n  <!-- label -->\r\n  <label [class]=\"field.cssClasses.label\">\r\n    {{field.label | translate}}\r\n    <span class=\"required-asterisk\"\r\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\r\n  </label>\r\n\r\n  <!-- input-->\r\n  <re-captcha #recaptcha\r\n              [id]=\"field.name\"\r\n              [siteKey]=\"field.siteKey\"\r\n              [class]=\"field.cssClasses.input\"\r\n              [ngClass]=\"{'invalid': isValidationShown()}\"\r\n              [theme]=\"field.theme\"\r\n              [size]=\"field.size\"\r\n              [title]=\"field.tooltip | translate\"\r\n              (resolved)=\"validate($event);\">\r\n  </re-captcha>\r\n\r\n  <!-- validations -->\r\n  <div *ngIf=\"isValidationShown()\">\r\n    <div *ngFor=\"let error of field?.validationErrors\">\r\n      <p [ngClass]=\"error.type | translate\">\r\n        {{error.message | translate}}\r\n      </p>\r\n    </div>\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [``]\r\n})\r\nexport class RecaptchaFieldComponent extends FieldComponent {\r\n  /** @property The recaptcha element.*/\r\n  @ViewChild('recaptcha') recaptchaElement: any;\r\n\r\n  /** @property Whether the field is valid.*/\r\n  private isValid: boolean;\r\n\r\n  constructor(\r\n    public bridgeService: BridgeService,\r\n    private languageService: LanguageService\r\n  ) {\r\n    super(bridgeService);\r\n  }\r\n\r\n  /** @description Clears the field's value.*/\r\n  public clearValue() {\r\n    this.isValid = false;\r\n\r\n    this.clearValidationErrors();\r\n  }\r\n\r\n  /** @description Validates the form control and updates its validation errors list.\r\n   * @param any eventArguments The event arguments.\r\n   * @param boolean isSubmit Determines whether the validation is reached from form submission.\r\n   * @return Array<InputError> The list of validation errors.\r\n  */\r\n  public validate(eventArguments?: any, isSubmit?: boolean): Array<InputError> {\r\n    this.preValidate(isSubmit);\r\n\r\n    if (this.shouldValidate()) {\r\n      if (this.field.validation.required) {\r\n        if (!isSubmit) {\r\n          this.isValid = eventArguments != null;\r\n        }\r\n\r\n        if (!this.isValid) {\r\n          this.field.validationErrors.push(new InputError(FieldComponent.ValidationErrorClass, this.field.validation.requiredText));\r\n        }\r\n      }\r\n\r\n      this.updateValidationSummary();\r\n    }\r\n\r\n    return this.field.validationErrors;\r\n  }\r\n\r\n  /** @description Sets the captcha language.*/\r\n  public setCaptchaLanguge() {\r\n    const language = this.languageService.getLanguage();\r\n\r\n    if (this.recaptchaElement) {\r\n      const captchaIFrame = this.recaptchaElement.elementRef.nativeElement.querySelector('iframe');\r\n\r\n      if (captchaIFrame) {\r\n        const src = captchaIFrame.getAttribute('src');\r\n\r\n        captchaIFrame.setAttribute('src', src.replace(/hl=(.*?)&/, 'hl=' + language + '&'));\r\n      }\r\n    }\r\n\r\n    this.isValid = false;\r\n\r\n    this.clearValidationErrors();\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { BridgeService } from '../../../services/bridge.service';\r\n\r\n@Component({\r\n  selector: 'ntw-next-previous-section',\r\n  template: `<div class=\"next-prev-container\">\r\n  <a class=\"arrow-prev\"\r\n     href=\"javascript:;\"\r\n     (click)=\"incrementSection(-1)\"\r\n     title=\"{{'buttons.Previous' | translate}}\">\r\n  </a>\r\n  <span class=\"next-prev-header\">{{bridgeService.configuration?.currentSection?.legend | translate}}</span>\r\n  <a class=\"arrow-next\"\r\n     href=\"javascript:;\"\r\n     (click)=\"incrementSection(1)\"\r\n     title=\"{{'buttons.Next' | translate}}\">\r\n  </a>\r\n</div>\r\n`,\r\n  styles: [`.next-prev-container a{text-decoration:none!important}.next-prev-container{text-align:center}.next-prev-header{font-size:2em;font-weight:700}body.en :host ::ng-deep a.arrow-prev:before{content:\"\\\\f104\";font:3em/1 FontAwesome;color:#555565}body.en :host ::ng-deep a.arrow-next:before{content:\"\\\\f105\";font:3em/1 FontAwesome;color:#555565}body.en :host ::ng-deep a.arrow-next{float:right}body.en :host ::ng-deep a.arrow-prev{float:left}body.ar :host ::ng-deep a.arrow-prev:before{content:\"\\\\f105\";font:3em/1 FontAwesome;color:#555565}body.ar :host ::ng-deep a.arrow-next:before{content:\"\\\\f104\";font:3em/1 FontAwesome;color:#555565}body.ar :host ::ng-deep a.arrow-next{float:left}body.ar :host ::ng-deep a.arrow-prev{float:right}`]\r\n})\r\nexport class NextPreviousSectionComponent {\r\n  constructor(\r\n    public bridgeService: BridgeService\r\n  ) { }\r\n\r\n  /** @description Cycles through the sections.\r\n   * @param number increment The increment.\r\n  */\r\n  public incrementSection(increment: number) {\r\n    let newSectionId = this.bridgeService.configuration.currentSection.id + increment;\r\n\r\n    if (newSectionId === 0) {\r\n      newSectionId = this.bridgeService.configuration.sections.length;\r\n    } else if (newSectionId === this.bridgeService.configuration.sections.length + 1) {\r\n      newSectionId = 1;\r\n    }\r\n\r\n    this.bridgeService.configuration.currentSection = this.bridgeService.configuration.sections.find(s => s.id === newSectionId);\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { BridgeService } from '../../../services/bridge.service';\r\nimport { Section } from '../../../models/section';\r\n\r\n@Component({\r\n  selector: 'ntw-tabs-section',\r\n  template: `<ul class=\"nav nav-tabs\">\r\n  <li *ngFor=\"let section of bridgeService?.configuration?.sections\"\r\n      class=\"nav-item\">\r\n    <a class=\"nav-link\"\r\n       href=\"javascript:;\"\r\n       [ngClass]=\"{'active':section.id==bridgeService?.configuration?.currentSection?.id}\"\r\n       (click)=\"switchSection(section)\">\r\n      <span>{{section.legend | translate}}</span>\r\n      <span class=\"validation-errors-count\"\r\n            *ngIf=\"section.validationErrorsCount > 0\">\r\n      </span>\r\n    </a>\r\n  </li>\r\n</ul>\r\n`,\r\n  styles: [``]\r\n})\r\nexport class TabsSectionComponent {\r\n  constructor(\r\n    public bridgeService: BridgeService\r\n  ) { }\r\n\r\n  /** @description Switches the active section.\r\n   * @param Section section The new active section.\r\n  */\r\n  public switchSection(section: Section) {\r\n    this.bridgeService.configuration.currentSection = section;\r\n  }\r\n}\r\n","import { Component, ViewChild, ElementRef, ChangeDetectorRef } from '@angular/core';\r\nimport { BridgeService } from '../../../services/bridge.service';\r\nimport { LanguageService } from '../../../services/language.service';\r\nimport { ValidationSummaryModes, SwalTypes } from '../../../models/enums';\r\nimport swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'ntw-validation-summary',\r\n  template: `<div #validationSummary\r\n     class=\"validation-summary-container\"\r\n     [hidden]=\"bridgeService?.configuration?.settings?.validationSummaryMode !='List'\">\r\n  <div class=\"validation-summary\"\r\n       *ngIf=\"bridgeService?.configuration?.validationErrors?.length > 0\">\r\n    <span class=\"validation-summary-title-section\">{{'validations.ValidationSummaryErrors' | translate}}</span>\r\n    <ul>\r\n      <li class=\"validation-summary-error\" *ngFor=\"let error of bridgeService?.configuration?.validationErrors\">\r\n        {{error.message | translate}}\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [`.validation-summary{border:1px solid #d6d6d6;padding-top:15px;color:red;margin-bottom:20px}.validation-summary-title-section{font-weight:700;padding:15px 20px;display:block}.validation-summary-container{margin-top:20px}`]\r\n})\r\nexport class ValidationSummaryComponent {\r\n  /** @property The validation summary element.*/\r\n  @ViewChild('validationSummary') validationSummaryElement: ElementRef;\r\n\r\n  constructor(\r\n    public bridgeService: BridgeService,\r\n    private languageService: LanguageService,\r\n    private changeDetectorRef: ChangeDetectorRef\r\n  ) { }\r\n\r\n  /** @description Shows the validation summary as an alert.*/\r\n  showSummaryAlert() {\r\n    if (this.bridgeService.configuration.settings.validationSummaryMode === ValidationSummaryModes.Alert) {\r\n      this.changeDetectorRef.detectChanges();\r\n\r\n      swal({\r\n        html: this.validationSummaryElement.nativeElement.innerHTML,\r\n        type: SwalTypes.Warning,\r\n        confirmButtonText: this.languageService.translations.buttons.Ok\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ntw-progress-indicator',\r\n  template: `<div class=\"progress-indicator-container\"\r\n     *ngIf=\"spinnerSourceUrl\">\r\n  <div class=\"progress-indicator\">\r\n    <img [src]=\"spinnerSourceUrl\"\r\n         class=\"progress-indicator-image\"\r\n         alt=\"progress\" />\r\n  </div>\r\n</div>\r\n`,\r\n  styles: [``]\r\n})\r\nexport class ProgressIndicatorComponent {\r\n  /** @property The spinner source url.*/\r\n  @Input('spinnerSourceUrl') spinnerSourceUrl: string;\r\n}\r\n","import {\r\n  Component, Input, Output, OnInit, EventEmitter, ViewChild, ElementRef,\r\n  ChangeDetectorRef, ViewChildren, QueryList, ViewEncapsulation, Optional\r\n} from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { TranslateService, TranslatePipe } from '@ngx-translate/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { HttpRequestsService } from '../../services/http-requests.service';\r\nimport { LocalStorageService } from '../../services/local-storage.service';\r\nimport { UtilitiesService } from '../../services/utilities.service';\r\nimport { LanguageService } from '../../services/language.service';\r\nimport { BridgeService } from '../../services/bridge.service';\r\nimport { FieldTypes, SwalTypes, FormModes, PostModes } from '../../models/enums';\r\nimport { ValidationSummaryComponent } from '../form-part-templates/validation-summary/validation-summary.component';\r\nimport { InputFieldComponent } from '../field-templates/input-field/input-field.component';\r\nimport { SelectFieldComponent } from '../field-templates/select-field/select-field.component';\r\nimport { DatetimeFieldComponent } from '../field-templates/datetime-field/datetime-field.component';\r\nimport { DatetimeHijriFieldComponent } from '../field-templates/datetime-hijri-field/datetime-hijri-field.component';\r\nimport { CheckboxFieldComponent } from '../field-templates/checkbox-field/checkbox-field.component';\r\nimport { RadiobuttonFieldComponent } from '../field-templates/radiobutton-field/radiobutton-field.component';\r\nimport { MultiSelectFieldComponent } from '../field-templates/multi-select-field/multi-select-field.component';\r\nimport { ChipsFieldComponent } from '../field-templates/chips-field/chips-field.component';\r\nimport { EditorFieldComponent } from '../field-templates/editor-field/editor-field.component';\r\nimport { MaskFieldComponent } from '../field-templates/mask-field/mask-field.component';\r\nimport { TimeFieldComponent } from '../field-templates/time-field/time-field.component';\r\nimport { LocationFieldComponent } from '../field-templates/location-field/location-field.component';\r\nimport { FileUploadFieldComponent } from '../field-templates/file-upload-field/file-upload-field.component';\r\nimport { ImageCropperFieldComponent } from '../field-templates/image-cropper-field/image-cropper-field.component';\r\nimport { RecaptchaFieldComponent } from '../field-templates/recaptcha-field/recaptcha-field.component';\r\nimport { RatingFieldComponent } from '../field-templates/rating-field/rating-field.component';\r\nimport { FieldComponent } from '../field-templates/field/field.component';\r\nimport { Configuration } from '../../models/configuration';\r\nimport { Field } from '../../models/field';\r\nimport { InputError } from '../../models/input-error';\r\nimport swal from 'sweetalert2';\r\nimport { ResponseEventArgs } from '../../models/response-event-args';\r\n\r\n@Component({\r\n  selector: 'ntw-dynamic-form',\r\n  template: `<div #container\r\n     class=\"container\">\r\n  <form class=\"dynamic-form-form\"\r\n        #f=\"ngForm\"\r\n        (ngSubmit)=\"submitForm(f)\"\r\n        [hidden]=\"showProgressIndicator\"\r\n        autocomplete=\"on\">\r\n    <div class=\"dynamic-form\">\r\n      <div class=\"sections sections-top\"\r\n           *ngIf=\"configuration?.settings?.sectionLocation == 'Top' || configuration?.settings?.sectionLocation == 'Both'\">\r\n        <!-- section tabs -->\r\n        <ntw-tabs-section *ngIf=\"configuration?.settings?.sectionMode == 'Tabs'\"></ntw-tabs-section>\r\n\r\n        <!-- next previous -->\r\n        <ntw-next-previous-section *ngIf=\"configuration?.settings?.sectionMode == 'NextPrevious'\"></ntw-next-previous-section>\r\n      </div>\r\n\r\n      <div class=\"clearfix\"></div>\r\n\r\n      <!-- form -->\r\n      <div class=\"form-container row\">\r\n        <div [class]=\"field.cssClasses.wrapper\"\r\n             *ngFor=\"let field of configuration?.mergedFields\">\r\n\r\n          <!-- info -->\r\n          <ntw-info-field [field]=\"field\"\r\n                          *ngIf=\"field.fieldType=='info'\">\r\n          </ntw-info-field>\r\n\r\n          <!-- text or number or password -->\r\n          <ntw-input-field [field]=\"field\"\r\n                           *ngIf=\"(field.fieldType=='text' || field.fieldType=='number' || field.fieldType=='password')\">\r\n          </ntw-input-field>\r\n\r\n          <!-- dropdown list -->\r\n          <ntw-select-field [field]=\"field\"\r\n                            *ngIf=\"field.fieldType=='select'\">\r\n          </ntw-select-field>\r\n\r\n          <!-- datetime picker -->\r\n          <ntw-datetime-field [field]=\"field\"\r\n                              *ngIf=\"field.fieldType=='datetime'\">\r\n          </ntw-datetime-field>\r\n\r\n          <!-- hijri datetime picker -->\r\n          <ntw-datetime-hijri-field [field]=\"field\"\r\n                                    *ngIf=\"field.fieldType=='datetimehijri'\">\r\n          </ntw-datetime-hijri-field>\r\n\r\n          <!-- time picker -->\r\n          <ntw-time-field [field]=\"field\"\r\n                          *ngIf=\"field.fieldType=='time'\">\r\n          </ntw-time-field>\r\n\r\n          <!-- checkbox list -->\r\n          <ntw-checkbox-field [field]=\"field\"\r\n                              *ngIf=\"field.fieldType=='checkbox'\">\r\n          </ntw-checkbox-field>\r\n\r\n          <!-- radiobutton list -->\r\n          <ntw-radiobutton-field [field]=\"field\"\r\n                                 *ngIf=\"field.fieldType=='radiobutton'\">\r\n          </ntw-radiobutton-field>\r\n\r\n          <!-- multiSelect list -->\r\n          <ntw-multi-select-field [field]=\"field\"\r\n                                  *ngIf=\"field.fieldType=='multiselect'\">\r\n          </ntw-multi-select-field>\r\n\r\n          <!-- chips -->\r\n          <ntw-chips-field [field]=\"field\"\r\n                           *ngIf=\"field.fieldType=='chips'\">\r\n          </ntw-chips-field>\r\n\r\n          <!-- editor -->\r\n          <ntw-editor-field [field]=\"field\"\r\n                            *ngIf=\"field.fieldType=='editor'\">\r\n          </ntw-editor-field>\r\n\r\n          <!-- mask -->\r\n          <ntw-mask-field [field]=\"field\"\r\n                          *ngIf=\"field.fieldType=='mask'\">\r\n          </ntw-mask-field>\r\n\r\n          <!-- location -->\r\n          <ntw-location-field [field]=\"field\"\r\n                              *ngIf=\"field.fieldType=='location'\">\r\n          </ntw-location-field>\r\n\r\n          <!-- file upload -->\r\n          <ntw-file-upload-field [field]=\"field\"\r\n                                 *ngIf=\"field.fieldType=='fileupload'\">\r\n          </ntw-file-upload-field>\r\n\r\n          <!-- Rating -->\r\n          <ntw-rating-field [field]=\"field\"\r\n                            *ngIf=\"field.fieldType=='rating'\">\r\n          </ntw-rating-field>\r\n\r\n          <!-- recaptcha -->\r\n          <ntw-recaptcha-field [field]=\"field\"\r\n                               *ngIf=\"field.fieldType=='recaptcha'\">\r\n          </ntw-recaptcha-field>\r\n\r\n          <!-- image cropper -->\r\n          <ntw-image-cropper-field [field]=\"field\"\r\n                                   *ngIf=\"field.fieldType=='imagecropper'\">\r\n          </ntw-image-cropper-field>\r\n\r\n          <!-- masterdetail -->\r\n          <ntw-master-detail-field [field]=\"field\"\r\n                                   *ngIf=\"field.fieldType=='masterdetail'\">\r\n          </ntw-master-detail-field>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"clearfix\"></div>\r\n\r\n      <!-- validation summary -->\r\n      <ntw-validation-summary></ntw-validation-summary>\r\n\r\n      <!-- buttons -->\r\n      <div [class]=\"configuration?.buttons?.cssClass\"\r\n           data-html2canvas-ignore=\"true\">\r\n        <span class=\"main-buttons\"\r\n              *ngIf=\"configuration?.settings?.formMode != 'Display'\">\r\n          <button type=\"button\"\r\n                  [name]=\"configuration?.buttons?.main?.clear?.name\"\r\n                  [title]=\"configuration?.buttons?.main?.clear?.tooltip | translate\"\r\n                  [disabled]=\"configuration?.buttons?.main?.clear?.disabled\"\r\n                  [hidden]=\"isButtonHidden(configuration?.buttons?.main?.clear)\"\r\n                  [class]=\"configuration?.buttons?.main?.clear?.cssClass\"\r\n                  (click)=\"clearForm(f)\">\r\n            {{configuration?.buttons?.main?.clear?.label | translate}}\r\n          </button>\r\n          <button type=\"button\"\r\n                  [name]=\"configuration?.buttons?.main?.save?.name\"\r\n                  [title]=\"configuration?.buttons?.main?.save?.tooltip | translate\"\r\n                  [disabled]=\"configuration?.buttons?.main?.save?.disabled\"\r\n                  [hidden]=\"isButtonHidden(configuration?.buttons?.main?.save)\"\r\n                  [class]=\"configuration?.buttons?.main?.save?.cssClass\"\r\n                  (click)=\"saveForm(f)\">\r\n            {{configuration?.buttons?.main?.save?.label | translate}}\r\n          </button>\r\n          <button type=\"submit\"\r\n                  [name]=\"configuration?.buttons?.main?.submit?.name\"\r\n                  [title]=\"configuration?.buttons?.main?.submit?.tooltip | translate\"\r\n                  [disabled]=\"configuration?.buttons?.main?.submit?.disabled\"\r\n                  [hidden]=\"isButtonHidden(configuration?.buttons?.main?.submit)\"\r\n                  [class]=\"configuration?.buttons?.main?.submit?.cssClass\">\r\n            {{configuration?.buttons?.main?.submit?.label | translate}}\r\n          </button>\r\n        </span>\r\n\r\n        <span class=\"additional-buttons\">\r\n          <button *ngFor=\"let button of configuration?.buttons?.additionalButtons\"\r\n                  type=\"button\"\r\n                  [name]=\"button?.name\"\r\n                  [title]=\"button?.tooltip | translate\"\r\n                  [disabled]=\"button?.disabled\"\r\n                  [hidden]=\"isButtonHidden(button)\"\r\n                  [class]=\"button?.cssClass\"\r\n                  (click)=\"triggerDynamicEvent('click', $event, button);\">\r\n            {{button?.label | translate}}\r\n          </button>\r\n        </span>\r\n      </div>\r\n\r\n      <div class=\"sections sections-bottom\"\r\n           *ngIf=\"configuration?.settings?.sectionLocation == 'Bottom' || configuration?.settings?.sectionLocation == 'Both'\">\r\n        <!-- section tabs -->\r\n        <ntw-tabs-section *ngIf=\"configuration?.settings?.sectionMode == 'Tabs'\"></ntw-tabs-section>\r\n\r\n        <!-- next previous -->\r\n        <ntw-next-previous-section *ngIf=\"configuration?.settings?.sectionMode == 'NextPrevious'\"></ntw-next-previous-section>\r\n      </div>\r\n    </div>\r\n  </form>\r\n\r\n  <div class=\"clearfix\"></div>\r\n\r\n  <ntw-progress-indicator *ngIf=\"showProgressIndicator\"\r\n                          [spinnerSourceUrl]=\"configuration?.settings?.spinnerSourceUrl\"></ntw-progress-indicator>\r\n</div>\r\n`,\r\n  styles: [`.formButtons{margin:20px 0}body.ar .main-buttons button{margin-left:10px}body.en .main-buttons button{margin-right:10px}body.ar{direction:rtl!important;text-align:right!important}body.en{direction:ltr!important;text-align:left!important}.ui-dropdown,input.form-input,input.ui-inputtext.ui-widget.ui-state-default,p-dropdown{width:100%!important;height:35px}.input-container{margin-top:24px}label.form-label{font-weight:700}span.required-asterisk{color:red}p.error,p.validation-error{display:block;color:red}.result img{width:150px;height:150px}.form-display{display:block}w-clock *{box-sizing:content-box!important}`],\r\n  providers: [TranslatePipe, BridgeService, UtilitiesService],\r\n  // provide the bridge service here in order to have a different instance per form instance.\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class DynamicFormComponent implements OnInit {\r\n  /** @property The configuration source url.*/\r\n  @Input('configurationSourceUrl') configurationSourceUrl: string;\r\n\r\n  /** @property The parent component.*/\r\n  @Input('parentComponent') parentComponent: any;\r\n\r\n  /** @property The additional parameters.*/\r\n  @Input('additionalParameters') additionalParameters: any;\r\n\r\n  /** @property The onFormCleared event. Triggered when the form is cleared.*/\r\n  @Output() formCleared = new EventEmitter<any>();\r\n\r\n  /** @property The onFormDataBound event. Triggered when the form is data bound.*/\r\n  @Output() formDataBound = new EventEmitter<any>();\r\n\r\n  /** @property The onBeforeFormSaved event. Triggered before the form is saved.*/\r\n  @Output() beforeFormSaved = new EventEmitter<any>();\r\n\r\n  /** @property The onAfterFormSaved event. Triggered after the form is saved.*/\r\n  @Output() afterFormSaved = new EventEmitter<any>();\r\n\r\n  /** @property The onBeforeFormSubmitted event. Triggered before the form is submitted.*/\r\n  @Output() beforeFormSubmitted = new EventEmitter<any>();\r\n\r\n  /** @property The onAfterFormSubmitted event. Triggered after the form is submitted.*/\r\n  @Output() afterFormSubmitted = new EventEmitter<any>();\r\n\r\n  /** @property The root container element.*/\r\n  @ViewChild('container') containerElement: ElementRef;\r\n\r\n  /** @property The validation summary component.*/\r\n  @ViewChild(ValidationSummaryComponent) validationSummaryComponent: ValidationSummaryComponent;\r\n\r\n  /** @property The list of input field components.*/\r\n  @ViewChildren(InputFieldComponent) inputFieldComponents: QueryList<InputFieldComponent>;\r\n\r\n  /** @property The list of select field components.*/\r\n  @ViewChildren(SelectFieldComponent) selectFieldComponents: QueryList<SelectFieldComponent>;\r\n\r\n  /** @property The list of datetime field components.*/\r\n  @ViewChildren(DatetimeFieldComponent) datetimeFieldComponents: QueryList<DatetimeFieldComponent>;\r\n\r\n  /** @property The list of datetime hijri field components.*/\r\n  @ViewChildren(DatetimeHijriFieldComponent) datetimeHijriFieldComponents: QueryList<DatetimeHijriFieldComponent>;\r\n\r\n  /** @property The list of checkbox field components.*/\r\n  @ViewChildren(CheckboxFieldComponent) checkboxFieldComponents: QueryList<CheckboxFieldComponent>;\r\n\r\n  /** @property The list of radio button field components.*/\r\n  @ViewChildren(RadiobuttonFieldComponent) radiobuttonFieldComponents: QueryList<RadiobuttonFieldComponent>;\r\n\r\n  /** @property The list of multi select field components.*/\r\n  @ViewChildren(MultiSelectFieldComponent) multiSelectFieldComponents: QueryList<MultiSelectFieldComponent>;\r\n\r\n  /** @property The list of chips field components.*/\r\n  @ViewChildren(ChipsFieldComponent) chipsFieldComponents: QueryList<ChipsFieldComponent>;\r\n\r\n  /** @property The list of editor field components.*/\r\n  @ViewChildren(EditorFieldComponent) editorFieldComponents: QueryList<EditorFieldComponent>;\r\n\r\n  /** @property The list of mask field components.*/\r\n  @ViewChildren(MaskFieldComponent) maskFieldComponents: QueryList<MaskFieldComponent>;\r\n\r\n  /** @property The list of time field components.*/\r\n  @ViewChildren(TimeFieldComponent) timeFieldComponents: QueryList<TimeFieldComponent>;\r\n\r\n  /** @property The list of location field components.*/\r\n  @ViewChildren(LocationFieldComponent) locationFieldComponents: QueryList<LocationFieldComponent>;\r\n\r\n  /** @property The list of file upload field components.*/\r\n  @ViewChildren(FileUploadFieldComponent) fileUploadFieldComponents: QueryList<FileUploadFieldComponent>;\r\n\r\n  /** @property The list of recaptcha field components.*/\r\n  @ViewChildren(ImageCropperFieldComponent) imageCropperFieldComponents: QueryList<ImageCropperFieldComponent>;\r\n\r\n  /** @property The list of recaptcha field components.*/\r\n  @ViewChildren(RecaptchaFieldComponent) recaptchaFieldComponents: QueryList<RecaptchaFieldComponent>;\r\n\r\n  /** @property The list of recaptcha field components.*/\r\n  @ViewChildren(RatingFieldComponent) ratingFieldComponents: QueryList<RatingFieldComponent>;\r\n\r\n  /** @property The list of all field components.*/\r\n  public fieldComponents: Array<FieldComponent> = new Array<FieldComponent>();\r\n\r\n  /** @property The main configuration object.*/\r\n  public configuration: Configuration = new Configuration();\r\n\r\n  /** @property Whether to show the progress indicator.*/\r\n  public showProgressIndicator: boolean = true;\r\n\r\n  constructor(\r\n    public bridgeService: BridgeService,\r\n    private httpRequestsService: HttpRequestsService,\r\n    private localStorageService: LocalStorageService,\r\n    private utilitiesService: UtilitiesService,\r\n    private translateService: TranslateService,\r\n    private languageService: LanguageService,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n    private translatePipe: TranslatePipe,\r\n    @Optional() private route: ActivatedRoute\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.bridgeService.parentComponent = this.parentComponent;\r\n\r\n    if (typeof this.additionalParameters === 'string') {\r\n      this.additionalParameters = JSON.parse(this.additionalParameters);\r\n    }\r\n\r\n    this.bridgeService.additionalParameters = this.additionalParameters;\r\n\r\n    this.bindForm();\r\n  }\r\n\r\n  /** @description Clears the form.\r\n  * @param NgForm form The form.\r\n  */\r\n  public clearForm(form: NgForm) {\r\n    for (const fieldComponent of this.fieldComponents) {\r\n      fieldComponent.clearValue();\r\n    }\r\n\r\n    this.configuration.validationErrors = new Array<InputError>();\r\n\r\n    this.formCleared.emit();\r\n  }\r\n\r\n  /** @description Saves the form.\r\n  * @param NgForm form The form.\r\n  */\r\n  public saveForm(form: NgForm) {\r\n    // trigger recaptcha validation if exists.\r\n    for (const recaptchaFieldComponents of this.recaptchaFieldComponents.toArray()) {\r\n      recaptchaFieldComponents.validate(null, true);\r\n    }\r\n\r\n    if (this.isFormValid()) {\r\n      this.showProgressIndicator = true;\r\n\r\n      const values = this.getRequestBody();\r\n\r\n      this.beforeFormSaved.emit(values);\r\n\r\n      console.log(values);\r\n\r\n      const endpoint = this.utilitiesService.replaceTokens(\r\n        this.configuration.endpoints.save,\r\n        this.route,\r\n        this.bridgeService.additionalParameters\r\n      );\r\n\r\n      this.httpRequestsService.post(endpoint, values).subscribe(response => {\r\n        console.log(response);\r\n\r\n        this.afterFormSaved.emit(new ResponseEventArgs(true, response, values));\r\n\r\n        this.showProgressIndicator = false;\r\n\r\n        if (this.configuration.notifications.showResultMessage) {\r\n          swal({\r\n            title: this.translatePipe.transform(this.configuration.notifications.saveSuccessMessageTitle),\r\n            html: this.translatePipe.transform(this.configuration.notifications.saveSuccessMessageDetails),\r\n            type: SwalTypes.Success,\r\n            confirmButtonText: this.languageService.translations.buttons.Ok\r\n          });\r\n        }\r\n      }, exception => {\r\n        console.error('saveForm: ', exception);\r\n\r\n        this.afterFormSaved.emit(new ResponseEventArgs(false, exception, values));\r\n\r\n        this.showProgressIndicator = false;\r\n\r\n        if (this.configuration.notifications.showResultMessage) {\r\n          swal({\r\n            title: this.translatePipe.transform(this.configuration.notifications.saveErrorMessageTitle),\r\n            html: this.translatePipe.transform(this.configuration.notifications.saveErrorMessageDetails),\r\n            type: SwalTypes.Error,\r\n            confirmButtonText: this.languageService.translations.buttons.Ok\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /** @description Submits the form.\r\n  * @param NgForm form The form.\r\n  */\r\n  public submitForm(form: NgForm) {\r\n    this.validateForm();\r\n\r\n    if (this.isFormValid()) {\r\n      this.showProgressIndicator = true;\r\n\r\n      const values = this.getRequestBody();\r\n\r\n      this.beforeFormSubmitted.emit(values);\r\n\r\n      console.log(values);\r\n\r\n      const endpoint = this.utilitiesService.replaceTokens(\r\n        this.configuration.endpoints.submit,\r\n        this.route,\r\n        this.bridgeService.additionalParameters\r\n      );\r\n\r\n      this.httpRequestsService.post(endpoint, values).subscribe(response => {\r\n        console.log(response);\r\n\r\n        this.afterFormSubmitted.emit(new ResponseEventArgs(true, response, values));\r\n\r\n        this.showProgressIndicator = false;\r\n\r\n        if (this.configuration.notifications.showResultMessage) {\r\n          swal({\r\n            title: this.translatePipe.transform(this.configuration.notifications.submitSuccessMessageTitle),\r\n            html: this.translatePipe.transform(this.configuration.notifications.submitSuccessMessageDetails),\r\n            type: SwalTypes.Success,\r\n            confirmButtonText: this.languageService.translations.buttons.Ok\r\n          });\r\n        }\r\n      }, exception => {\r\n        console.error('submitForm: ', exception);\r\n\r\n        this.afterFormSubmitted.emit(new ResponseEventArgs(false, exception, values));\r\n\r\n        this.showProgressIndicator = false;\r\n\r\n        if (this.configuration.notifications.showResultMessage) {\r\n          swal({\r\n            title: this.translatePipe.transform(this.configuration.notifications.submitErrorMessageTitle),\r\n            html: this.translatePipe.transform(this.configuration.notifications.submitErrorMessageDetails),\r\n            type: SwalTypes.Error,\r\n            confirmButtonText: this.languageService.translations.buttons.Ok\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      this.validationSummaryComponent.showSummaryAlert();\r\n    }\r\n  }\r\n\r\n  /** @description Validates the form.*/\r\n  public validateForm() {\r\n    for (const fieldComponent of this.fieldComponents) {\r\n      this.validateFormFieldComponent(fieldComponent);\r\n    }\r\n  }\r\n\r\n  /** @description Gets whether the form is valid.\r\n   * @return boolean Whether the form is valid.\r\n  */\r\n  public isFormValid(): boolean {\r\n    return !this.configuration.validationErrors || this.configuration.validationErrors.length === 0;\r\n  }\r\n\r\n  /** @description Gets the request body.\r\n   * @return any source The request body.\r\n  */\r\n  public getRequestBody(): any {\r\n    if (this.configuration.settings.postMode === PostModes.FormData) {\r\n      return this.getFormData();\r\n    } else {\r\n      return this.getFormValues();\r\n    }\r\n  }\r\n\r\n  /** @description Gets the form field values.\r\n   * @return any source The form values.\r\n  */\r\n  public getFormValues(): any {\r\n    const values = {};\r\n\r\n    for (const fieldComponent of this.fieldComponents) {\r\n      if (fieldComponent.field.data) {\r\n        values[fieldComponent.field.name] = fieldComponent.getValue();\r\n      }\r\n    }\r\n\r\n    return values;\r\n  }\r\n\r\n  /** @description Gets the form field values.\r\n   * @return any source The form data.\r\n  */\r\n  public getFormData(): FormData {\r\n    let data = new FormData();\r\n\r\n    for (const fieldComponent of this.fieldComponents) {\r\n      data = fieldComponent.appendFormData(data);\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  /** @description Gets a field component reference by its name.\r\n   * @param string name The name.\r\n   * @return FieldComponent The field component reference.\r\n  */\r\n  public getComponent(name: string): FieldComponent {\r\n    return this.fieldComponents.find(fc => fc.field.name === name);\r\n  }\r\n\r\n  /** @description Checks whether the button should be hidden.\r\n   * @param any button The button.\r\n   * @return FieldComponent Whether the button should be hidden.\r\n  */\r\n  public isButtonHidden(button: any): boolean {\r\n    return (button && button.hidden) || (this.configuration.currentSection &&\r\n      this.configuration.currentSection.hideButtons &&\r\n      this.configuration.currentSection.hideButtons.indexOf(button.name) > -1\r\n    );\r\n  }\r\n\r\n  /** @description Sets the form data.\r\n   * @param any formData The form data.\r\n  */\r\n  public setFormData(formData) {\r\n    for (const responseField of formData.fields) {\r\n      if (responseField.value) {\r\n        const fieldComponent = this.getComponent(responseField.name);\r\n\r\n        if (fieldComponent) {\r\n          fieldComponent.updateValue(responseField);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @description Binds the dynamic form.*/\r\n  private async bindForm() {\r\n    await this.loadConfiguration();\r\n\r\n    // workaround for datetime fields.\r\n    const dateFields = this.configuration.mergedFields.filter(f => f.fieldType === FieldTypes.DateTime);\r\n\r\n    for (const field of dateFields) {\r\n      this.handleDefaultDateTimeSettings(field);\r\n    }\r\n\r\n    this.changeDetectorRef.detectChanges();\r\n\r\n    this.fieldComponents = this.fieldComponents.concat(\r\n      this.inputFieldComponents.toArray(),\r\n      this.selectFieldComponents.toArray(),\r\n      this.datetimeFieldComponents.toArray(),\r\n      this.datetimeHijriFieldComponents.toArray(),\r\n      this.checkboxFieldComponents.toArray(),\r\n      this.radiobuttonFieldComponents.toArray(),\r\n      this.multiSelectFieldComponents.toArray(),\r\n      this.chipsFieldComponents.toArray(),\r\n      this.editorFieldComponents.toArray(),\r\n      this.maskFieldComponents.toArray(),\r\n      this.timeFieldComponents.toArray(),\r\n      this.locationFieldComponents.toArray(),\r\n      this.fileUploadFieldComponents.toArray(),\r\n      this.imageCropperFieldComponents.toArray(),\r\n      this.recaptchaFieldComponents.toArray(),\r\n      this.ratingFieldComponents.toArray()\r\n    );\r\n\r\n    this.handleDefaultSettings();\r\n\r\n    this.bindFormData();\r\n\r\n    for (const fieldComponent of this.locationFieldComponents.toArray()) {\r\n      fieldComponent.activateSearchInput();\r\n    }\r\n\r\n    this.translateService.onLangChange.subscribe(response => {\r\n      if (this.configuration.settings.formMode === FormModes.Display) {\r\n        this.bindFormData();\r\n      }\r\n\r\n      for (const fieldComponent of this.recaptchaFieldComponents.toArray()) {\r\n        fieldComponent.setCaptchaLanguge();\r\n      }\r\n    });\r\n  }\r\n\r\n  /** @description Loads the configuration as a get request or from local storage.*/\r\n  private async loadConfiguration() {\r\n    this.configuration = await this.utilitiesService.loadFile(this.configurationSourceUrl);\r\n\r\n    // if it is in local, read the already merged fields. otherwise, merge it and save in local storage.\r\n    if (!this.configuration.isLocal) {\r\n      // merge the form json schema from the different source pieces.\r\n      if (this.configuration.settings.sourceFormSchemas) {\r\n        for (let i = this.configuration.settings.sourceFormSchemas.length - 1; i >= 0; i--) {\r\n\r\n          const sourceFormSchemaUrl = this.configuration.settings.sourceFormSchemas[i];\r\n\r\n          const sourceFormSchema = await this.utilitiesService.loadFile(sourceFormSchemaUrl);\r\n\r\n          this.configuration = this.utilitiesService.mergeRecursive(sourceFormSchema, this.configuration);\r\n        }\r\n      }\r\n\r\n      const allFields = await this.utilitiesService.loadFile(this.configuration.settings.allFieldsSource);\r\n\r\n      if (!allFields.isLocal) {\r\n        this.localStorageService.save(this.configuration.settings.allFieldsSource, allFields);\r\n      }\r\n\r\n      this.configuration.mergedFields = new Array<Field>();\r\n\r\n      // merge the field properties with the all fields list.\r\n      for (const fieldName in this.configuration.fields) {\r\n        if (this.configuration.fields.hasOwnProperty(fieldName)) {\r\n          const sourceField = allFields.fields.find(f => f.name === fieldName);\r\n\r\n          if (sourceField) {\r\n            const mergedField = this.utilitiesService.mergeRecursive(sourceField, this.configuration.fields[fieldName]);\r\n\r\n            this.configuration.mergedFields.push(mergedField);\r\n          } else {\r\n            console.warn(`The field ${fieldName} doesn't exist in the all-fields-list.`);\r\n          }\r\n        }\r\n      }\r\n\r\n      this.localStorageService.save(this.configurationSourceUrl, this.configuration);\r\n    }\r\n\r\n    if (this.configuration.sections && this.configuration.sections.length > 0) {\r\n      this.configuration.currentSection = this.configuration.sections[0];\r\n    }\r\n\r\n    this.bridgeService.configuration = this.configuration;\r\n  }\r\n\r\n  /** @description Handles all fields' default settings.*/\r\n  private handleDefaultSettings() {\r\n    for (const fieldComponent of this.fieldComponents) {\r\n      fieldComponent.handleDefaultSettings();\r\n    }\r\n  }\r\n\r\n  /** @description Handles a date field's default settings.\r\n   * It is buggy if done from the component after it is loaded.\r\n   * @param Field field The field component.\r\n  */\r\n  private handleDefaultDateTimeSettings(field: Field) {\r\n    // in case of datetime field, parse the values from string to date and execute any functions.\r\n    if (field.minDate) {\r\n      field.minDateValue = this.utilitiesService.evaluateFunctionOrDefault(field.minDate, new Date(field.minDate));\r\n    }\r\n\r\n    if (field.maxDate) {\r\n      field.maxDateValue = this.utilitiesService.evaluateFunctionOrDefault(field.maxDate, new Date(field.maxDate));\r\n    }\r\n\r\n    if (field.data.dateValue) {\r\n      field.data.value = this.utilitiesService.evaluateFunctionOrDefault(field.data.dateValue, new Date(field.data.dateValue));\r\n    }\r\n\r\n    if (field.defaultDate) {\r\n      field.defaultDateValue = this.utilitiesService.evaluateFunctionOrDefault(field.defaultDate, new Date(field.defaultDate));\r\n    }\r\n\r\n    if (field.minDateValue && field.maxDateValue) {\r\n      field.yearRange = field.minDateValue.getFullYear() + ':' + field.maxDateValue.getFullYear();\r\n    }\r\n  }\r\n\r\n  /** @description Binds the form data.*/\r\n  private bindFormData() {\r\n    if (this.configuration.endpoints.get) {\r\n      const endpoint = this.utilitiesService.replaceTokens(\r\n        this.configuration.endpoints.get,\r\n        this.route,\r\n        this.bridgeService.additionalParameters\r\n      );\r\n\r\n      this.httpRequestsService.get(endpoint).subscribe(response => {\r\n        this.setFormData(response);\r\n\r\n        this.formDataBound.emit(response);\r\n\r\n        this.showProgressIndicator = false;\r\n      }, exception => {\r\n        console.error('bindFormData: ', exception);\r\n\r\n        this.showProgressIndicator = false;\r\n\r\n        if (this.configuration.notifications.showResultMessage) {\r\n          swal({\r\n            title: this.translatePipe.transform(this.configuration.notifications.getErrorMessageTitle),\r\n            html: this.translatePipe.transform(this.configuration.notifications.getErrorMessageDetails),\r\n            type: SwalTypes.Error,\r\n            confirmButtonText: this.languageService.translations.buttons.Ok\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      this.formDataBound.emit(null);\r\n\r\n      this.showProgressIndicator = false;\r\n    }\r\n  }\r\n\r\n  /** @description Validates a form field component.\r\n   * @param FieldComponent fieldComponent The field component.\r\n   * @return Array<InputError> The list of validation errors.\r\n  */\r\n  private validateFormFieldComponent(fieldComponent: FieldComponent): Array<InputError> {\r\n    let fieldValidationErrors = new Array<InputError>();\r\n\r\n    if (!fieldComponent.field.hidden) {\r\n      fieldValidationErrors = fieldComponent.validate(null, true);\r\n    }\r\n\r\n    return fieldValidationErrors;\r\n  }\r\n\r\n  /** @description Triggers a dynamic event in case it is defined.\r\n   * @param string eventType The type of the event.\r\n   * @param any eventArguments The event arguments of the action causing the trigger.\r\n   * @param any source The source of the action causing the trigger.\r\n  */\r\n  public triggerDynamicEvent(eventType: string, eventArguments: any, source: any) {\r\n    if (source.eventTriggers) {\r\n      const event = source.eventTriggers[eventType];\r\n\r\n      const parentEventHandlerFunction = this.parentComponent[event];\r\n\r\n      if (parentEventHandlerFunction) {\r\n        parentEventHandlerFunction(this.parentComponent, source);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RecaptchaCommonModule } from 'ng-recaptcha/recaptcha/recaptcha-common.module';\r\nimport { RecaptchaModule } from 'ng-recaptcha/recaptcha/recaptcha.module';\r\nimport { AgmCoreModule } from '@agm/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\r\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\r\nimport { InputTextModule } from 'primeng/inputtext';\r\nimport { CalendarModule } from 'primeng/calendar';\r\nimport { CheckboxModule } from 'primeng/checkbox';\r\nimport { RadioButtonModule } from 'primeng/radiobutton';\r\nimport { DropdownModule } from 'primeng/dropdown';\r\nimport { MultiSelectModule } from 'primeng/multiselect';\r\nimport { FileUploadModule } from 'primeng/fileupload';\r\nimport { ChipsModule } from 'primeng/chips';\r\nimport { EditorModule } from 'primeng/editor';\r\nimport { InputMaskModule } from 'primeng/inputmask';\r\nimport { ImageCropperModule } from 'ng2-img-cropper';\r\nimport { RatingModule } from 'primeng/rating';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport {\r\n  MatDialogModule, MatInputModule, MatToolbarModule, MatSnackBarModule,\r\n  MatButtonModule, MatButtonToggleModule, MatFormFieldModule, MatIconModule,\r\n  MatSelectModule\r\n} from '@angular/material';\r\n\r\nimport { WMatTimePickerComponent } from './components/controls/time-control/w-mat-timepicker/w-mat-timepicker.component';\r\nimport { WTimeDialogComponent } from './components/controls/time-control/w-time-dialog/w-time-dialog.component';\r\nimport { WClockComponent } from './components/controls/time-control/w-clock/w-clock.component';\r\nimport { WTimeComponent } from './components/controls/time-control/w-time/w-time.component';\r\n\r\nimport { FieldComponent } from './components/field-templates/field/field.component';\r\nimport { BoundableFieldComponent } from './components/field-templates/boundable-field/boundable-field.component';\r\nimport { InputFieldComponent } from './components/field-templates/input-field/input-field.component';\r\nimport { DatetimeFieldComponent } from './components/field-templates/datetime-field/datetime-field.component';\r\nimport { SelectFieldComponent } from './components/field-templates/select-field/select-field.component';\r\nimport { DatetimeHijriFieldComponent } from './components/field-templates/datetime-hijri-field/datetime-hijri-field.component';\r\nimport { CheckboxFieldComponent } from './components/field-templates/checkbox-field/checkbox-field.component';\r\nimport { RadiobuttonFieldComponent } from './components/field-templates/radiobutton-field/radiobutton-field.component';\r\nimport { MultiSelectFieldComponent } from './components/field-templates/multi-select-field/multi-select-field.component';\r\nimport { ChipsFieldComponent } from './components/field-templates/chips-field/chips-field.component';\r\nimport { EditorFieldComponent } from './components/field-templates/editor-field/editor-field.component';\r\nimport { MaskFieldComponent } from './components/field-templates/mask-field/mask-field.component';\r\nimport { TimeFieldComponent } from './components/field-templates/time-field/time-field.component';\r\nimport { LocationFieldComponent } from './components/field-templates/location-field/location-field.component';\r\nimport { FileUploadFieldComponent } from './components/field-templates/file-upload-field/file-upload-field.component';\r\nimport { InfoFieldComponent } from './components/field-templates/info-field/info-field.component';\r\nimport { MasterDetailFieldComponent } from './components/field-templates/master-detail-field/master-detail-field.component';\r\nimport { ImageCropperFieldComponent } from './components/field-templates/image-cropper-field/image-cropper-field.component';\r\nimport { RatingFieldComponent } from './components/field-templates/rating-field/rating-field.component';\r\nimport { RecaptchaFieldComponent } from './components/field-templates/recaptcha-field/recaptcha-field.component';\r\n\r\nimport { TabsSectionComponent } from './components/form-part-templates/tabs-section/tabs-section.component';\r\nimport { NextPreviousSectionComponent } from './components/form-part-templates/next-previous-section/next-previous-section.component';\r\nimport { ValidationSummaryComponent } from './components/form-part-templates/validation-summary/validation-summary.component';\r\nimport { ProgressIndicatorComponent } from './components/form-part-templates/progress-indicator/progress-indicator.component';\r\nimport { DefaultMasterDetailFormComponent } from './components/form-part-templates/default-master-detail-form/default-master-detail-form.component';\r\n\r\nimport { DynamicFormComponent } from './components/dynamic-form/dynamic-form.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    WMatTimePickerComponent,\r\n    WTimeDialogComponent,\r\n    WClockComponent,\r\n    WTimeComponent,\r\n    FieldComponent,\r\n    BoundableFieldComponent,\r\n    InputFieldComponent,\r\n    SelectFieldComponent,\r\n    DatetimeFieldComponent,\r\n    DatetimeHijriFieldComponent,\r\n    CheckboxFieldComponent,\r\n    RadiobuttonFieldComponent,\r\n    MultiSelectFieldComponent,\r\n    ChipsFieldComponent,\r\n    EditorFieldComponent,\r\n    MaskFieldComponent,\r\n    TimeFieldComponent,\r\n    LocationFieldComponent,\r\n    FileUploadFieldComponent,\r\n    RecaptchaFieldComponent,\r\n    InfoFieldComponent,\r\n    MasterDetailFieldComponent,\r\n    ImageCropperFieldComponent,\r\n    RatingFieldComponent,\r\n    TabsSectionComponent,\r\n    NextPreviousSectionComponent,\r\n    ValidationSummaryComponent,\r\n    ProgressIndicatorComponent,\r\n    DefaultMasterDetailFormComponent,\r\n    DynamicFormComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    BrowserModule,\r\n    FormsModule,\r\n    BrowserAnimationsModule,\r\n    FlexLayoutModule,\r\n    InputTextModule,\r\n    CalendarModule,\r\n    CheckboxModule,\r\n    RadioButtonModule,\r\n    FileUploadModule,\r\n    EditorModule,\r\n    InputMaskModule,\r\n    ChipsModule,\r\n    DropdownModule,\r\n    MultiSelectModule,\r\n    MatDialogModule,\r\n    MatToolbarModule,\r\n    MatInputModule,\r\n    MatSnackBarModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatFormFieldModule,\r\n    MatIconModule,\r\n    MatSelectModule,\r\n    ImageCropperModule,\r\n    RatingModule,\r\n    RecaptchaCommonModule,\r\n    RecaptchaModule.forRoot(),\r\n    NgbModule.forRoot(),\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: HttpLoaderFactory,\r\n        deps: [HttpClient]\r\n      }\r\n    }),\r\n    AgmCoreModule.forRoot({\r\n      apiKey: 'AIzaSyDkk4mAY1r5Q-abux5POCscTR0LojWMwUo',\r\n      libraries: ['places'],\r\n      region: 'LB',\r\n      language: 'en'\r\n    })\r\n  ],\r\n  entryComponents: [\r\n    DefaultMasterDetailFormComponent,\r\n    WMatTimePickerComponent,\r\n    WTimeDialogComponent\r\n  ],\r\n  exports: [\r\n    WMatTimePickerComponent,\r\n    WTimeDialogComponent,\r\n    WClockComponent,\r\n    WTimeComponent,\r\n    FieldComponent,\r\n    BoundableFieldComponent,\r\n    InputFieldComponent,\r\n    SelectFieldComponent,\r\n    DatetimeFieldComponent,\r\n    DatetimeHijriFieldComponent,\r\n    CheckboxFieldComponent,\r\n    RadiobuttonFieldComponent,\r\n    MultiSelectFieldComponent,\r\n    ChipsFieldComponent,\r\n    EditorFieldComponent,\r\n    MaskFieldComponent,\r\n    TimeFieldComponent,\r\n    LocationFieldComponent,\r\n    FileUploadFieldComponent,\r\n    RecaptchaFieldComponent,\r\n    InfoFieldComponent,\r\n    MasterDetailFieldComponent,\r\n    ImageCropperFieldComponent,\r\n    RatingFieldComponent,\r\n    TabsSectionComponent,\r\n    NextPreviousSectionComponent,\r\n    ValidationSummaryComponent,\r\n    ProgressIndicatorComponent,\r\n    DefaultMasterDetailFormComponent,\r\n    DynamicFormComponent\r\n  ]\r\n})\r\nexport class NetwaysLibModule { }\r\n\r\nexport function HttpLoaderFactory(http: HttpClient) {\r\n  return new TranslateHttpLoader(http);\r\n}\r\n"]}