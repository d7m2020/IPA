{"__symbolic":"module","version":4,"exports":[{"from":"@agm/core/core.module"}],"metadata":{"WMatTimePickerComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":6,"character":1},"arguments":[{"selector":"ntw-mat-timepicker","styles":[".time-picker-button{padding:0;margin:0;min-width:44px}:host ::ng-deep .ui-dropdown,:host ::ng-deep input.ui-inputtext.ui-widget.ui-state-default,:host ::ng-deep p-dropdown,input.form-input{width:100%!important;height:35px}"],"template":"<div fxFlex\n     fxLayout=\"row\"\n     class=\"w-mat-timepicker\">\n\n  <button mat-button type=\"button\"\n          (click)=\"showPicker($event)\"\n          class=\"time-picker-button\">\n    <i class=\"fa fa-clock-o\"></i>\n  </button>\n\n  <input matInput\n         [id]=\"inputId\"\n         [name]=\"inputName\"\n         [disabled]=\"disabled\"\n         [readonly]=\"readonly\"\n         [class]=\"inputClass\"\n         [title]=\"tooltip\"\n         [placeholder]=\"placeholderValue\"\n         [value]=\"time\">\n</div>\n","providers":[{"__symbolic":"reference","module":"@ngx-translate/core","name":"TranslatePipe","line":30,"character":14}]}]}],"members":{"userTime":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":34,"character":3}}]}],"userTimeChange":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":36,"character":3}}]}],"color":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":38,"character":3}}]}],"disabled":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":40,"character":3}}]}],"readonly":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":42,"character":3}}]}],"inputClass":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":44,"character":3}}]}],"tooltip":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":46,"character":3}}]}],"placeholderValue":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":48,"character":3}}]}],"inputId":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":50,"character":3}}]}],"inputName":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":52,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/material","name":"MatDialog","line":55,"character":20},{"__symbolic":"reference","module":"@ngx-translate/core","name":"TranslatePipe","line":56,"character":27}]}],"ngOnInit":[{"__symbolic":"method"}],"showPicker":[{"__symbolic":"method"}],"emituserTimeChange":[{"__symbolic":"method"}]}},"WTimeDialogComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":5,"character":1},"arguments":[{"styles":[".w-timepicker-dialog{padding:0;margin:-24px;width:calc(100% + 48px)}"],"template":"<div mat-dialog-content class=\"w-timepicker-dialog\">\n  <ntw-time [color]=\"color\" [userTime]=\"userTime\" (reverted)=\"revert()\" (submitted)=\"submit()\"></ntw-time>\n</div>\n"}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Inject","line":20,"character":5},"arguments":[{"__symbolic":"reference","module":"@angular/material","name":"MAT_DIALOG_DATA","line":20,"character":12}]}],null],"parameters":[{"__symbolic":"reference","name":"UserTimeData"},{"__symbolic":"reference","name":"MatDialogRef","module":"@angular/material","arguments":[{"__symbolic":"reference","name":"WTimeDialogComponent"}]}]}],"revert":[{"__symbolic":"method"}],"submit":[{"__symbolic":"method"}]}},"UserTimeData":{"__symbolic":"class","members":{}},"CLOCK_TYPE":{"HOURS":1,"MINUTES":2},"TimeFormat":{"__symbolic":"interface"},"ITime":{"__symbolic":"interface"},"WClockComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":17,"character":1},"arguments":[{"selector":"ntw-clock","styles":[".w-clock-wrapper{height:100%;padding:0 24px}.w-clock-wrapper .w-clock{width:200px;height:200px;border-radius:50%;cursor:pointer;padding:24px;background:#ededed}.w-clock-wrapper .w-clock .w-clock-container{width:100%;height:100%;position:relative;display:block}.w-clock-wrapper .w-clock .w-clock-center{height:6px;width:6px;position:absolute;left:0;right:0;top:0;bottom:0;margin:auto;border-radius:50%}.w-clock-wrapper .w-clock .w-pointer{box-shadow:none;width:1px;height:50%;position:absolute;left:0;right:0;bottom:0;margin:0 auto;padding:0;-webkit-transform-origin:top center;transform-origin:top center;transition:transform .2s;transition:transform .2s,-webkit-transform .2s;z-index:0;pointer-events:none}.w-clock-wrapper .w-clock .w-clock-step{display:block;position:absolute;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);transition:transform .2s;transition:transform .2s,-webkit-transform .2s}.w-clock-wrapper .w-clock .w-clock-step .mat-mini-fab{box-shadow:none;background-color:transparent}.w-clock-wrapper .w-clock .w-clock-selected{position:absolute;bottom:-19px;left:-19px;min-width:0;min-height:0;pointer-events:none;box-shadow:none;cursor:none}.w-clock-deg0{top:0;left:50%}.w-clock-deg15{top:1.70370869%;left:62.94095226%}.w-clock-deg30{top:6.69872981%;left:75%}.w-clock-deg45{top:14.64466094%;left:85.35533905%}.w-clock-deg60{top:25%;left:93.30127019%}.w-clock-deg75{top:37.05904774%;left:98.29629131%}.w-clock-deg90{top:50%;left:100%}.w-clock-deg105{top:62.94095226%;left:98.29629131%}.w-clock-deg120{top:75%;left:93.30127019%}.w-clock-deg135{top:85.35533906%;left:85.35533906%}.w-clock-deg150{top:93.30127019%;left:75%}.w-clock-deg165{top:98.29629131%;left:62.94095226%}.w-clock-deg180{top:100%;left:50%}.w-clock-deg195{top:98.29629131%;left:37.05904774%}.w-clock-deg210{top:93.30127019%;left:25%}.w-clock-deg225{top:85.35533906%;left:14.64466094%}.w-clock-deg240{top:75%;left:6.69872981%}.w-clock-deg255{top:62.94095226%;left:1.703708686%}.w-clock-deg270{top:50%;left:0}.w-clock-deg285{top:37.05904774%;left:1.703708686%}.w-clock-deg300{top:25%;left:6.69872981%}.w-clock-deg315{top:14.64466094%;left:14.64466094%}.w-clock-deg330{top:6.69872981%;left:25%}.w-clock-deg345{top:1.703708686%;left:37.05904774%}.w-clock-deg360{top:0;left:50%}"],"template":"<div fxLayout=\"row\"\n     fxLayoutAlign=\"center center\"\n     class=\"w-clock-wrapper\">\n  <div class=\"w-clock\">\n    <div class=\"w-clock-container\">\n\n      <!-- Clock center -->\n      <button mat-mini-fab\n              [color]=\"color\"\n              class=\"w-clock-center\"></button>\n\n      <!-- Clock hand -->\n      <mat-toolbar [ngStyle]=\"getPointerStyle()\"\n                   [color]=\"color\"\n                   class=\"w-pointer\">\n        <button mat-mini-fab\n                [color]=\"color\"\n                class=\"w-clock-selected\"></button>\n      </mat-toolbar>\n\n      <!-- Hour / Minute number faces -->\n      <div *ngFor=\"let step of steps; let i = index\"\n           [class]=\"getTimeValueClass(step, i)\">\n        <button mat-mini-fab\n                [color]=\"selectedTimePart === step ? color : ''\"\n                (click)=\"changeTimeValue(step)\">\n          {{ step }}\n        </button>\n      </div>\n\n    </div>\n  </div>\n</div>\n"}]}],"members":{"userTime":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":56,"character":3}}]}],"userTimeChange":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":57,"character":3}}]}],"currentView":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":59,"character":3}}]}],"viewChange":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":60,"character":3}}]}],"color":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":62,"character":3}}]}],"ngOnChanges":[{"__symbolic":"method"}],"setupUI":[{"__symbolic":"method"}],"getPointerStyle":[{"__symbolic":"method"}],"getTimeValueClass":[{"__symbolic":"method"}],"changeTimeValue":[{"__symbolic":"method"}]}},"WTimeComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":4,"character":1},"arguments":[{"selector":"ntw-time","template":"<div fxLayout=\"row\"\n     fxLayout.lt-md=\"column\"\n     fxLayoutAlign=\"center center\"\n     class=\"w-time\"\n     [ngClass.xs]=\"'vertical-time'\"\n     [ngClass.sm]=\"'vertical-time'\">\n  <mat-toolbar fxLayout=\"column\"\n               fxLayout.lt-md=\"row\"\n               fxLayoutAlign=\"center center\"\n               [color]=\"color\"\n               class=\"w-timepicker-time-container\">\n\n    <div class=\"w-timepicker-selected-time\">\n      <span [class]=\"currentView === VIEW_HOURS ? 'active': ''\"\n            (click)=\"setCurrentView(VIEW_HOURS)\">{{ formatHour() }}:</span>\n      <span [class]=\"currentView === VIEW_MINUTES ? 'active': ''\"\n            (click)=\"setCurrentView(VIEW_MINUTES)\">{{ formatMinute() }}</span>\n    </div>\n    <div fxLayout=\"column\"\n         fxLayoutAlign=\"center center\"\n         class=\"w-timepicker-selected-ampm\"\n         *ngIf=\"userTime.format === 12\">\n      <span (click)=\"setMeridien('AM')\"\n            [class]=\"userTime.meriden === 'AM' ? 'active' : ''\">{{'AM' | translate}}</span>\n      <span (click)=\"setMeridien('PM')\"\n            [class]=\"userTime.meriden === 'PM' ? 'active' : ''\">{{'PM' | translate}}</span>\n    </div>\n\n  </mat-toolbar>\n\n  <div fxLayout=\"column\"\n       fxLayoutAlign=\"space-between center\"\n       class=\"w-time-content\">\n    <ntw-clock [color]=\"color\"\n             class=\"w-animation-zoom\"\n             [userTime]=\"userTime\"\n             (userTimeChange)=\"emituserTimeChange($event)\"\n             [(currentView)]=\"currentView\"\n             (viewChange)=\"setCurrentView($event)\">\n    </ntw-clock>\n\n    <div fxFlexAlign=\"end\">\n      <button mat-button\n              (click)=\"revert()\">\n        {{revertLabel}}\n      </button>\n      <button mat-button\n              [color]=\"color\"\n              (click)=\"submit()\">\n        {{submitLabel}}\n      </button>\n    </div>\n  </div>\n</div>\n","styles":[":host{display:block}.w-time{max-height:100%;min-height:350px;height:350px}.w-time .w-timepicker-time-container{padding:15px;min-width:160px;width:160px}.w-time .w-timepicker-time-container.mat-toolbar-single-row{height:100%}.w-time .w-timepicker-selected-time{font-size:3.5rem;font-weight:400;display:flex}.w-time .w-timepicker-selected-ampm{font-size:1rem;line-height:1.3rem;padding-top:2rem}.w-time .w-time-content{width:100%;height:100%;padding:6px}.w-time .w-time-content w-clock{padding:12px 0;height:calc(100% - 58px)}.w-time.vertical-time{height:auto}.w-time.vertical-time .w-timepicker-time-container{min-width:auto;width:100%;height:100px}.w-time.vertical-time .w-timepicker-time-container .w-timepicker-selected-ampm{padding:0 12px}.w-timepicker-selected-ampm>span,.w-timepicker-selected-time>span{outline:0;opacity:.5}.w-timepicker-selected-ampm>span:not(.active),.w-timepicker-selected-time>span:not(.active){cursor:pointer}.w-timepicker-selected-ampm>span.active,.w-timepicker-selected-time>span.active{opacity:1}.w-animate-next{opacity:0;-webkit-transform:translate3d(50%,0,1px);transform:translate3d(50%,0,1px)}.w-animate-next-remove{transition:.5s cubic-bezier(.35,0,.25,1);opacity:0;-webkit-transform:translate3d(50%,0,1px);transform:translate3d(50%,0,1px)}.w-animate-next-remove-active{opacity:1;-webkit-transform:translate3d(0,0,1px);transform:translate3d(0,0,1px)}.w-animate-prev{opacity:0;-webkit-transform:translate3d(-50%,0,1px);transform:translate3d(-50%,0,1px)}.w-animate-prev-remove{transition:.3s cubic-bezier(.35,0,.25,1);opacity:0;-webkit-transform:translate3d(-50%,0,1px);transform:translate3d(-50%,0,1px)}.w-animate-prev-remove-active{opacity:1;-webkit-transform:translate3d(0,0,1px);transform:translate3d(0,0,1px)}@-webkit-keyframes w-animation-bounce{from{opacity:0;-webkit-transform:scale(.95);transform:scale(.95)}70%{opacity:1;-webkit-transform:scale(1.05);transform:scale(1.05)}to{-webkit-transform:scale(1);transform:scale(1)}}@keyframes w-animation-bounce{from{opacity:0;-webkit-transform:scale(.95);transform:scale(.95)}70%{opacity:1;-webkit-transform:scale(1.05);transform:scale(1.05)}to{-webkit-transform:scale(1);transform:scale(1)}}.w-animation-zoom.ng-enter{transition:.3s cubic-bezier(.35,0,.25,1);-webkit-animation-duration:.3s;animation-duration:.3s;-webkit-animation-name:w-animation-bounce;animation-name:w-animation-bounce}"],"providers":[{"__symbolic":"reference","module":"@ngx-translate/core","name":"TranslatePipe","line":62,"character":14}]}]}],"members":{"userTime":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":65,"character":3}}]}],"userTimeChange":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":66,"character":3}}]}],"revertLabel":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":68,"character":3}}]}],"submitLabel":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":69,"character":3}}]}],"reverted":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":71,"character":3}}]}],"submitted":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":72,"character":3}}]}],"color":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":74,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@ngx-translate/core","name":"TranslatePipe","line":80,"character":37}]}],"ngOnInit":[{"__symbolic":"method"}],"formatHour":[{"__symbolic":"method"}],"formatMinute":[{"__symbolic":"method"}],"setCurrentView":[{"__symbolic":"method"}],"setMeridien":[{"__symbolic":"method"}],"revert":[{"__symbolic":"method"}],"submit":[{"__symbolic":"method"}],"emituserTimeChange":[{"__symbolic":"method"}]}},"FieldComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":7,"character":1},"arguments":[{"selector":"ntw-field","template":""}]}],"members":{"field":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":16,"character":3},"arguments":["field"]}]}],"control":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":19,"character":3},"arguments":[{"__symbolic":"reference","module":"@angular/forms","name":"NgModel","line":19,"character":13}]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"ɵa"}]}],"handleDefaultSettings":[{"__symbolic":"method"}],"updateValue":[{"__symbolic":"method"}],"clearValue":[{"__symbolic":"method"}],"getValue":[{"__symbolic":"method"}],"appendFormData":[{"__symbolic":"method"}],"triggerDynamicEvent":[{"__symbolic":"method"}],"isFieldHidden":[{"__symbolic":"method"}],"isValidationShown":[{"__symbolic":"method"}],"isValidationAsteriskShown":[{"__symbolic":"method"}],"validate":[{"__symbolic":"method"}],"addValidationError":[{"__symbolic":"method"}],"clearValidationErrors":[{"__symbolic":"method"}],"shouldValidate":[{"__symbolic":"method"}],"preValidate":[{"__symbolic":"method"}],"updateValidationSummary":[{"__symbolic":"method"}],"validateRequiredCondition":[{"__symbolic":"method"}],"validatePatternCondition":[{"__symbolic":"method"}],"validateRangeCondition":[{"__symbolic":"method"}],"isFormInDisplayMode":[{"__symbolic":"method"}]},"statics":{"ValidationErrorClass":"cssClasses.ValidationError"}},"BoundableFieldComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"FieldComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":8,"character":1},"arguments":[{"selector":"ntw-boundable-field","template":""}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[null,null,null,null,[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Optional","line":18,"character":5}}]],"parameters":[{"__symbolic":"reference","name":"ɵa"},{"__symbolic":"reference","name":"ɵb"},{"__symbolic":"reference","module":"@ngx-translate/core","name":"TranslateService","line":16,"character":30},{"__symbolic":"reference","name":"ɵc"},{"__symbolic":"reference","module":"@angular/router","name":"ActivatedRoute","line":18,"character":31}]}],"handleDefaultSettings":[{"__symbolic":"method"}],"dataBindOptions":[{"__symbolic":"method"}],"bindOptions":[{"__symbolic":"method"}]}},"CheckboxFieldComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"BoundableFieldComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":3,"character":1},"arguments":[{"selector":"ntw-checkbox-field","template":"<div [class]=\"field.cssClasses.container\"\n     [hidden]=\"isFieldHidden()\"\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\n\n  <!-- label -->\n  <label [class]=\"field.cssClasses.label\"\n         [for]=\"field.name\">\n    {{field.label | translate}}\n    <span class=\"required-asterisk\"\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\n  </label>\n\n  <!-- input-->\n  <div class=\"checkBoxHolder\"\n       *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\">\n    <p-checkbox *ngFor=\"let checkbox of field.data.options; let i = index\"\n                [id]=\"field.name+'_'+i\"\n                [name]=\"field.name\"\n                [(ngModel)]=\"field.data.value\"\n                [class]=\"field.cssClasses.input\"\n                [ngClass]=\"{'invalid': isValidationShown()}\"\n                [title]=\"field.tooltip | translate\"\n                #input=\"ngModel\"\n                [required]=\"field.validation.required\"\n                [label]=\"checkbox.name | translate\"\n                [value]=\"checkbox.id\"\n                [disabled]=\"field.disabled\"\n                (onChange)=\"triggerDynamicEvent('onChange', $event, field);\"\n                (ngModelChange)=\"validate();\">\n    </p-checkbox>\n  </div>\n\n  <!-- display -->\n  <div [class]=\"field.cssClasses.display\"\n       *ngIf=\"bridgeService?.configuration?.settings?.formMode == 'Display'\">\n    <ul *ngIf=\"field?.data?.value?.length > 1\">\n      <li *ngFor=\"let title of field?.data?.value\">{{title}}</li>\n    </ul>\n    <span *ngIf=\"field?.data?.value?.length == 1\">\n      <span *ngFor=\"let title of field?.data?.value\">{{title}}</span>\n    </span>\n  </div>\n\n  <!-- validations -->\n  <div *ngIf=\"isValidationShown()\">\n    <div *ngFor=\"let error of field?.validationErrors\">\n      <p [ngClass]=\"error.type | translate\">\n        {{error.message | translate}}\n      </p>\n    </div>\n  </div>\n</div>\n","styles":["p-checkbox{display:block}body.ar :host ::ng-deep .ui-chkbox.ui-widget{float:right;margin-left:10px}"]}]}],"members":{"clearValue":[{"__symbolic":"method"}],"appendFormData":[{"__symbolic":"method"}]}},"ChipsFieldComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"FieldComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":3,"character":1},"arguments":[{"selector":"ntw-chips-field","template":"<div [class]=\"field.cssClasses.container\"\n     [hidden]=\"isFieldHidden()\"\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\n\n  <!-- label -->\n  <label [class]=\"field.cssClasses.label\"\n         [for]=\"field.name\">\n    {{field.label | translate}}\n    <span class=\"required-asterisk\"\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\n  </label>\n\n  <!-- input-->\n  <p-chips [id]=\"field.name\"\n           [name]=\"field.name\"\n           [placeholder]=\"(field.placeholder) ? (field.placeholder | translate) : ''\"\n           [class]=\"field.cssClasses.input\"\n           [ngClass]=\"{'invalid': isValidationShown()}\"\n           [title]=\"field.tooltip | translate\"\n           #input=\"ngModel\"\n           [disabled]=\"field.disabled\"\n           [(ngModel)]=\"field.data.value\"\n           [allowDuplicate]=\"field.validation.allowDuplicate\"\n           [addOnBlur]=\"field.addOnBlur\"\n           [addOnTab]=\"field.addOnTab\"\n           [required]=\"field.validation.required\"\n           *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\"\n           (onAdd)=\"triggerDynamicEvent('onAdd', $event, field);\"\n           (onRemove)=\"triggerDynamicEvent('onRemove', $event, field);\"\n           (ngModelChange)=\"validate();\">\n  </p-chips>\n\n  <!-- display -->\n  <div [class]=\"field.cssClasses.display\"\n       *ngIf=\"bridgeService?.configuration?.settings?.formMode == 'Display'\">\n    <ul>\n      <li *ngFor=\"let title of field.data.value\">{{title}}</li>\n    </ul>\n  </div>\n\n  <!-- validations -->\n  <div *ngIf=\"isValidationShown()\">\n    <div *ngFor=\"let error of field?.validationErrors\">\n      <p [ngClass]=\"error.type | translate\">\n        {{error.message | translate}}\n      </p>\n    </div>\n  </div>\n</div>\n","styles":[":host ::ng-deep .ui-chips-input-token,:host ::ng-deep .ui-chips-input-token input{width:100%}:host ::ng-deep .ui-chips>ul.ui-inputtext{padding:5px .25em}"]}]}],"members":{"appendFormData":[{"__symbolic":"method"}]}},"DatetimeFieldComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"FieldComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":7,"character":1},"arguments":[{"selector":"ntw-datetime-field","template":"<div [class]=\"field.cssClasses.container\"\n     [hidden]=\"isFieldHidden()\"\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\n\n  <!-- label -->\n  <label [class]=\"field.cssClasses.label\"\n         [for]=\"field.name\">\n    {{field.label | translate}}\n    <span class=\"required-asterisk\"\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\n  </label>\n\n  <!-- input-->\n  <p-calendar #calendar\n              [id]=\"field.name\"\n              [name]=\"field.name\"\n              [class]=\"field.cssClasses.input\"\n              [ngClass]=\"{'invalid': isValidationShown()}\"\n              [placeholder]=\"(field.placeholder) ? (field.placeholder | translate) : ''\"\n              [title]=\"field.tooltip | translate\"\n              #input=\"ngModel\"\n              [(ngModel)]=\"field.data.value\"\n              [required]=\"field.validation.required\"\n              [readonlyInput]=\"field.readonly\"\n              [disabled]=\"field.disabled\"\n              [showIcon]=\"field.showIcon\"\n              [showTime]=\"field.showTime\"\n              [hourFormat]=\"field.hourFormat\"\n              [monthNavigator]=\"field.monthNavigator\"\n              [yearNavigator]=\"field.yearNavigator\"\n              [yearRange]=\"field.yearRange\"\n              [dateFormat]=\"field.dateFormat\"\n              [minDate]=\"field.minDateValue\"\n              [maxDate]=\"field.maxDateValue\"\n              [defaultDate]=\"field.defaultDateValue\"\n              *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\"\n              (onClose)=\"validate();triggerDynamicEvent('onSelect', $event, field);\"\n              (onSelect)=\"validate();triggerDynamicEvent('onSelect', $event, field);\">\n  </p-calendar>\n\n  <!-- display -->\n  <span [class]=\"field.cssClasses.display\"\n        *ngIf=\"bridgeService?.configuration?.settings?.formMode == 'Display'\">\n    {{field.data.value | date:field.displayDateFormat}}\n  </span>\n\n  <!-- validations -->\n  <div *ngIf=\"isValidationShown()\">\n    <div *ngFor=\"let error of field?.validationErrors\">\n      <p [ngClass]=\"error.type | translate\">\n        {{error.message | translate}}\n      </p>\n    </div>\n  </div>\n</div>\n","styles":["body.en :host ::ng-deep button.ui-datepicker-trigger{right:0}body.ar :host ::ng-deep button.ui-datepicker-trigger{left:0}:host ::ng-deep span.ui-calendar{display:block}:host ::ng-deep p-calendar input{border-radius:.25rem}body.ar :host ::ng-deep .ui-calendar-button{border-radius:.25rem 0 0 .25rem}body.ar :host ::ng-deep .ui-calendar.ui-calendar-w-btn input{border-top-right-radius:.25rem;border-bottom-right-radius:.25rem}:host ::ng-deep button.ui-datepicker-trigger{position:absolute}:host ::ng-deep .ui-calendar .ui-datepicker{width:17em;min-width:auto}:host ::ng-deep .ui-calendar .ui-calendar-button .ui-button-icon-left{font-size:1.25em}"]}]}],"members":{"calendarElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":69,"character":3},"arguments":["calendar"]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"ɵa"},{"__symbolic":"reference","module":"@ngx-translate/core","name":"TranslateService","line":76,"character":30},{"__symbolic":"reference","name":"ɵe"},{"__symbolic":"reference","module":"@angular/common","name":"DatePipe","line":78,"character":22}]}],"ngAfterViewInit":[{"__symbolic":"method"}],"appendFormData":[{"__symbolic":"method"}],"handleDefaultSettings":[{"__symbolic":"method"}],"setCalendarOptions":[{"__symbolic":"method"}]}},"DatetimeHijriFieldComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"FieldComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":8,"character":1},"arguments":[{"selector":"ntw-datetime-hijri-field","template":"<div [class]=\"field.cssClasses.container\"\n     [hidden]=\"isFieldHidden()\"\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\n\n  <!-- label -->\n  <label [class]=\"field.cssClasses.label\"\n         [for]=\"field.name\">\n    {{field.label | translate}}\n    <span class=\"required-asterisk\"\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\n  </label>\n\n  <!-- input-->\n  <div class=\"hijri-date-control\">\n    <input [name]=\"field.name\"\n           [placeholder]=\"(field.placeholder) ? (field.placeholder | translate) : ''\"\n           [class]=\"field.cssClasses.input\"\n           [ngClass]=\"{'invalid': isValidationShown()}\"\n           ngbDatepicker\n           #input=\"ngbDatepicker\"\n           #defaultInput=\"ngModel\"\n           [readonly]=\"field.readonly\"\n           [disabled]=\"field.disabled\"\n           [(ngModel)]=\"field.data.value\"\n           [minDate]=\"field.minDateValue\"\n           [maxDate]=\"field.maxDateValue\"\n           [showWeekNumbers]=\"field.showWeekNumbers\"\n           [displayMonths]=\"field.displayMonths\"\n           [outsideDays]=\"field.outsideDays\"\n           [showWeekdays]=\"field.showWeekdays\"\n           *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\"\n           (click)=\"toggleCalendar();validate();\"\n           (ngModelChange)=\"validate();triggerDynamicEvent('onSelect', $event, field);\" />\n\n    <!-- icon -->\n    <button class=\"hijri-date-icon-container\"\n            [disabled]=\"field.disabled\"\n            type=\"button\"\n            (click)=\"toggleCalendar();\">\n      <span class=\"hijri-date-icon\"\n            *ngIf=\"field.showIcon\">\n      </span>\n    </button>\n  </div>\n\n  <!-- display -->\n  <span [class]=\"field.cssClasses.display\"\n        *ngIf=\"bridgeService?.configuration?.settings?.formMode == 'Display'\">\n    {{field?.data?.value?.day}}/{{field?.data?.value?.month}}/{{field?.data?.value?.year}}\n  </span>\n\n  <!-- validations -->\n  <div *ngIf=\"isValidationShown()\">\n    <div *ngFor=\"let error of field?.validationErrors\">\n      <p [ngClass]=\"error.type | translate\">\n        {{error.message | translate}}\n      </p>\n    </div>\n  </div>\n</div>\n","styles":[".hijri-date{height:35px}.hijri-date-control{position:relative}.hijri-date-icon-container{position:absolute;top:0;padding:0 6px;background-color:#2399e5;color:#fff;cursor:pointer;height:100%;line-height:1.8;border:0}button.hijri-date-icon-container:disabled{opacity:.35}.hijri-date-icon:focus,.hijri-date-icon:hover{background:#1f89ce}.hijri-date-icon:after{content:'\\e927';font-family:primeicons;font-size:1.25em}body.ar :host ::ng-deep ngb-datepicker ngb-datepicker-navigation .ngb-dp-navigation-chevron{-webkit-transform:rotate(45deg);transform:rotate(45deg)}body.ar :host ::ng-deep ngb-datepicker ngb-datepicker-navigation .right .ngb-dp-navigation-chevron{-webkit-transform:rotate(-135deg);transform:rotate(-135deg)}body.ar :host ::ng-deep .custom-select{background-position:left.75rem center}body.ar :host ::ng-deep .hijri-date-icon-container{left:0}body.en :host ::ng-deep .hijri-date-icon-container{right:0}:host ::ng-deep .custom-select{background-position:left .25rem center!important;direction:rtl!important;min-width:100px}:host ::ng-deep ngb-datepicker-month-view .ngb-dp-day,:host ::ng-deep ngb-datepicker-month-view .ngb-dp-week-number,:host ::ng-deep ngb-datepicker-month-view .ngb-dp-weekday{width:2.5rem;height:2.5rem}:host ::ng-deep ngb-datepicker-month-view .ngb-dp-day div{width:100%;height:100%;line-height:2.5rem}"],"providers":[{"provide":{"__symbolic":"reference","module":"@ng-bootstrap/ng-bootstrap","name":"NgbCalendar","line":73,"character":15},"useClass":{"__symbolic":"reference","module":"@ng-bootstrap/ng-bootstrap","name":"NgbCalendarIslamicUmalqura","line":73,"character":38}},{"provide":{"__symbolic":"reference","module":"@ng-bootstrap/ng-bootstrap","name":"NgbDatepickerI18n","line":74,"character":15},"useClass":{"__symbolic":"reference","name":"ɵf"}}]}]}],"members":{"calendar":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":78,"character":3},"arguments":["input"]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"ɵa"},{"__symbolic":"reference","name":"ɵc"}]}],"handleDefaultSettings":[{"__symbolic":"method"}],"appendFormData":[{"__symbolic":"method"}],"toggleCalendar":[{"__symbolic":"method"}]}},"EditorFieldComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"FieldComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":3,"character":1},"arguments":[{"selector":"ntw-editor-field","template":"<div [class]=\"field.cssClasses.container\"\n     [hidden]=\"isFieldHidden()\"\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\n\n  <!-- label -->\n  <label [class]=\"field.cssClasses.label\"\n         [for]=\"field.name\">\n    {{field.label | translate}}\n    <span class=\"required-asterisk\"\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\n  </label>\n\n  <!-- input-->\n  <div [ngClass]=\"{'hide-toolbar':!field.showToolbar}\">\n    <p-editor [id]=\"field.name\"\n              [name]=\"field.name\"\n              #input=\"ngModel\"\n              [placeholder]=\"(field.placeholder) ? (field.placeholder | translate) : ''\"\n              [class]=\"field.cssClasses.input\"\n              [ngClass]=\"{'invalid': isValidationShown()}\"\n              [title]=\"field.tooltip | translate\"\n              [readonly]=\"field.readonly\"\n              [(ngModel)]=\"field.data.value\"\n              [style]=\"{'height':field.height}\"\n              *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\"\n              (onSelectionChange)=\"triggerDynamicEvent('onSelectionChange', $event, field);\"\n              (onTextChange)=\"triggerDynamicEvent('onChange', $event, field);\"\n              (ngModelChange)=\"validate();\">\n    </p-editor>\n  </div>\n\n  <!-- display -->\n  <span [innerHTML]=\"field.data.value\"\n        *ngIf=\"bridgeService?.configuration?.settings?.formMode == 'Display'\"></span>\n\n  <!-- validations -->\n  <div *ngIf=\"isValidationShown()\">\n    <div *ngFor=\"let error of field?.validationErrors\">\n      <p [ngClass]=\"error.type | translate\">\n        {{error.message | translate}}\n      </p>\n    </div>\n  </div>\n</div>\n","styles":["body.ar :host ::ng-deep .ql-editor p{direction:rtl;text-align:right}body.ar :host ::ng-deep span.ql-picker-label{text-align:left}body.ar :host ::ng-deep .ql-editor.ql-blank::before{left:unset}:host ::ng-deep .hide-toolbar .ui-editor-toolbar{display:none}:host ::ng-deep .hide-toolbar .ui-editor-content{border-top:1px solid #ccc!important}"]}]}],"members":{"getValue":[{"__symbolic":"method"}]}},"FileUploadFieldComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"FieldComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":5,"character":1},"arguments":[{"selector":"ntw-file-upload-field","template":"<div [class]=\"field.cssClasses.container\"\n     [hidden]=\"isFieldHidden()\"\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\n\n  <!-- label -->\n  <label [class]=\"field.cssClasses.label\"\n         [for]=\"field.name\">\n    {{field.label | translate}}\n    <span class=\"required-asterisk\"\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\n  </label>\n\n  <!-- input-->\n  <p-fileUpload [id]=\"field.name\"\n                [name]=\"field.name\"\n                [class]=\"field.cssClasses.input\"\n                [ngClass]=\"{'invalid': isValidationShown()}\"\n                [url]=\"field.data.url\"\n                [multiple]=\"field.multiple\"\n                [accept]=\"field.validation.accept\"\n                #input\n                [auto]=\"field.auto\"\n                [maxFileSize]=\"field.validation.maxFileSizeInBytes\"\n                [mode]=\"field.mode\"\n                [showCancelButton]=\"field.buttons.showCancelButton\"\n                [showUploadButton]=\"field.buttons.showUploadButton\"\n                [chooseLabel]=\"field.buttons.chooseLabel | translate\"\n                [uploadLabel]=\"field.buttons.uploadLabel | translate\"\n                [cancelLabel]=\"field.buttons.cancelLabel | translate\"\n                [title]=\"field.tooltip | translate\"\n                [disabled]=\"field.disabled\"\n                invalidFileSizeMessageSummary=\"invalidFileSize\"\n                invalidFileSizeMessageDetail=\"invalidFileSize\"\n                invalidFileTypeMessageDetail=\"invalidFileType\"\n                invalidFileTypeMessageSummary=\"invalidFileType\"\n                customUpload=true\n                *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\"\n                (onSelect)=\"validate('onSelect');\"\n                (onRemove)=\"validate('onRemove');\"\n                (onClear)=\"validate('onClear');\">\n  </p-fileUpload>\n\n  <!-- display -->\n  <div class=\"upload-file-viewer\"\n       *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'New' && field?.data?.value?.length > 0\">\n    <div class=\"upload-file-item\"\n         *ngFor=\"let file of field.data.value\">\n      <a [href]=\"file.url\"\n         [download]=\"file.fileName\"\n         target=\"_blank\"\n         class=\"upload-file-anchor\">\n        <span>\n          <i class=\"fa fa-file\"></i>\n        </span>\n        <span class=\"upload-file-title\">{{file.fileName}}</span>\n      </a>\n\n      <a href=\"javascript:;\"\n         (click)=\"removeFile(file);validate('onRemoveFile');\"\n         *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\"\n         class=\"trash-icon-style\">\n        <span>\n          <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\n        </span>\n      </a>\n      <div class=\"clearfix\"></div>\n    </div>\n  </div>\n\n  <!-- validations -->\n  <div *ngIf=\"isValidationShown()\">\n    <div *ngFor=\"let error of field?.validationErrors\">\n      <p [ngClass]=\"error.type | translate\">\n        {{error.message | translate}}\n      </p>\n    </div>\n  </div>\n</div>\n","styles":[":host ::ng-deep p-fileupload .ui-messages-error{display:none!important}:host ::ng-deep .ui-fileupload{margin-bottom:8px}.upload-file-viewer{border:1px solid #d5d5d5;padding:10px}.upload-file-viewer .upload-file-item{border:1px solid #d5d5d5;padding:10px;background:linear-gradient(to bottom,#f6f7f9 0,#ebedf0 100%);margin-bottom:10px}.upload-file-title{padding:0 15px}a.upload-file-anchor{line-height:2}.upload-file-viewer div:last-child{margin-bottom:0}a.trash-icon-style{padding:6px 11px;border-radius:6px;font-size:12px;border:1px solid #2399e5;color:#fff;background:#2399e5;transition:background-color .2s}a.trash-icon-style:hover{border:1px solid #1f89ce;background:#1f89ce}body.ar :host ::ng-deep a.trash-icon-style{float:left}body.en :host ::ng-deep a.trash-icon-style{float:right}"]}]}],"members":{"fileUploadControl":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":90,"character":3},"arguments":[{"__symbolic":"reference","module":"primeng/fileupload","name":"FileUpload","line":90,"character":13}]}]}],"clearValue":[{"__symbolic":"method"}],"appendFormData":[{"__symbolic":"method"}],"validate":[{"__symbolic":"method"}],"removeFile":[{"__symbolic":"method"}]}},"ImageCropperFieldComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"FieldComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":5,"character":1},"arguments":[{"selector":"ntw-image-cropper-field","template":"<div [class]=\"field.cssClasses.container\"\n     [hidden]=\"isFieldHidden()\"\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\n\n  <!-- label -->\n  <label [class]=\"field?.cssClasses?.label\"\n         [for]=\"field.name\">\n    {{field.label | translate}}\n    <span class=\"required-asterisk\"\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\n  </label>\n\n  <!-- input -->\n  <!-- upload control -->\n  <p-fileUpload [id]=\"field.name\"\n                [name]=\"field.name\"\n                [class]=\"field.cssClasses.input\"\n                [ngClass]=\"{'invalid': isValidationShown()}\"\n                accept=\"image/*\"\n                mode=\"advanced\"\n                [showCancelButton]=false\n                [showUploadButton]=false\n                [chooseLabel]=\"field.buttons.chooseLabel | translate\"\n                [title]=\"field.tooltip | translate\"\n                [disabled]=\"field.disabled\"\n                invalidFileSizeMessageSummary=\"invalidFileSize\"\n                invalidFileSizeMessageDetail=\"invalidFileSize\"\n                invalidFileTypeMessageDetail=\"invalidFileType\"\n                invalidFileTypeMessageSummary=\"invalidFileType\"\n                customUpload=true\n                *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\"\n                (onSelect)=\"setCropperImage();validate();\"\n                (onRemove)=\"clearValue();validate();\">\n  </p-fileUpload>\n\n  <!-- cropper -->\n  <img-cropper *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\"\n               [hidden]=\"!imageFile.src\"\n               [image]=\"imageFile\"\n               [settings]=\"cropperSettings\"\n               (onCrop)=\"setValue()\">\n  </img-cropper>\n\n  <!-- cropped image -->\n  <span class=\"cropped-image\"\n        *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\"\n        [hidden]=\" !imageFile.image\">\n    <img #croppedImage\n         *ngIf=\"imageFile.image\"\n         [src]=\"imageFile.image\"\n         [width]=\"cropperSettings.width\"\n         [height]=\"cropperSettings.height\">\n  </span>\n\n  <!-- display -->\n  <span [class]=\"field.cssClasses.display\"\n        *ngIf=\"bridgeService?.configuration?.settings?.formMode == 'Display'\">\n    <img *ngIf=\"field.data.value\"\n         [src]=\"field.data.value\"\n         [width]=\"cropperSettings.width\"\n         [height]=\"cropperSettings.height\">\n  </span>\n\n  <!-- validations -->\n  <div *ngIf=\"isValidationShown()\">\n    <div *ngFor=\"let error of field?.validationErrors\">\n      <p [ngClass]=\"error.type | translate\">\n        {{error.message | translate}}\n      </p>\n    </div>\n  </div>\n</div>\n","styles":["input.form-input{border:1px solid #ced4da;border-radius:.25rem;padding:5px}p-fileupload{display:block}:host ::ng-deep img-cropper .ng2-imgcrop{border:1px solid #d5d5d5;padding:20px 0;background-color:#ebedf0;width:100%;margin:10px 0;display:block}.form-display img{border:1px solid #d5d5d5;background-color:#ebedf0;padding:10px}.cropped-image{width:100%;display:block;border:1px solid #d5d5d5;background-color:#ebedf0;margin:0 auto;text-align:center;padding:10px}"]}]}],"members":{"cropper":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":84,"character":3},"arguments":[{"__symbolic":"reference","module":"ng2-img-cropper","name":"ImageCropperComponent","line":84,"character":13}]}]}],"croppedImageElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":87,"character":3},"arguments":["croppedImage"]}]}],"fileUploadControl":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":90,"character":3},"arguments":[{"__symbolic":"reference","module":"primeng/fileupload","name":"FileUpload","line":90,"character":13}]}]}],"ngOnInit":[{"__symbolic":"method"}],"updateValue":[{"__symbolic":"method"}],"clearValue":[{"__symbolic":"method"}],"setValue":[{"__symbolic":"method"}],"setCropperImage":[{"__symbolic":"method"}],"initializeCropper":[{"__symbolic":"method"}]}},"InfoFieldComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"FieldComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":3,"character":1},"arguments":[{"selector":"ntw-info-field","template":"<div [class]=\"field.cssClasses.container\"\n     [hidden]=\"isFieldHidden()\"\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\n  <div [innerHTML]=\"field.htmlSnippet | translate\"></div>\n</div>\n","styles":[""]}]}],"members":{}},"InputFieldComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"FieldComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":3,"character":1},"arguments":[{"selector":"ntw-input-field","template":"<div [class]=\"field.cssClasses.container\"\n     [hidden]=\"isFieldHidden()\"\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\n\n  <!-- label -->\n  <label [class]=\"field.cssClasses.label\"\n         [for]=\"field.name\">\n    {{field.label | translate}}\n    <span class=\"required-asterisk\"\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\n  </label>\n\n  <!-- input-->\n  <input [id]=\"field.name\"\n         [name]=\"field.name\"\n         [(ngModel)]=\"field.data.value\"\n         [class]=\"field.cssClasses.input\"\n         [ngClass]=\"{'invalid': isValidationShown()}\"\n         [placeholder]=\"(field.placeholder) ? (field.placeholder | translate) : ''\"\n         [title]=\"field.tooltip | translate\"\n         [autocomplete]=\"field.autoComplete\"\n         #input=\"ngModel\"\n         [type]=\"field.fieldType\"\n         [required]=\"field.validation.required\"\n         [pattern]=\"field.validation.pattern\"\n         [maxlength]=\"field.validation.length\"\n         [readonly]=\"field.readonly\"\n         [disabled]=\"field.disabled\"\n         *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\"\n         (ngModelChange)=\"validate();triggerDynamicEvent('onChange', $event, field);\">\n\n  <!-- display -->\n  <span [class]=\"field.cssClasses.display\"\n        *ngIf=\"bridgeService?.configuration?.settings?.formMode == 'Display'\">\n    {{field.data.value}}\n  </span>\n\n  <!-- validations -->\n  <div *ngIf=\"isValidationShown()\">\n    <div *ngFor=\"let error of field?.validationErrors\">\n      <p [ngClass]=\"error.type | translate\">\n        {{error.message | translate}}\n      </p>\n    </div>\n  </div>\n</div>\n","styles":["input.form-input{border:1px solid #ced4da;border-radius:.25rem;padding:5px}"]}]}],"members":{}},"LocationFieldComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"FieldComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":7,"character":1},"arguments":[{"selector":"ntw-location-field","template":"<div [class]=\"field.cssClasses.container\"\n     [hidden]=\"isFieldHidden()\"\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\n\n  <!-- label -->\n  <label [class]=\"field.cssClasses.label\"\n         [for]=\"field.name\">\n    {{field.label | translate}}\n    <span class=\"required-asterisk\"\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\n  </label>\n\n  <div class=\"search-location-container\"\n       *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\">\n    <!-- input && display -->\n    <input #search\n           [id]=\"field.name\"\n           [name]=\"field.name\"\n           [title]=\"field.tooltip | translate\"\n           [placeholder]=\"(field.placeholder) ? (field.placeholder | translate) : ''\"\n           autocorrect=\"off\"\n           autocapitalize=\"off\"\n           spellcheck=\"false\"\n           type=\"text\"\n           [class]=\"field.cssClasses.input\"\n           (keydown.enter)=\"$event.preventDefault()\">\n\n    <!-- icon -->\n    <span class=\"search-location-icon\">\n    </span>\n  </div>\n\n  <agm-map [latitude]=\"field.defaultLocation?.latitude\"\n           [longitude]=\"field.defaultLocation?.longitude\"\n           [zoom]=\"field.zoom\"\n           [zoomControl]=\"field.zoomControl\"\n           [ngClass]=\"{'invalid': isValidationShown()}\"\n           (mapClick)=\"addMarkers($event);validate();\">\n\n    <agm-marker *ngFor=\"let marker of field.data.value\"\n                (markerClick)=\"triggerDynamicEvent('markerClick', $event, marker);\"\n                [latitude]=\"marker.latitude\"\n                [longitude]=\"marker.longitude\"\n                [markerDraggable]=\"marker.draggable && bridgeService?.configuration?.settings?.formMode != 'Display'\"\n                (dragEnd)=\"updateMarkerPosition(marker, $event)\">\n\n      <agm-info-window *ngIf=\"marker.infoHtml\">\n        <div [innerHTML]=\"marker.infoHtml | translate\"></div>\n      </agm-info-window>\n    </agm-marker>\n  </agm-map>\n\n  <!-- validations -->\n  <div *ngIf=\"isValidationShown()\">\n    <div *ngFor=\"let error of field?.validationErrors\">\n      <p [ngClass]=\"error.type | translate\">\n        {{error.message | translate}}\n      </p>\n    </div>\n  </div>\n</div>\n","styles":["agm-map{width:100%;height:300px}span.search-location-icon:after{content:\"\\f002\";font:14px/2.5 FontAwesome;position:absolute;height:100%;color:#555}.search-location-container{position:relative}body.en :host ::ng-deep span.search-location-icon:after{right:5px;-webkit-transform:rotate(90deg);transform:rotate(90deg)}body.ar :host ::ng-deep span.search-location-icon:after{left:5px}input.form-input{border:1px solid #ced4da;border-radius:.25rem;padding:5px}"]}]}],"members":{"searchElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":75,"character":3},"arguments":["search"]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"ɵa"},{"__symbolic":"reference","module":"@agm/core","name":"MapsAPILoader","line":82,"character":27},{"__symbolic":"reference","module":"@angular/core","name":"NgZone","line":83,"character":20}]}],"handleDefaultSettings":[{"__symbolic":"method"}],"updateValue":[{"__symbolic":"method"}],"clearValue":[{"__symbolic":"method"}],"appendFormData":[{"__symbolic":"method"}],"addMarkers":[{"__symbolic":"method"}],"activateSearchInput":[{"__symbolic":"method"}],"addMarkersFromLocation":[{"__symbolic":"method"}],"updateMarkerPosition":[{"__symbolic":"method"}]}},"MaskFieldComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"FieldComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":4,"character":1},"arguments":[{"selector":"ntw-mask-field","template":"<div [class]=\"field.cssClasses.container\"\n     [hidden]=\"isFieldHidden()\"\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\n\n  <!-- label -->\n  <label [class]=\"field.cssClasses.label\"\n         [for]=\"field.name\">\n    {{field.label | translate}}\n    <span class=\"required-asterisk\"\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\n  </label>\n\n  <!-- input-->\n  <p-inputMask [id]=\"field.name\"\n               [name]=\"field.name\"\n               [class]=\"field.cssClasses.input\"\n               [ngClass]=\"{'invalid': isValidationShown()}\"\n               [title]=\"field.tooltip | translate\"\n               [placeholder]=\"(field.placeholder) ? (field.placeholder | translate) : ''\"\n               #input=\"ngModel\"\n               [readonly]=\"field.readonly\"\n               [(ngModel)]=\"field.data.value\"\n               [mask]=\"field.validation.mask\"\n               [slotChar]=\"field.slotChar\"\n               [autoClear]=\"field.autoClear\"\n               [unmask]=\"field.unmask\"\n               [disabled]=\"field.disabled\"\n               [maxlength]=\"field.validation.length\"\n               [characterPattern]=\"field.validation.characterPattern\"\n               [pattern]=\"field.validation.pattern\"\n               *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\"\n               (ngModelChange)=\"validate();triggerDynamicEvent('onChange', $event, field);\">\n  </p-inputMask>\n\n  <!-- display -->\n  <span [class]=\"field.cssClasses.display\"\n        *ngIf=\"bridgeService?.configuration?.settings?.formMode == 'Display'\">\n    {{field.data.value}}\n  </span>\n\n  <!-- validations -->\n  <div *ngIf=\"isValidationShown()\">\n    <div *ngFor=\"let error of field?.validationErrors\">\n      <p [ngClass]=\"error.type | translate\">\n        {{error.message | translate}}\n      </p>\n    </div>\n  </div>\n</div>\n","styles":[""]}]}],"members":{"inputMask":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":60,"character":3},"arguments":[{"__symbolic":"reference","module":"primeng/inputmask","name":"InputMask","line":60,"character":13}]}]}],"updateMask":[{"__symbolic":"method"}],"updateMaskValue":[{"__symbolic":"method"}]}},"MasterDetailFieldComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"FieldComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":6,"character":1},"arguments":[{"selector":"ntw-master-detail-field","template":"<div [class]=\"field.cssClasses.container\"\n     [hidden]=\"isFieldHidden()\"\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\n\n  <!-- label -->\n  <label [class]=\"field.cssClasses.label\"\n         [for]=\"field.name\">\n    {{field.label | translate}}\n    <span class=\"required-asterisk\"\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\n  </label>\n\n  <!-- input-->\n  <div>\n    <a href=\"javascript:;\"\n       (click)=\"openDialog();\">\n      <i class=\"fa fa-plus\"></i>\n    </a>\n  </div>\n\n  <!-- display -->\n  <span [class]=\"field.cssClasses.display\"\n        *ngIf=\"bridgeService?.configuration?.settings?.formMode == 'Display'\">\n\n  </span>\n\n  <!-- validations -->\n  <div *ngIf=\"isValidationShown()\">\n    <div *ngFor=\"let error of field?.validationErrors\">\n      <p [ngClass]=\"error.type | translate\">\n        {{error.message | translate}}\n      </p>\n    </div>\n  </div>\n</div>\n","styles":[""]}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"ɵa"},{"__symbolic":"reference","module":"@angular/material","name":"MatDialog","line":52,"character":20}]}],"openDialog":[{"__symbolic":"method"}]}},"MultiSelectFieldComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"BoundableFieldComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":3,"character":1},"arguments":[{"selector":"ntw-multi-select-field","template":"<div [class]=\"field.cssClasses.container\"\n     [hidden]=\"isFieldHidden()\"\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\n\n  <!-- label -->\n  <label [class]=\"field.cssClasses.label\"\n         [for]=\"field.name\">\n    {{field.label | translate}}\n    <span class=\"required-asterisk\"\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\n  </label>\n\n  <!-- input-->\n  <p-multiSelect [options]=\"field.data.options\"\n                 [id]=\"field.name\"\n                 [name]=\"field.name\"\n                 [class]=\"field.cssClasses.input\"\n                 [ngClass]=\"{'invalid': isValidationShown()}\"\n                 [title]=\"field.tooltip | translate\"\n                 #input=\"ngModel\"\n                 [filterPlaceHolder]=\"field.placeholder | translate\"\n                 [(ngModel)]=\"field.data.value\"\n                 [required]=\"field.validation.required\"\n                 [disabled]=\"field.disabled\"\n                 [filter]=\"field.enablefilter\"\n                 optionLabel=\"name\"\n                 dataKey=\"id\"\n                 [defaultLabel]=\"field.placeholder | translate\"\n                 *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\"\n                 (onChange)=\"triggerDynamicEvent('onChange', $event, field);\"\n                 (ngModelChange)=\"validate();\">\n  </p-multiSelect>\n\n  <!-- display -->\n  <div [class]=\"field.cssClasses.display\"\n       *ngIf=\"bridgeService?.configuration?.settings?.formMode == 'Display'\">\n    <ul>\n      <li *ngFor=\"let item of field?.data?.value\">{{item.name}}</li>\n    </ul>\n  </div>\n\n  <!-- validations -->\n  <div *ngIf=\"isValidationShown()\">\n    <div *ngFor=\"let error of field?.validationErrors\">\n      <p [ngClass]=\"error.type | translate\">\n        {{error.message | translate}}\n      </p>\n    </div>\n  </div>\n</div>\n","styles":[":host ::ng-deep .ui-multiselect.ui-widget{width:100%}:host ::ng-deep p-multiselect .ui-multiselect-label.ui-corner-all{margin-bottom:0;height:35px}body.ar :host ::ng-deep .ui-multiselect-filter-container{float:right}body.ar :host ::ng-deep .ui-multiselect-header .ui-multiselect-close{right:unset;left:.375em}body.ar :host ::ng-deep .ui-multiselect-panel .ui-multiselect-item{text-align:right!important}body.ar :host ::ng-deep p-multiselect .ui-corner-right{left:0;right:unset;border-right:1px solid #d6d6d6;border-left:0;border-top-right-radius:0;border-bottom-right-radius:0}body.ar :host ::ng-deep p-multiselect .ui-multiselect-label.ui-corner-all{padding-right:5px}"]}]}],"members":{"clearValue":[{"__symbolic":"method"}],"appendFormData":[{"__symbolic":"method"}]}},"RadiobuttonFieldComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"BoundableFieldComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":3,"character":1},"arguments":[{"selector":"ntw-radiobutton-field","template":"<div [class]=\"field.cssClasses.container\"\n     [hidden]=\"isFieldHidden()\"\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\n\n  <!-- label -->\n  <label [class]=\"field.cssClasses.label\"\n         [for]=\"field.name\">\n    {{field.label | translate}}\n    <span class=\"required-asterisk\"\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\n  </label>\n\n  <!-- input-->\n  <div class=\"radioButtonHolder\"\n       *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\">\n    <p-radioButton *ngFor=\"let radiobutton of field.data.options; let i = index\"\n                   [id]=\"field.name+'_'+i\"\n                   [name]=\"field.name\"\n                   [(ngModel)]=\"field.data.value\"\n                   [class]=\"field.cssClasses.input\"\n                   [ngClass]=\"{'invalid': isValidationShown()}\"\n                   [title]=\"field.tooltip | translate\"\n                   #input=\"ngModel\"\n                   [required]=\"field.validation.required\"\n                   [label]=\" radiobutton.name | translate\"\n                   [value]=\"radiobutton.id\"\n                   [disabled]=\"field.disabled\"\n                   (onClick)=\"triggerDynamicEvent('onClick', $event, field);\"\n                   (ngModelChange)=\"validate();\">\n    </p-radioButton>\n  </div>\n\n  <!-- display -->\n  <span [class]=\"field.cssClasses.display\"\n        *ngIf=\"bridgeService?.configuration?.settings?.formMode == 'Display'\">\n    {{field?.data?.value}}\n  </span>\n\n  <!-- validations -->\n  <div *ngIf=\"isValidationShown()\">\n    <div *ngFor=\"let error of field?.validationErrors\">\n      <p [ngClass]=\"error.type | translate\">\n        {{error.message | translate}}\n      </p>\n    </div>\n  </div>\n</div>\n","styles":["p-radiobutton{display:block}"]}]}],"members":{}},"RatingFieldComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"FieldComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":3,"character":1},"arguments":[{"selector":"ntw-rating-field","template":"<div [class]=\"field.cssClasses.container\"\n     [hidden]=\"isFieldHidden()\"\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\n\n  <!-- label -->\n  <label [class]=\"field?.cssClasses?.label\"\n         [for]=\"field.name\">\n    {{field.label | translate}}\n    <span class=\"required-asterisk\"\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\n  </label>\n\n  <!-- input & display -->\n  <p-rating [id]=\"field.name\"\n            [name]=\"field.name\"\n            [(ngModel)]=\"field.data.value\"\n            [class]=\"field.cssClasses.input\"\n            [ngClass]=\"{'invalid': isValidationShown()}\"\n            [title]=\"field.tooltip | translate\"\n            [readonly]=\"field.readonly\"\n            [disabled]=\"field.disabled\"\n            [stars]=\"field.starNumber\"\n            [iconCancelClass]=\"field.iconCancelClass\"\n            [iconOnClass]=\"field.iconOnClass\"\n            [iconOffClass]=\"field.iconOffClass\"\n            [cancel]=\"field.cancelIcon && !field.readonly\"\n            (onRate)=\"triggerDynamicEvent('onRate', $event, field);validate();\"\n            (onCancel)=\"triggerDynamicEvent('onCancel', $event, field);validate();\">\n  </p-rating>\n\n  <!-- validations -->\n  <div *ngIf=\"isValidationShown()\">\n    <div *ngFor=\"let error of field?.validationErrors\">\n      <p [ngClass]=\"error.type | translate\">\n        {{error.message | translate}}\n      </p>\n    </div>\n  </div>\n</div>\n","styles":[""]}]}],"members":{"handleDefaultSettings":[{"__symbolic":"method"}]}},"SelectFieldComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"BoundableFieldComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":3,"character":1},"arguments":[{"selector":"ntw-select-field","template":"<div [class]=\"field.cssClasses.container\"\n     [hidden]=\"isFieldHidden()\"\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\n\n  <!-- label -->\n  <label [class]=\"field.cssClasses.label\"\n         [for]=\"field.name\">\n    {{field.label | translate}}\n    <span class=\"required-asterisk\"\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\n  </label>\n\n  <!-- input-->\n  <p-dropdown [options]=\"field.data.options\"\n              [id]=\"field.name\"\n              [name]=\"field.name\"\n              [class]=\"field.cssClasses.input\"\n              [ngClass]=\"{'invalid': isValidationShown()}\"\n              [title]=\"field.tooltip | translate\"\n              #input=\"ngModel\"\n              [placeholder]=\"(field.placeholder) ? (field.placeholder | translate) : ''\"\n              [(ngModel)]=\"field.data.value\"\n              [required]=\"field.validation.required\"\n              [disabled]=\"field.disabled\"\n              [filter]=\"field.enablefilter\"\n              optionLabel=\"name\"\n              dataKey=\"id\"\n              *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\"\n              (onChange)=\"validate();triggerDynamicEvent('onChange', $event, field);\">\n  </p-dropdown>\n\n  <!-- display -->\n  <span [class]=\"field.cssClasses.display\"\n        *ngIf=\"bridgeService?.configuration?.settings?.formMode == 'Display'\">\n    {{field?.data?.value?.name}}\n  </span>\n\n  <!-- validations -->\n  <div *ngIf=\"isValidationShown()\">\n    <div *ngFor=\"let error of field?.validationErrors\">\n      <p [ngClass]=\"error.type | translate\">\n        {{error.message | translate}}\n      </p>\n    </div>\n  </div>\n</div>\n","styles":["body.ar :host ::ng-deep .ui-dropdown-panel .ui-dropdown-item{text-align:right}body.ar :host ::ng-deep p-dropdown .ui-dropdown .ui-dropdown-trigger{left:0;right:unset;border-right:1px solid #d6d6d6;border-left:0;border-top-right-radius:0;border-bottom-right-radius:0}body.ar :host ::ng-deep .ui-dropdown .ui-dropdown-label{padding-right:5px}"]}]}],"members":{"appendFormData":[{"__symbolic":"method"}]}},"TimeFieldComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"FieldComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":5,"character":1},"arguments":[{"selector":"ntw-time-field","template":"<div [class]=\"field.cssClasses.container\"\n     [hidden]=\"isFieldHidden()\"\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\n\n  <!-- label -->\n  <label [class]=\"field.cssClasses.label\"\n         [for]=\"field.name\">\n    {{field.label | translate}}\n    <span class=\"required-asterisk\"\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\n  </label>\n\n  <!-- input-->\n  <ntw-mat-timepicker color=\"primary\"\n                      [inputClass]=\"field.cssClasses.input\"\n                      [ngClass]=\"{'invalid': isValidationShown()}\"\n                      [inputId]=\"field.name\"\n                      [inputName]=\"field.name\"\n                      [disabled]=\"field.disabled\"\n                      readonly=true\n                      [tooltip]=\"field.tooltip | translate\"\n                      [placeholderValue]=\"field.tooltip | translate\"\n                      [(userTime)]=\"field.data.value\"\n                      *ngIf=\"bridgeService?.configuration?.settings?.formMode != 'Display'\"\n                      (userTimeChange)=\"setTimePickerFieldValue($event);validate();triggerDynamicEvent('onChange', $event, field);\">\n  </ntw-mat-timepicker>\n\n  <!-- display -->\n  <span [class]=\"field.cssClasses.display\"\n        *ngIf=\"bridgeService?.configuration?.settings?.formMode == 'Display'\">\n    {{field?.data?.value?.hour}}:{{field?.data?.value?.minute}}\n    <span *ngIf=\"field?.data?.value?.format == 12\">{{field?.data?.value?.meriden | translate}}</span>\n  </span>\n\n  <!-- validations -->\n  <div *ngIf=\"isValidationShown()\">\n    <div *ngFor=\"let error of field?.validationErrors\">\n      <p [ngClass]=\"error.type | translate\">\n        {{error.message | translate}}\n      </p>\n    </div>\n  </div>\n</div>\n","styles":[":host ::ng-deep .time-picker-button.mat-button{position:absolute;border:1px solid #2399e5;color:#fff;background:#2399e5;transition:background-color .2s;height:35px}body.en :host ::ng-deep .time-picker-button.mat-button{right:15px}body.ar :host ::ng-deep .time-picker-button.mat-button{left:15px}:host ::ng-deep .w-mat-timepicker .mat-button,:host ::ng-deep .w-mat-timepicker .mat-flat-button,:host ::ng-deep .w-mat-timepicker .mat-icon-button,:host ::ng-deep .w-mat-timepicker .mat-stroked-button{line-height:32px}:host ::ng-deep input.form-input{border:1px solid #ced4da;border-radius:.25rem;padding:5px}"]}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"ɵa"},{"__symbolic":"reference","name":"ɵc"}]}],"handleDefaultSettings":[{"__symbolic":"method"}],"clearValue":[{"__symbolic":"method"}],"appendFormData":[{"__symbolic":"method"}],"setTimePickerFieldValue":[{"__symbolic":"method"}]}},"RecaptchaFieldComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","name":"FieldComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":6,"character":1},"arguments":[{"selector":"ntw-recaptcha-field","template":"<div [class]=\"field.cssClasses.container\"\n     [hidden]=\"isFieldHidden()\"\n     [attr.data-html2canvas-ignore]=\"field.html2CanvasIgnore\">\n\n  <!-- label -->\n  <label [class]=\"field.cssClasses.label\">\n    {{field.label | translate}}\n    <span class=\"required-asterisk\"\n          *ngIf=\"isValidationAsteriskShown()\">*</span>\n  </label>\n\n  <!-- input-->\n  <re-captcha #recaptcha\n              [id]=\"field.name\"\n              [siteKey]=\"field.siteKey\"\n              [class]=\"field.cssClasses.input\"\n              [ngClass]=\"{'invalid': isValidationShown()}\"\n              [theme]=\"field.theme\"\n              [size]=\"field.size\"\n              [title]=\"field.tooltip | translate\"\n              (resolved)=\"validate($event);\">\n  </re-captcha>\n\n  <!-- validations -->\n  <div *ngIf=\"isValidationShown()\">\n    <div *ngFor=\"let error of field?.validationErrors\">\n      <p [ngClass]=\"error.type | translate\">\n        {{error.message | translate}}\n      </p>\n    </div>\n  </div>\n</div>\n","styles":[""]}]}],"members":{"recaptchaElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":45,"character":3},"arguments":["recaptcha"]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"ɵa"},{"__symbolic":"reference","name":"ɵe"}]}],"clearValue":[{"__symbolic":"method"}],"validate":[{"__symbolic":"method"}],"setCaptchaLanguge":[{"__symbolic":"method"}]}},"DefaultMasterDetailFormComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":5,"character":1},"arguments":[{"selector":"ntw-default-master-detail-form","template":"<mat-dialog-actions>\n    <button mat-dialog-close mat-button>\n        <i class=\"fa fa-times-circle\"\n           aria-hidden=\"true\">\n        </i>\n    </button>\n</mat-dialog-actions>\n\n<mat-dialog-content>\n    <ntw-dynamic-form #detailsForm\n                      [parentComponent]=\"this\"\n                      [configurationSourceUrl]=\"field.details.configurationSourceUrl\">\n    </ntw-dynamic-form>\n</mat-dialog-content>\n","styles":[""]}]}],"members":{"detailsFormComponent":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":26,"character":3},"arguments":["detailsForm"]}]}],"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[null,[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Inject","line":30,"character":5},"arguments":[{"__symbolic":"reference","module":"@angular/material","name":"MAT_DIALOG_DATA","line":30,"character":12}]}]],"parameters":[{"__symbolic":"reference","name":"MatDialogRef","module":"@angular/material","arguments":[{"__symbolic":"reference","name":"DefaultMasterDetailFormComponent"}]},{"__symbolic":"reference","name":"ɵg"}]}],"addChild":[{"__symbolic":"method"}]}},"NextPreviousSectionComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":3,"character":1},"arguments":[{"selector":"ntw-next-previous-section","template":"<div class=\"next-prev-container\">\n  <a class=\"arrow-prev\"\n     href=\"javascript:;\"\n     (click)=\"incrementSection(-1)\"\n     title=\"{{'buttons.Previous' | translate}}\">\n  </a>\n  <span class=\"next-prev-header\">{{bridgeService.configuration?.currentSection?.legend | translate}}</span>\n  <a class=\"arrow-next\"\n     href=\"javascript:;\"\n     (click)=\"incrementSection(1)\"\n     title=\"{{'buttons.Next' | translate}}\">\n  </a>\n</div>\n","styles":[".next-prev-container a{text-decoration:none!important}.next-prev-container{text-align:center}.next-prev-header{font-size:2em;font-weight:700}body.en :host ::ng-deep a.arrow-prev:before{content:\"\\f104\";font:3em/1 FontAwesome;color:#555565}body.en :host ::ng-deep a.arrow-next:before{content:\"\\f105\";font:3em/1 FontAwesome;color:#555565}body.en :host ::ng-deep a.arrow-next{float:right}body.en :host ::ng-deep a.arrow-prev{float:left}body.ar :host ::ng-deep a.arrow-prev:before{content:\"\\f105\";font:3em/1 FontAwesome;color:#555565}body.ar :host ::ng-deep a.arrow-next:before{content:\"\\f104\";font:3em/1 FontAwesome;color:#555565}body.ar :host ::ng-deep a.arrow-next{float:left}body.ar :host ::ng-deep a.arrow-prev{float:right}"]}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"ɵa"}]}],"incrementSection":[{"__symbolic":"method"}]}},"TabsSectionComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":4,"character":1},"arguments":[{"selector":"ntw-tabs-section","template":"<ul class=\"nav nav-tabs\">\n  <li *ngFor=\"let section of bridgeService?.configuration?.sections\"\n      class=\"nav-item\">\n    <a class=\"nav-link\"\n       href=\"javascript:;\"\n       [ngClass]=\"{'active':section.id==bridgeService?.configuration?.currentSection?.id}\"\n       (click)=\"switchSection(section)\">\n      <span>{{section.legend | translate}}</span>\n      <span class=\"validation-errors-count\"\n            *ngIf=\"section.validationErrorsCount > 0\">\n      </span>\n    </a>\n  </li>\n</ul>\n","styles":[""]}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"ɵa"}]}],"switchSection":[{"__symbolic":"method"}]}},"ValidationSummaryComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":6,"character":1},"arguments":[{"selector":"ntw-validation-summary","template":"<div #validationSummary\n     class=\"validation-summary-container\"\n     [hidden]=\"bridgeService?.configuration?.settings?.validationSummaryMode !='List'\">\n  <div class=\"validation-summary\"\n       *ngIf=\"bridgeService?.configuration?.validationErrors?.length > 0\">\n    <span class=\"validation-summary-title-section\">{{'validations.ValidationSummaryErrors' | translate}}</span>\n    <ul>\n      <li class=\"validation-summary-error\" *ngFor=\"let error of bridgeService?.configuration?.validationErrors\">\n        {{error.message | translate}}\n      </li>\n    </ul>\n  </div>\n</div>\n","styles":[".validation-summary{border:1px solid #d6d6d6;padding-top:15px;color:red;margin-bottom:20px}.validation-summary-title-section{font-weight:700;padding:15px 20px;display:block}.validation-summary-container{margin-top:20px}"]}]}],"members":{"validationSummaryElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":26,"character":3},"arguments":["validationSummary"]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"ɵa"},{"__symbolic":"reference","name":"ɵe"},{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectorRef","line":31,"character":31}]}],"showSummaryAlert":[{"__symbolic":"method"}]}},"ProgressIndicatorComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":2,"character":1},"arguments":[{"selector":"ntw-progress-indicator","template":"<div class=\"progress-indicator-container\"\n     *ngIf=\"spinnerSourceUrl\">\n  <div class=\"progress-indicator\">\n    <img [src]=\"spinnerSourceUrl\"\n         class=\"progress-indicator-image\"\n         alt=\"progress\" />\n  </div>\n</div>\n","styles":[""]}]}],"members":{"spinnerSourceUrl":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":17,"character":3},"arguments":["spinnerSourceUrl"]}]}]}},"DynamicFormComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":37,"character":1},"arguments":[{"selector":"ntw-dynamic-form","template":"<div #container\n     class=\"container\">\n  <form class=\"dynamic-form-form\"\n        #f=\"ngForm\"\n        (ngSubmit)=\"submitForm(f)\"\n        [hidden]=\"showProgressIndicator\"\n        autocomplete=\"on\">\n    <div class=\"dynamic-form\">\n      <div class=\"sections sections-top\"\n           *ngIf=\"configuration?.settings?.sectionLocation == 'Top' || configuration?.settings?.sectionLocation == 'Both'\">\n        <!-- section tabs -->\n        <ntw-tabs-section *ngIf=\"configuration?.settings?.sectionMode == 'Tabs'\"></ntw-tabs-section>\n\n        <!-- next previous -->\n        <ntw-next-previous-section *ngIf=\"configuration?.settings?.sectionMode == 'NextPrevious'\"></ntw-next-previous-section>\n      </div>\n\n      <div class=\"clearfix\"></div>\n\n      <!-- form -->\n      <div class=\"form-container row\">\n        <div [class]=\"field.cssClasses.wrapper\"\n             *ngFor=\"let field of configuration?.mergedFields\">\n\n          <!-- info -->\n          <ntw-info-field [field]=\"field\"\n                          *ngIf=\"field.fieldType=='info'\">\n          </ntw-info-field>\n\n          <!-- text or number or password -->\n          <ntw-input-field [field]=\"field\"\n                           *ngIf=\"(field.fieldType=='text' || field.fieldType=='number' || field.fieldType=='password')\">\n          </ntw-input-field>\n\n          <!-- dropdown list -->\n          <ntw-select-field [field]=\"field\"\n                            *ngIf=\"field.fieldType=='select'\">\n          </ntw-select-field>\n\n          <!-- datetime picker -->\n          <ntw-datetime-field [field]=\"field\"\n                              *ngIf=\"field.fieldType=='datetime'\">\n          </ntw-datetime-field>\n\n          <!-- hijri datetime picker -->\n          <ntw-datetime-hijri-field [field]=\"field\"\n                                    *ngIf=\"field.fieldType=='datetimehijri'\">\n          </ntw-datetime-hijri-field>\n\n          <!-- time picker -->\n          <ntw-time-field [field]=\"field\"\n                          *ngIf=\"field.fieldType=='time'\">\n          </ntw-time-field>\n\n          <!-- checkbox list -->\n          <ntw-checkbox-field [field]=\"field\"\n                              *ngIf=\"field.fieldType=='checkbox'\">\n          </ntw-checkbox-field>\n\n          <!-- radiobutton list -->\n          <ntw-radiobutton-field [field]=\"field\"\n                                 *ngIf=\"field.fieldType=='radiobutton'\">\n          </ntw-radiobutton-field>\n\n          <!-- multiSelect list -->\n          <ntw-multi-select-field [field]=\"field\"\n                                  *ngIf=\"field.fieldType=='multiselect'\">\n          </ntw-multi-select-field>\n\n          <!-- chips -->\n          <ntw-chips-field [field]=\"field\"\n                           *ngIf=\"field.fieldType=='chips'\">\n          </ntw-chips-field>\n\n          <!-- editor -->\n          <ntw-editor-field [field]=\"field\"\n                            *ngIf=\"field.fieldType=='editor'\">\n          </ntw-editor-field>\n\n          <!-- mask -->\n          <ntw-mask-field [field]=\"field\"\n                          *ngIf=\"field.fieldType=='mask'\">\n          </ntw-mask-field>\n\n          <!-- location -->\n          <ntw-location-field [field]=\"field\"\n                              *ngIf=\"field.fieldType=='location'\">\n          </ntw-location-field>\n\n          <!-- file upload -->\n          <ntw-file-upload-field [field]=\"field\"\n                                 *ngIf=\"field.fieldType=='fileupload'\">\n          </ntw-file-upload-field>\n\n          <!-- Rating -->\n          <ntw-rating-field [field]=\"field\"\n                            *ngIf=\"field.fieldType=='rating'\">\n          </ntw-rating-field>\n\n          <!-- recaptcha -->\n          <ntw-recaptcha-field [field]=\"field\"\n                               *ngIf=\"field.fieldType=='recaptcha'\">\n          </ntw-recaptcha-field>\n\n          <!-- image cropper -->\n          <ntw-image-cropper-field [field]=\"field\"\n                                   *ngIf=\"field.fieldType=='imagecropper'\">\n          </ntw-image-cropper-field>\n\n          <!-- masterdetail -->\n          <ntw-master-detail-field [field]=\"field\"\n                                   *ngIf=\"field.fieldType=='masterdetail'\">\n          </ntw-master-detail-field>\n        </div>\n      </div>\n\n      <div class=\"clearfix\"></div>\n\n      <!-- validation summary -->\n      <ntw-validation-summary></ntw-validation-summary>\n\n      <!-- buttons -->\n      <div [class]=\"configuration?.buttons?.cssClass\"\n           data-html2canvas-ignore=\"true\">\n        <span class=\"main-buttons\"\n              *ngIf=\"configuration?.settings?.formMode != 'Display'\">\n          <button type=\"button\"\n                  [name]=\"configuration?.buttons?.main?.clear?.name\"\n                  [title]=\"configuration?.buttons?.main?.clear?.tooltip | translate\"\n                  [disabled]=\"configuration?.buttons?.main?.clear?.disabled\"\n                  [hidden]=\"isButtonHidden(configuration?.buttons?.main?.clear)\"\n                  [class]=\"configuration?.buttons?.main?.clear?.cssClass\"\n                  (click)=\"clearForm(f)\">\n            {{configuration?.buttons?.main?.clear?.label | translate}}\n          </button>\n          <button type=\"button\"\n                  [name]=\"configuration?.buttons?.main?.save?.name\"\n                  [title]=\"configuration?.buttons?.main?.save?.tooltip | translate\"\n                  [disabled]=\"configuration?.buttons?.main?.save?.disabled\"\n                  [hidden]=\"isButtonHidden(configuration?.buttons?.main?.save)\"\n                  [class]=\"configuration?.buttons?.main?.save?.cssClass\"\n                  (click)=\"saveForm(f)\">\n            {{configuration?.buttons?.main?.save?.label | translate}}\n          </button>\n          <button type=\"submit\"\n                  [name]=\"configuration?.buttons?.main?.submit?.name\"\n                  [title]=\"configuration?.buttons?.main?.submit?.tooltip | translate\"\n                  [disabled]=\"configuration?.buttons?.main?.submit?.disabled\"\n                  [hidden]=\"isButtonHidden(configuration?.buttons?.main?.submit)\"\n                  [class]=\"configuration?.buttons?.main?.submit?.cssClass\">\n            {{configuration?.buttons?.main?.submit?.label | translate}}\n          </button>\n        </span>\n\n        <span class=\"additional-buttons\">\n          <button *ngFor=\"let button of configuration?.buttons?.additionalButtons\"\n                  type=\"button\"\n                  [name]=\"button?.name\"\n                  [title]=\"button?.tooltip | translate\"\n                  [disabled]=\"button?.disabled\"\n                  [hidden]=\"isButtonHidden(button)\"\n                  [class]=\"button?.cssClass\"\n                  (click)=\"triggerDynamicEvent('click', $event, button);\">\n            {{button?.label | translate}}\n          </button>\n        </span>\n      </div>\n\n      <div class=\"sections sections-bottom\"\n           *ngIf=\"configuration?.settings?.sectionLocation == 'Bottom' || configuration?.settings?.sectionLocation == 'Both'\">\n        <!-- section tabs -->\n        <ntw-tabs-section *ngIf=\"configuration?.settings?.sectionMode == 'Tabs'\"></ntw-tabs-section>\n\n        <!-- next previous -->\n        <ntw-next-previous-section *ngIf=\"configuration?.settings?.sectionMode == 'NextPrevious'\"></ntw-next-previous-section>\n      </div>\n    </div>\n  </form>\n\n  <div class=\"clearfix\"></div>\n\n  <ntw-progress-indicator *ngIf=\"showProgressIndicator\"\n                          [spinnerSourceUrl]=\"configuration?.settings?.spinnerSourceUrl\"></ntw-progress-indicator>\n</div>\n","styles":[".formButtons{margin:20px 0}body.ar .main-buttons button{margin-left:10px}body.en .main-buttons button{margin-right:10px}body.ar{direction:rtl!important;text-align:right!important}body.en{direction:ltr!important;text-align:left!important}.ui-dropdown,input.form-input,input.ui-inputtext.ui-widget.ui-state-default,p-dropdown{width:100%!important;height:35px}.input-container{margin-top:24px}label.form-label{font-weight:700}span.required-asterisk{color:red}p.error,p.validation-error{display:block;color:red}.result img{width:150px;height:150px}.form-display{display:block}w-clock *{box-sizing:content-box!important}"],"providers":[{"__symbolic":"reference","module":"@ngx-translate/core","name":"TranslatePipe","line":225,"character":14},{"__symbolic":"reference","name":"ɵa"},{"__symbolic":"reference","name":"ɵc"}],"encapsulation":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewEncapsulation","line":227,"character":17},"member":"None"}}]}],"members":{"configurationSourceUrl":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":231,"character":3},"arguments":["configurationSourceUrl"]}]}],"parentComponent":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":234,"character":3},"arguments":["parentComponent"]}]}],"additionalParameters":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":237,"character":3},"arguments":["additionalParameters"]}]}],"formCleared":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":240,"character":3}}]}],"formDataBound":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":243,"character":3}}]}],"beforeFormSaved":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":246,"character":3}}]}],"afterFormSaved":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":249,"character":3}}]}],"beforeFormSubmitted":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":252,"character":3}}]}],"afterFormSubmitted":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":255,"character":3}}]}],"containerElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":258,"character":3},"arguments":["container"]}]}],"validationSummaryComponent":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":261,"character":3},"arguments":[{"__symbolic":"reference","name":"ValidationSummaryComponent"}]}]}],"inputFieldComponents":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChildren","line":264,"character":3},"arguments":[{"__symbolic":"reference","name":"InputFieldComponent"}]}]}],"selectFieldComponents":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChildren","line":267,"character":3},"arguments":[{"__symbolic":"reference","name":"SelectFieldComponent"}]}]}],"datetimeFieldComponents":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChildren","line":270,"character":3},"arguments":[{"__symbolic":"reference","name":"DatetimeFieldComponent"}]}]}],"datetimeHijriFieldComponents":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChildren","line":273,"character":3},"arguments":[{"__symbolic":"reference","name":"DatetimeHijriFieldComponent"}]}]}],"checkboxFieldComponents":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChildren","line":276,"character":3},"arguments":[{"__symbolic":"reference","name":"CheckboxFieldComponent"}]}]}],"radiobuttonFieldComponents":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChildren","line":279,"character":3},"arguments":[{"__symbolic":"reference","name":"RadiobuttonFieldComponent"}]}]}],"multiSelectFieldComponents":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChildren","line":282,"character":3},"arguments":[{"__symbolic":"reference","name":"MultiSelectFieldComponent"}]}]}],"chipsFieldComponents":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChildren","line":285,"character":3},"arguments":[{"__symbolic":"reference","name":"ChipsFieldComponent"}]}]}],"editorFieldComponents":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChildren","line":288,"character":3},"arguments":[{"__symbolic":"reference","name":"EditorFieldComponent"}]}]}],"maskFieldComponents":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChildren","line":291,"character":3},"arguments":[{"__symbolic":"reference","name":"MaskFieldComponent"}]}]}],"timeFieldComponents":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChildren","line":294,"character":3},"arguments":[{"__symbolic":"reference","name":"TimeFieldComponent"}]}]}],"locationFieldComponents":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChildren","line":297,"character":3},"arguments":[{"__symbolic":"reference","name":"LocationFieldComponent"}]}]}],"fileUploadFieldComponents":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChildren","line":300,"character":3},"arguments":[{"__symbolic":"reference","name":"FileUploadFieldComponent"}]}]}],"imageCropperFieldComponents":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChildren","line":303,"character":3},"arguments":[{"__symbolic":"reference","name":"ImageCropperFieldComponent"}]}]}],"recaptchaFieldComponents":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChildren","line":306,"character":3},"arguments":[{"__symbolic":"reference","name":"RecaptchaFieldComponent"}]}]}],"ratingFieldComponents":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChildren","line":309,"character":3},"arguments":[{"__symbolic":"reference","name":"RatingFieldComponent"}]}]}],"__ctor__":[{"__symbolic":"constructor","parameterDecorators":[null,null,null,null,null,null,null,null,[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Optional","line":329,"character":5}}]],"parameters":[{"__symbolic":"reference","name":"ɵa"},{"__symbolic":"reference","name":"ɵb"},{"__symbolic":"reference","name":"ɵd"},{"__symbolic":"reference","name":"ɵc"},{"__symbolic":"reference","module":"@ngx-translate/core","name":"TranslateService","line":325,"character":30},{"__symbolic":"reference","name":"ɵe"},{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectorRef","line":327,"character":31},{"__symbolic":"reference","module":"@ngx-translate/core","name":"TranslatePipe","line":328,"character":27},{"__symbolic":"reference","module":"@angular/router","name":"ActivatedRoute","line":329,"character":31}]}],"ngOnInit":[{"__symbolic":"method"}],"clearForm":[{"__symbolic":"method"}],"saveForm":[{"__symbolic":"method"}],"submitForm":[{"__symbolic":"method"}],"validateForm":[{"__symbolic":"method"}],"isFormValid":[{"__symbolic":"method"}],"getRequestBody":[{"__symbolic":"method"}],"getFormValues":[{"__symbolic":"method"}],"getFormData":[{"__symbolic":"method"}],"getComponent":[{"__symbolic":"method"}],"isButtonHidden":[{"__symbolic":"method"}],"setFormData":[{"__symbolic":"method"}],"bindForm":[{"__symbolic":"method"}],"loadConfiguration":[{"__symbolic":"method"}],"handleDefaultSettings":[{"__symbolic":"method"}],"handleDefaultDateTimeSettings":[{"__symbolic":"method"}],"bindFormData":[{"__symbolic":"method"}],"validateFormFieldComponent":[{"__symbolic":"method"}],"triggerDynamicEvent":[{"__symbolic":"method"}]}},"NetwaysLibModule":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"NgModule","line":65,"character":1},"arguments":[{"declarations":[{"__symbolic":"reference","name":"WMatTimePickerComponent"},{"__symbolic":"reference","name":"WTimeDialogComponent"},{"__symbolic":"reference","name":"WClockComponent"},{"__symbolic":"reference","name":"WTimeComponent"},{"__symbolic":"reference","name":"FieldComponent"},{"__symbolic":"reference","name":"BoundableFieldComponent"},{"__symbolic":"reference","name":"InputFieldComponent"},{"__symbolic":"reference","name":"SelectFieldComponent"},{"__symbolic":"reference","name":"DatetimeFieldComponent"},{"__symbolic":"reference","name":"DatetimeHijriFieldComponent"},{"__symbolic":"reference","name":"CheckboxFieldComponent"},{"__symbolic":"reference","name":"RadiobuttonFieldComponent"},{"__symbolic":"reference","name":"MultiSelectFieldComponent"},{"__symbolic":"reference","name":"ChipsFieldComponent"},{"__symbolic":"reference","name":"EditorFieldComponent"},{"__symbolic":"reference","name":"MaskFieldComponent"},{"__symbolic":"reference","name":"TimeFieldComponent"},{"__symbolic":"reference","name":"LocationFieldComponent"},{"__symbolic":"reference","name":"FileUploadFieldComponent"},{"__symbolic":"reference","name":"RecaptchaFieldComponent"},{"__symbolic":"reference","name":"InfoFieldComponent"},{"__symbolic":"reference","name":"MasterDetailFieldComponent"},{"__symbolic":"reference","name":"ImageCropperFieldComponent"},{"__symbolic":"reference","name":"RatingFieldComponent"},{"__symbolic":"reference","name":"TabsSectionComponent"},{"__symbolic":"reference","name":"NextPreviousSectionComponent"},{"__symbolic":"reference","name":"ValidationSummaryComponent"},{"__symbolic":"reference","name":"ProgressIndicatorComponent"},{"__symbolic":"reference","name":"DefaultMasterDetailFormComponent"},{"__symbolic":"reference","name":"DynamicFormComponent"}],"imports":[{"__symbolic":"reference","module":"@angular/common","name":"CommonModule","line":99,"character":4},{"__symbolic":"reference","module":"@angular/platform-browser","name":"BrowserModule","line":100,"character":4},{"__symbolic":"reference","module":"@angular/forms","name":"FormsModule","line":101,"character":4},{"__symbolic":"reference","module":"@angular/platform-browser/animations","name":"BrowserAnimationsModule","line":102,"character":4},{"__symbolic":"reference","module":"@angular/flex-layout","name":"FlexLayoutModule","line":103,"character":4},{"__symbolic":"reference","module":"primeng/inputtext","name":"InputTextModule","line":104,"character":4},{"__symbolic":"reference","module":"primeng/calendar","name":"CalendarModule","line":105,"character":4},{"__symbolic":"reference","module":"primeng/checkbox","name":"CheckboxModule","line":106,"character":4},{"__symbolic":"reference","module":"primeng/radiobutton","name":"RadioButtonModule","line":107,"character":4},{"__symbolic":"reference","module":"primeng/fileupload","name":"FileUploadModule","line":108,"character":4},{"__symbolic":"reference","module":"primeng/editor","name":"EditorModule","line":109,"character":4},{"__symbolic":"reference","module":"primeng/inputmask","name":"InputMaskModule","line":110,"character":4},{"__symbolic":"reference","module":"primeng/chips","name":"ChipsModule","line":111,"character":4},{"__symbolic":"reference","module":"primeng/dropdown","name":"DropdownModule","line":112,"character":4},{"__symbolic":"reference","module":"primeng/multiselect","name":"MultiSelectModule","line":113,"character":4},{"__symbolic":"reference","module":"@angular/material","name":"MatDialogModule","line":114,"character":4},{"__symbolic":"reference","module":"@angular/material","name":"MatToolbarModule","line":115,"character":4},{"__symbolic":"reference","module":"@angular/material","name":"MatInputModule","line":116,"character":4},{"__symbolic":"reference","module":"@angular/material","name":"MatSnackBarModule","line":117,"character":4},{"__symbolic":"reference","module":"@angular/material","name":"MatButtonModule","line":118,"character":4},{"__symbolic":"reference","module":"@angular/material","name":"MatButtonToggleModule","line":119,"character":4},{"__symbolic":"reference","module":"@angular/material","name":"MatFormFieldModule","line":120,"character":4},{"__symbolic":"reference","module":"@angular/material","name":"MatIconModule","line":121,"character":4},{"__symbolic":"reference","module":"@angular/material","name":"MatSelectModule","line":122,"character":4},{"__symbolic":"reference","module":"ng2-img-cropper","name":"ImageCropperModule","line":123,"character":4},{"__symbolic":"reference","module":"primeng/rating","name":"RatingModule","line":124,"character":4},{"__symbolic":"reference","module":"ng-recaptcha/recaptcha/recaptcha-common.module","name":"RecaptchaCommonModule","line":125,"character":4},{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"ng-recaptcha/recaptcha/recaptcha.module","name":"RecaptchaModule","line":126,"character":4},"member":"forRoot"}},{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"@ng-bootstrap/ng-bootstrap","name":"NgbModule","line":127,"character":4},"member":"forRoot"}},{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"@ngx-translate/core","name":"TranslateModule","line":128,"character":4},"member":"forRoot"},"arguments":[{"loader":{"provide":{"__symbolic":"reference","module":"@ngx-translate/core","name":"TranslateLoader","line":130,"character":17},"useFactory":{"__symbolic":"reference","name":"HttpLoaderFactory"},"deps":[{"__symbolic":"reference","module":"@angular/common/http","name":"HttpClient","line":132,"character":15}]}}]},{"__symbolic":"call","expression":{"__symbolic":"select","expression":{"__symbolic":"reference","module":"@agm/core","name":"AgmCoreModule","line":135,"character":4},"member":"forRoot"},"arguments":[{"apiKey":"AIzaSyDkk4mAY1r5Q-abux5POCscTR0LojWMwUo","libraries":["places"],"region":"LB","language":"en"}]}],"entryComponents":[{"__symbolic":"reference","name":"DefaultMasterDetailFormComponent"},{"__symbolic":"reference","name":"WMatTimePickerComponent"},{"__symbolic":"reference","name":"WTimeDialogComponent"}],"exports":[{"__symbolic":"reference","name":"WMatTimePickerComponent"},{"__symbolic":"reference","name":"WTimeDialogComponent"},{"__symbolic":"reference","name":"WClockComponent"},{"__symbolic":"reference","name":"WTimeComponent"},{"__symbolic":"reference","name":"FieldComponent"},{"__symbolic":"reference","name":"BoundableFieldComponent"},{"__symbolic":"reference","name":"InputFieldComponent"},{"__symbolic":"reference","name":"SelectFieldComponent"},{"__symbolic":"reference","name":"DatetimeFieldComponent"},{"__symbolic":"reference","name":"DatetimeHijriFieldComponent"},{"__symbolic":"reference","name":"CheckboxFieldComponent"},{"__symbolic":"reference","name":"RadiobuttonFieldComponent"},{"__symbolic":"reference","name":"MultiSelectFieldComponent"},{"__symbolic":"reference","name":"ChipsFieldComponent"},{"__symbolic":"reference","name":"EditorFieldComponent"},{"__symbolic":"reference","name":"MaskFieldComponent"},{"__symbolic":"reference","name":"TimeFieldComponent"},{"__symbolic":"reference","name":"LocationFieldComponent"},{"__symbolic":"reference","name":"FileUploadFieldComponent"},{"__symbolic":"reference","name":"RecaptchaFieldComponent"},{"__symbolic":"reference","name":"InfoFieldComponent"},{"__symbolic":"reference","name":"MasterDetailFieldComponent"},{"__symbolic":"reference","name":"ImageCropperFieldComponent"},{"__symbolic":"reference","name":"RatingFieldComponent"},{"__symbolic":"reference","name":"TabsSectionComponent"},{"__symbolic":"reference","name":"NextPreviousSectionComponent"},{"__symbolic":"reference","name":"ValidationSummaryComponent"},{"__symbolic":"reference","name":"ProgressIndicatorComponent"},{"__symbolic":"reference","name":"DefaultMasterDetailFormComponent"},{"__symbolic":"reference","name":"DynamicFormComponent"}]}]}],"members":{}},"HttpLoaderFactory":{"__symbolic":"function","parameters":["http"],"value":{"__symbolic":"new","expression":{"__symbolic":"reference","module":"@ngx-translate/http-loader","name":"TranslateHttpLoader","line":183,"character":13},"arguments":[{"__symbolic":"reference","name":"http"}]}},"ɵa":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":4,"character":1},"arguments":[{"providedIn":"root"}]}],"members":{"__ctor__":[{"__symbolic":"constructor"}]},"statics":{"ngInjectableDef":{}}},"ɵb":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":4,"character":1},"arguments":[{"providedIn":"root"}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/common/http","name":"HttpClient","line":6,"character":36}]}],"get":[{"__symbolic":"method"}],"post":[{"__symbolic":"method"}],"put":[{"__symbolic":"method"}]},"statics":{"ngInjectableDef":{}}},"ɵc":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":16,"character":1},"arguments":[{"providedIn":"root"}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"ɵa"},{"__symbolic":"reference","name":"ɵb"},{"__symbolic":"reference","name":"ɵd"},{"__symbolic":"reference","name":"ɵe"}]}],"evaluateFunctionOrDefault":[{"__symbolic":"method"}],"loadFile":[{"__symbolic":"method"}],"mergeRecursive":[{"__symbolic":"method"}],"replaceTokens":[{"__symbolic":"method"}],"replaceTokensFromParameters":[{"__symbolic":"method"}],"getQueryStringParameters":[{"__symbolic":"method"}],"decodeURIComponent":[{"__symbolic":"method"}]},"statics":{"ngInjectableDef":{}}},"ɵd":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":2,"character":1},"arguments":[{"providedIn":"root"}]}],"members":{"__ctor__":[{"__symbolic":"constructor"}],"doesKeyExist":[{"__symbolic":"method"}],"save":[{"__symbolic":"method"}],"load":[{"__symbolic":"method"}],"loadOrDefault":[{"__symbolic":"method"}]},"statics":{"ngInjectableDef":{}}},"ɵe":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":5,"character":1},"arguments":[{"providedIn":"root"}]}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@ngx-translate/core","name":"TranslateService","line":14,"character":22},{"__symbolic":"reference","name":"ɵd"}]}],"setLanguage":[{"__symbolic":"method"}],"getLanguage":[{"__symbolic":"method"}]},"statics":{"ngInjectableDef":{}}},"ɵf":{"__symbolic":"class","extends":{"__symbolic":"reference","module":"@ng-bootstrap/ng-bootstrap","name":"NgbDatepickerI18n","line":10,"character":33},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":9,"character":1},"arguments":[{"providedIn":"root"}]}],"members":{"getWeekdayShortName":[{"__symbolic":"method"}],"getMonthShortName":[{"__symbolic":"method"}],"getMonthFullName":[{"__symbolic":"method"}],"getDayAriaLabel":[{"__symbolic":"method"}]},"statics":{"ngInjectableDef":{}}},"ɵg":{"__symbolic":"class","members":{}}},"origins":{"WMatTimePickerComponent":"./lib/components/controls/time-control/w-mat-timepicker/w-mat-timepicker.component","WTimeDialogComponent":"./lib/components/controls/time-control/w-time-dialog/w-time-dialog.component","UserTimeData":"./lib/components/controls/time-control/w-time-dialog/w-time-dialog.component","CLOCK_TYPE":"./lib/components/controls/time-control/w-clock/w-clock.component","TimeFormat":"./lib/components/controls/time-control/w-clock/w-clock.component","ITime":"./lib/components/controls/time-control/w-clock/w-clock.component","WClockComponent":"./lib/components/controls/time-control/w-clock/w-clock.component","WTimeComponent":"./lib/components/controls/time-control/w-time/w-time.component","FieldComponent":"./lib/components/field-templates/field/field.component","BoundableFieldComponent":"./lib/components/field-templates/boundable-field/boundable-field.component","CheckboxFieldComponent":"./lib/components/field-templates/checkbox-field/checkbox-field.component","ChipsFieldComponent":"./lib/components/field-templates/chips-field/chips-field.component","DatetimeFieldComponent":"./lib/components/field-templates/datetime-field/datetime-field.component","DatetimeHijriFieldComponent":"./lib/components/field-templates/datetime-hijri-field/datetime-hijri-field.component","EditorFieldComponent":"./lib/components/field-templates/editor-field/editor-field.component","FileUploadFieldComponent":"./lib/components/field-templates/file-upload-field/file-upload-field.component","ImageCropperFieldComponent":"./lib/components/field-templates/image-cropper-field/image-cropper-field.component","InfoFieldComponent":"./lib/components/field-templates/info-field/info-field.component","InputFieldComponent":"./lib/components/field-templates/input-field/input-field.component","LocationFieldComponent":"./lib/components/field-templates/location-field/location-field.component","MaskFieldComponent":"./lib/components/field-templates/mask-field/mask-field.component","MasterDetailFieldComponent":"./lib/components/field-templates/master-detail-field/master-detail-field.component","MultiSelectFieldComponent":"./lib/components/field-templates/multi-select-field/multi-select-field.component","RadiobuttonFieldComponent":"./lib/components/field-templates/radiobutton-field/radiobutton-field.component","RatingFieldComponent":"./lib/components/field-templates/rating-field/rating-field.component","SelectFieldComponent":"./lib/components/field-templates/select-field/select-field.component","TimeFieldComponent":"./lib/components/field-templates/time-field/time-field.component","RecaptchaFieldComponent":"./lib/components/field-templates/recaptcha-field/recaptcha-field.component","DefaultMasterDetailFormComponent":"./lib/components/form-part-templates/default-master-detail-form/default-master-detail-form.component","NextPreviousSectionComponent":"./lib/components/form-part-templates/next-previous-section/next-previous-section.component","TabsSectionComponent":"./lib/components/form-part-templates/tabs-section/tabs-section.component","ValidationSummaryComponent":"./lib/components/form-part-templates/validation-summary/validation-summary.component","ProgressIndicatorComponent":"./lib/components/form-part-templates/progress-indicator/progress-indicator.component","DynamicFormComponent":"./lib/components/dynamic-form/dynamic-form.component","NetwaysLibModule":"./lib/netways-lib.module","HttpLoaderFactory":"./lib/netways-lib.module","ɵa":"./lib/services/bridge.service","ɵb":"./lib/services/http-requests.service","ɵc":"./lib/services/utilities.service","ɵd":"./lib/services/local-storage.service","ɵe":"./lib/services/language.service","ɵf":"./lib/services/datepicker-calendar.service","ɵg":"./lib/models/field"},"importAs":"netways-lib"}